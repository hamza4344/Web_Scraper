[
  {
    "page_content": "# Prompt Engineering Guide Prompt engineering is a relatively new discipline for developing and optimizing prompts to efficiently use language models (LMs) for a wide variety of applications and research topics. Prompt engineering skills help to better understand the capabilities and limitations of large language models (LLMs). Researchers use prompt engineering to improve the capacity of LLMs on a wide range of common and complex tasks such as question answering and arithmetic reasoning. Developers use prompt engineering to design robust and effective prompting techniques that interface with LLMs and other tools.",
    "metadata": {
      "H1": "Prompt Engineering Guide",
      "source": "https://www.promptingguide.ai/",
      "title": "Prompt Engineering Guide | Prompt Engineering Guide",
      "description": "",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 621
  },
  {
    "page_content": "Prompt engineering is not just about designing and developing prompts. It encompasses a wide range of skills and techniques that are useful for interacting and developing with LLMs. It's an important skill to interface, build with, and understand capabilities of LLMs. You can use prompt engineering to improve safety of LLMs and build new capabilities like augmenting LLMs with domain knowledge and external tools. Motivated by the high interest in developing with LLMs, we have created this new prompt engineering guide that contains all the latest papers, advanced prompting techniques, learning guides, model-specific prompting guides, lectures, references, new LLM capabilities, and tools related to prompt engineering. * * *",
    "metadata": {
      "H1": "Prompt Engineering Guide",
      "source": "https://www.promptingguide.ai/",
      "title": "Prompt Engineering Guide | Prompt Engineering Guide",
      "description": "",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 730
  },
  {
    "page_content": "## Want to learn more? Learn more about advanced prompt engineering techniques and best practices in our new AI courses. [Join now! (opens in a new tab)](https://dair-ai.thinkific.com/) Use code PROMPTING20 to get an extra 20% off. Last updated on April 24, 2025 [Introduction](/introduction \"Introduction\")",
    "metadata": {
      "H1": "Prompt Engineering Guide",
      "H2": "Want to learn more?",
      "source": "https://www.promptingguide.ai/",
      "title": "Prompt Engineering Guide | Prompt Engineering Guide",
      "description": "",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 307
  },
  {
    "page_content": "# LLM Powered Autonomous Agents Date: June 23, 2023 | Estimated Reading Time: 31 min | Author: Lilian Weng Table of Contents * Agent System Overview * Component One: Planning * Task Decomposition * Self-Reflection * Component Two: Memory * Types of Memory * Maximum Inner Product Search (MIPS) * Component Three: Tool Use * Case Studies * Scientific Discovery Agent * Generative Agents Simulation * Proof-of-Concept Examples * Challenges * Citation * References Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as [AutoGPT](https://github.com/Significant-Gravitas/Auto-GPT), [GPT-Engineer](https://github.com/AntonOsika/gpt-engineer) and [BabyAGI](https://github.com/yoheinakajima/babyagi), serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.",
    "metadata": {
      "H1": "LLM Powered Autonomous Agents",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 954
  },
  {
    "page_content": "# Agent System Overview# In a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components: * **Planning** * Subgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks. * Reflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results. * **Memory** * Short-term memory: I would consider all the in-context learning (See [Prompt Engineering](https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/)) as utilizing short-term memory of the model to learn. * Long-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval. * **Tool use**",
    "metadata": {
      "H1": "Agent System Overview#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 941
  },
  {
    "page_content": "* **Tool use** * The agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more. Overview of a LLM-powered autonomous agent system.",
    "metadata": {
      "H1": "Agent System Overview#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 320
  },
  {
    "page_content": "# Component One: Planning# A complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
    "metadata": {
      "H1": "Component One: Planning#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 127
  },
  {
    "page_content": "## Task Decomposition# [**Chain of thought**](https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/#chain-of-thought-cot) (CoT; [Wei et al. 2022](https://arxiv.org/abs/2201.11903)) has become a standard prompting technique for enhancing model performance on complex tasks. The model is instructed to “think step by step” to utilize more test-time computation to decompose hard tasks into smaller and simpler steps. CoT transforms big tasks into multiple manageable tasks and shed lights into an interpretation of the model’s thinking process. **Tree of Thoughts** ([Yao et al. 2023](https://arxiv.org/abs/2305.10601)) extends CoT by exploring multiple reasoning possibilities at each step. It first decomposes the problem into multiple thought steps and generates multiple thoughts per step, creating a tree structure. The search process can be BFS (breadth-first search) or DFS (depth-first search) with each state evaluated by a classifier (via a prompt) or majority vote.",
    "metadata": {
      "H1": "Component One: Planning#",
      "H2": "Task Decomposition#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 986
  },
  {
    "page_content": "Task decomposition can be done (1) by LLM with simple prompting like `\"Steps for XYZ.\\n1.\"`, `\"What are the subgoals for achieving XYZ?\"`, (2) by using task-specific instructions; e.g. `\"Write a story outline.\"` for writing a novel, or (3) with human inputs.",
    "metadata": {
      "H1": "Component One: Planning#",
      "H2": "Task Decomposition#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 258
  },
  {
    "page_content": "Another quite distinct approach, **LLM+P** ([Liu et al. 2023](https://arxiv.org/abs/2304.11477)), involves relying on an external classical planner to do long-horizon planning. This approach utilizes the Planning Domain Definition Language (PDDL) as an intermediate interface to describe the planning problem. In this process, LLM (1) translates the problem into “Problem PDDL”, then (2) requests a classical planner to generate a PDDL plan based on an existing “Domain PDDL”, and finally (3) translates the PDDL plan back into natural language. Essentially, the planning step is outsourced to an external tool, assuming the availability of domain-specific PDDL and a suitable planner which is common in certain robotic setups but not in many other domains.",
    "metadata": {
      "H1": "Component One: Planning#",
      "H2": "Task Decomposition#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 757
  },
  {
    "page_content": "## Self-Reflection# Self-reflection is a vital aspect that allows autonomous agents to improve iteratively by refining past action decisions and correcting previous mistakes. It plays a crucial role in real-world tasks where trial and error are inevitable. **ReAct** ([Yao et al. 2023](https://arxiv.org/abs/2210.03629)) integrates reasoning and acting within LLM by extending the action space to be a combination of task-specific discrete actions and the language space. The former enables LLM to interact with the environment (e.g. use Wikipedia search API), while the latter prompting LLM to generate reasoning traces in natural language. The ReAct prompt template incorporates explicit steps for LLM to think, roughly formatted as: Thought: ... Action: ... Observation: ... ... (Repeated many times) copy",
    "metadata": {
      "H1": "Component One: Planning#",
      "H2": "Self-Reflection#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 808
  },
  {
    "page_content": "The ReAct prompt template incorporates explicit steps for LLM to think, roughly formatted as: Thought: ... Action: ... Observation: ... ... (Repeated many times) copy Examples of reasoning trajectories for knowledge-intensive tasks (e.g. HotpotQA, FEVER) and decision-making tasks (e.g. AlfWorld Env, WebShop). (Image source: [Yao et al. 2023](https://arxiv.org/abs/2210.03629)). In both experiments on knowledge-intensive tasks and decision-making tasks, `ReAct` works better than the `Act`-only baseline where `Thought: …` step is removed.",
    "metadata": {
      "H1": "Component One: Planning#",
      "H2": "Self-Reflection#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 541
  },
  {
    "page_content": "In both experiments on knowledge-intensive tasks and decision-making tasks, `ReAct` works better than the `Act`-only baseline where `Thought: …` step is removed. **Reflexion** ([Shinn & Labash 2023](https://arxiv.org/abs/2303.11366)) is a framework to equip agents with dynamic memory and self-reflection capabilities to improve reasoning skills. Reflexion has a standard RL setup, in which the reward model provides a simple binary reward and the action space follows the setup in ReAct where the task-specific action space is augmented with language to enable complex reasoning steps. After each action at, the agent computes a heuristic ht and optionally may _decide to reset_ the environment to start a new trial depending on the self-reflection results. Illustration of the Reflexion framework. (Image source: [Shinn & Labash, 2023](https://arxiv.org/abs/2303.11366))",
    "metadata": {
      "H1": "Component One: Planning#",
      "H2": "Self-Reflection#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 872
  },
  {
    "page_content": "Illustration of the Reflexion framework. (Image source: [Shinn & Labash, 2023](https://arxiv.org/abs/2303.11366)) The heuristic function determines when the trajectory is inefficient or contains hallucination and should be stopped. Inefficient planning refers to trajectories that take too long without success. Hallucination is defined as encountering a sequence of consecutive identical actions that lead to the same observation in the environment. Self-reflection is created by showing two-shot examples to LLM and each example is a pair of (failed trajectory, ideal reflection for guiding future changes in the plan). Then reflections are added into the agent’s working memory, up to three, to be used as context for querying LLM. Experiments on AlfWorld Env and HotpotQA. Hallucination is a more common failure than inefficient planning in AlfWorld. (Image source: [Shinn & Labash, 2023](https://arxiv.org/abs/2303.11366))",
    "metadata": {
      "H1": "Component One: Planning#",
      "H2": "Self-Reflection#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 927
  },
  {
    "page_content": "**Chain of Hindsight** (CoH; [Liu et al. 2023](https://arxiv.org/abs/2302.02676)) encourages the model to improve on its own outputs by explicitly presenting it with a sequence of past outputs, each annotated with feedback. Human feedback data is a collection of Dh={(x,yi,ri,zi)}i=1n, where x is the prompt, each yi is a model completion, ri is the human rating of yi, and zi is the corresponding human-provided hindsight feedback. Assume the feedback tuples are ranked by reward, rn≥rn−1≥⋯≥r1 The process is supervised fine-tuning where the data is a sequence in the form of τh=(x,zi,yi,zj,yj,…,zn,yn), where ≤i≤j≤n. The model is finetuned to only predict yn where conditioned on the sequence prefix, such that the model can self-reflect to produce better output based on the feedback sequence. The model can optionally receive multiple rounds of instructions with human annotators at test time.",
    "metadata": {
      "H1": "Component One: Planning#",
      "H2": "Self-Reflection#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 897
  },
  {
    "page_content": "To avoid overfitting, CoH adds a regularization term to maximize the log-likelihood of the pre-training dataset. To avoid shortcutting and copying (because there are many common words in feedback sequences), they randomly mask 0% - 5% of past tokens during training. The training dataset in their experiments is a combination of [WebGPT comparisons](https://huggingface.co/datasets/openai/webgpt_comparisons), [summarization from human feedback](https://github.com/openai/summarize-from-feedback) and [human preference dataset](https://github.com/anthropics/hh-rlhf). After fine-tuning with CoH, the model can follow instructions to produce outputs with incremental improvement in a sequence. (Image source: [Liu et al. 2023](https://arxiv.org/abs/2302.02676))",
    "metadata": {
      "H1": "Component One: Planning#",
      "H2": "Self-Reflection#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 760
  },
  {
    "page_content": "After fine-tuning with CoH, the model can follow instructions to produce outputs with incremental improvement in a sequence. (Image source: [Liu et al. 2023](https://arxiv.org/abs/2302.02676)) The idea of CoH is to present a history of sequentially improved outputs in context and train the model to take on the trend to produce better outputs. **Algorithm Distillation** (AD; [Laskin et al. 2023](https://arxiv.org/abs/2210.14215)) applies the same idea to cross-episode trajectories in reinforcement learning tasks, where an _algorithm_ is encapsulated in a long history-conditioned policy. Considering that an agent interacts with the environment many times and in each episode the agent gets a little better, AD concatenates this learning history and feeds that into the model. Hence we should expect the next predicted action to lead to better performance than previous trials. The goal is to learn the process of RL instead of training a task-specific policy itself.",
    "metadata": {
      "H1": "Component One: Planning#",
      "H2": "Self-Reflection#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 972
  },
  {
    "page_content": "Illustration of how Algorithm Distillation (AD) works. (Image source: [Laskin et al. 2023](https://arxiv.org/abs/2210.14215)). The paper hypothesizes that any algorithm that generates a set of learning histories can be distilled into a neural network by performing behavioral cloning over actions. The history data is generated by a set of source policies, each trained for a specific task. At the training stage, during each RL run, a random task is sampled and a subsequence of multi-episode history is used for training, such that the learned policy is task-agnostic. In reality, the model has limited context window length, so episodes should be short enough to construct multi-episode history. Multi-episodic contexts of 2-4 episodes are necessary to learn a near-optimal in-context RL algorithm. The emergence of in-context RL requires long enough context.",
    "metadata": {
      "H1": "Component One: Planning#",
      "H2": "Self-Reflection#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 862
  },
  {
    "page_content": "In comparison with three baselines, including ED (expert distillation, behavior cloning with expert trajectories instead of learning history), source policy (used for generating trajectories for distillation by [UCB](https://lilianweng.github.io/posts/2018-01-23-multi-armed-bandit/#upper-confidence-bounds)), RL^2 ([Duan et al. 2017](https://arxiv.org/abs/1611.02779); used as upper bound since it needs online RL), AD demonstrates in-context RL with performance getting close to RL^2 despite only using offline RL and learns much faster than other baselines. When conditioned on partial training history of the source policy, AD also improves much faster than ED baseline.",
    "metadata": {
      "H1": "Component One: Planning#",
      "H2": "Self-Reflection#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 674
  },
  {
    "page_content": "Comparison of AD, ED, source policy and RL^2 on environments that require memory and exploration. Only binary reward is assigned. The source policies are trained with [A3C](https://lilianweng.github.io/posts/2018-04-08-policy-gradient/#a3c) for \"dark\" environments and [DQN](http://lilianweng.github.io/posts/2018-02-19-rl-overview/#deep-q-network) for watermaze. (Image source: [Laskin et al. 2023](https://arxiv.org/abs/2210.14215))",
    "metadata": {
      "H1": "Component One: Planning#",
      "H2": "Self-Reflection#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 434
  },
  {
    "page_content": "# Component Two: Memory# (Big thank you to ChatGPT for helping me draft this section. I’ve learned a lot about the human brain and data structure for fast MIPS in my [conversations](https://chat.openai.com/share/46ff149e-a4c7-4dd7-a800-fc4a642ea389) with ChatGPT.)",
    "metadata": {
      "H1": "Component Two: Memory#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 264
  },
  {
    "page_content": "## Types of Memory# Memory can be defined as the processes used to acquire, store, retain, and later retrieve information. There are several types of memory in human brains. 1. **Sensory Memory** : This is the earliest stage of memory, providing the ability to retain impressions of sensory information (visual, auditory, etc) after the original stimuli have ended. Sensory memory typically only lasts for up to a few seconds. Subcategories include iconic memory (visual), echoic memory (auditory), and haptic memory (touch). 2. **Short-Term Memory** (STM) or **Working Memory** : It stores information that we are currently aware of and needed to carry out complex cognitive tasks such as learning and reasoning. Short-term memory is believed to have the capacity of about 7 items ([Miller 1956](psychclassics.yorku.ca/Miller/)) and lasts for 20-30 seconds.",
    "metadata": {
      "H1": "Component Two: Memory#",
      "H2": "Types of Memory#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 858
  },
  {
    "page_content": "3. **Long-Term Memory** (LTM): Long-term memory can store information for a remarkably long time, ranging from a few days to decades, with an essentially unlimited storage capacity. There are two subtypes of LTM: * Explicit / declarative memory: This is memory of facts and events, and refers to those memories that can be consciously recalled, including episodic memory (events and experiences) and semantic memory (facts and concepts). * Implicit / procedural memory: This type of memory is unconscious and involves skills and routines that are performed automatically, like riding a bike or typing on a keyboard. Categorization of human memory. We can roughly consider the following mappings: * Sensory memory as learning embedding representations for raw inputs, including text, image or other modalities; * Short-term memory as in-context learning. It is short and finite, as it is restricted by the finite context window length of Transformer.",
    "metadata": {
      "H1": "Component Two: Memory#",
      "H2": "Types of Memory#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 949
  },
  {
    "page_content": "* Short-term memory as in-context learning. It is short and finite, as it is restricted by the finite context window length of Transformer. * Long-term memory as the external vector store that the agent can attend to at query time, accessible via fast retrieval.",
    "metadata": {
      "H1": "Component Two: Memory#",
      "H2": "Types of Memory#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 262
  },
  {
    "page_content": "## Maximum Inner Product Search (MIPS)# The external memory can alleviate the restriction of finite attention span. A standard practice is to save the embedding representation of information into a vector store database that can support fast maximum inner-product search ([MIPS](https://en.wikipedia.org/wiki/Maximum_inner-product_search)). To optimize the retrieval speed, the common choice is the _approximate nearest neighbors (ANN)_ algorithm to return approximately top k nearest neighbors to trade off a little accuracy lost for a huge speedup. A couple common choices of ANN algorithms for fast MIPS: * [**LSH**](https://en.wikipedia.org/wiki/Locality-sensitive_hashing) (Locality-Sensitive Hashing): It introduces a _hashing_ function such that similar input items are mapped to the same buckets with high probability, where the number of buckets is much smaller than the number of inputs.",
    "metadata": {
      "H1": "Component Two: Memory#",
      "H2": "Maximum Inner Product Search (MIPS)#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 897
  },
  {
    "page_content": "* [**ANNOY**](https://github.com/spotify/annoy) (Approximate Nearest Neighbors Oh Yeah): The core data structure are _random projection trees_ , a set of binary trees where each non-leaf node represents a hyperplane splitting the input space into half and each leaf stores one data point. Trees are built independently and at random, so to some extent, it mimics a hashing function. ANNOY search happens in all the trees to iteratively search through the half that is closest to the query and then aggregates the results. The idea is quite related to KD tree but a lot more scalable.",
    "metadata": {
      "H1": "Component Two: Memory#",
      "H2": "Maximum Inner Product Search (MIPS)#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 583
  },
  {
    "page_content": "* [**HNSW**](https://arxiv.org/abs/1603.09320) (Hierarchical Navigable Small World): It is inspired by the idea of [small world networks](https://en.wikipedia.org/wiki/Small-world_network) where most nodes can be reached by any other nodes within a small number of steps; e.g. “six degrees of separation” feature of social networks. HNSW builds hierarchical layers of these small-world graphs, where the bottom layers contain the actual data points. The layers in the middle create shortcuts to speed up search. When performing a search, HNSW starts from a random node in the top layer and navigates towards the target. When it can’t get any closer, it moves down to the next layer, until it reaches the bottom layer. Each move in the upper layers can potentially cover a large distance in the data space, and each move in the lower layers refines the search quality.",
    "metadata": {
      "H1": "Component Two: Memory#",
      "H2": "Maximum Inner Product Search (MIPS)#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 867
  },
  {
    "page_content": "* [**FAISS**](https://github.com/facebookresearch/faiss) (Facebook AI Similarity Search): It operates on the assumption that in high dimensional space, distances between nodes follow a Gaussian distribution and thus there should exist _clustering_ of data points. FAISS applies vector quantization by partitioning the vector space into clusters and then refining the quantization within clusters. Search first looks for cluster candidates with coarse quantization and then further looks into each cluster with finer quantization. * [**ScaNN**](https://github.com/google-research/google-research/tree/master/scann) (Scalable Nearest Neighbors): The main innovation in ScaNN is _anisotropic vector quantization_. It quantizes a data point xi to x~i such that the inner product ⟨q,xi⟩ is as similar to the original distance of ∠q,x~i as possible, instead of picking the closet quantization centroid points.",
    "metadata": {
      "H1": "Component Two: Memory#",
      "H2": "Maximum Inner Product Search (MIPS)#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 903
  },
  {
    "page_content": "Comparison of MIPS algorithms, measured in recall@10. (Image source: [Google Blog, 2020](https://ai.googleblog.com/2020/07/announcing-scann-efficient-vector.html)) Check more MIPS algorithms and performance comparison in [ann-benchmarks.com](https://ann-benchmarks.com/).",
    "metadata": {
      "H1": "Component Two: Memory#",
      "H2": "Maximum Inner Product Search (MIPS)#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 271
  },
  {
    "page_content": "# Component Three: Tool Use# Tool use is a remarkable and distinguishing characteristic of human beings. We create, modify and utilize external objects to do things that go beyond our physical and cognitive limits. Equipping LLMs with external tools can significantly extend the model capabilities. A picture of a sea otter using rock to crack open a seashell, while floating in the water. While some other animals can use tools, the complexity is not comparable with humans. (Image source: [Animals using tools](https://www.popularmechanics.com/science/animals/g39714258/animals-using-tools/))",
    "metadata": {
      "H1": "Component Three: Tool Use#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 594
  },
  {
    "page_content": "**MRKL** ([Karpas et al. 2022](https://arxiv.org/abs/2205.00445)), short for “Modular Reasoning, Knowledge and Language”, is a neuro-symbolic architecture for autonomous agents. A MRKL system is proposed to contain a collection of “expert” modules and the general-purpose LLM works as a router to route inquiries to the best suitable expert module. These modules can be neural (e.g. deep learning models) or symbolic (e.g. math calculator, currency converter, weather API). They did an experiment on fine-tuning LLM to call a calculator, using arithmetic as a test case. Their experiments showed that it was harder to solve verbal math problems than explicitly stated math problems because LLMs (7B Jurassic1-large model) failed to extract the right arguments for the basic arithmetic reliably. The results highlight when the external symbolic tools can work reliably, _knowing when to and how to use the tools are crucial_ , determined by the LLM capability.",
    "metadata": {
      "H1": "Component Three: Tool Use#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 959
  },
  {
    "page_content": "Both **TALM** (Tool Augmented Language Models; [Parisi et al. 2022](https://arxiv.org/abs/2205.12255)) and **Toolformer** ([Schick et al. 2023](https://arxiv.org/abs/2302.04761)) fine-tune a LM to learn to use external tool APIs. The dataset is expanded based on whether a newly added API call annotation can improve the quality of model outputs. See more details in the [“External APIs” section](https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/#external-apis) of Prompt Engineering. ChatGPT [Plugins](https://openai.com/blog/chatgpt-plugins) and OpenAI API [function calling](https://platform.openai.com/docs/guides/gpt/function-calling) are good examples of LLMs augmented with tool use capability working in practice. The collection of tool APIs can be provided by other developers (as in Plugins) or self-defined (as in function calls).",
    "metadata": {
      "H1": "Component Three: Tool Use#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 857
  },
  {
    "page_content": "**HuggingGPT** ([Shen et al. 2023](https://arxiv.org/abs/2303.17580)) is a framework to use ChatGPT as the task planner to select models available in HuggingFace platform according to the model descriptions and summarize the response based on the execution results. Illustration of how HuggingGPT works. (Image source: [Shen et al. 2023](https://arxiv.org/abs/2303.17580)) The system comprises of 4 stages: **(1) Task planning** : LLM works as the brain and parses the user requests into multiple tasks. There are four attributes associated with each task: task type, ID, dependencies, and arguments. They use few-shot examples to guide LLM to do task parsing and planning. Instruction:",
    "metadata": {
      "H1": "Component Three: Tool Use#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 686
  },
  {
    "page_content": "Instruction: The AI assistant can parse user input to several tasks: [{\"task\": task, \"id\", task_id, \"dep\": dependency_task_ids, \"args\": {\"text\": text, \"image\": URL, \"audio\": URL, \"video\": URL}}]. The \"dep\" field denotes the id of the previous task which generates a new resource that the current task relies on. A special tag \"-task_id\" refers to the generated text image, audio and video in the dependency task with id as task_id. The task MUST be selected from the following options: {{ Available Task List }}. There is a logical relationship between tasks, please note their order. If the user input can't be parsed, you need to reply empty JSON. Here are several cases for your reference: {{ Demonstrations }}. The chat history is recorded as {{ Chat History }}. From this chat history, you can find the path of the user-mentioned resources for your task planning.",
    "metadata": {
      "H1": "Component Three: Tool Use#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 868
  },
  {
    "page_content": "**(2) Model selection** : LLM distributes the tasks to expert models, where the request is framed as a multiple-choice question. LLM is presented with a list of models to choose from. Due to the limited context length, task type based filtration is needed. Instruction: Given the user request and the call command, the AI assistant helps the user to select a suitable model from a list of models to process the user request. The AI assistant merely outputs the model id of the most appropriate model. The output must be in a strict JSON format: \"id\": \"id\", \"reason\": \"your detail reason for the choice\". We have a list of models for you to choose from {{ Candidate Models }}. Please select one model from the list. **(3) Task execution** : Expert models execute on the specific tasks and log results. Instruction:",
    "metadata": {
      "H1": "Component Three: Tool Use#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 813
  },
  {
    "page_content": "**(3) Task execution** : Expert models execute on the specific tasks and log results. Instruction: With the input and the inference results, the AI assistant needs to describe the process and results. The previous stages can be formed as - User Input: {{ User Input }}, Task Planning: {{ Tasks }}, Model Selection: {{ Model Assignment }}, Task Execution: {{ Predictions }}. You must first answer the user's request in a straightforward manner. Then describe the task process and show your analysis and model inference results to the user in the first person. If inference results contain a file path, must tell the user the complete file path. **(4) Response generation** : LLM receives the execution results and provides summarized results to users.",
    "metadata": {
      "H1": "Component Three: Tool Use#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 750
  },
  {
    "page_content": "**(4) Response generation** : LLM receives the execution results and provides summarized results to users. To put HuggingGPT into real world usage, a couple challenges need to solve: (1) Efficiency improvement is needed as both LLM inference rounds and interactions with other models slow down the process; (2) It relies on a long context window to communicate over complicated task content; (3) Stability improvement of LLM outputs and external model services.",
    "metadata": {
      "H1": "Component Three: Tool Use#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 461
  },
  {
    "page_content": "**API-Bank** ([Li et al. 2023](https://arxiv.org/abs/2304.08244)) is a benchmark for evaluating the performance of tool-augmented LLMs. It contains 53 commonly used API tools, a complete tool-augmented LLM workflow, and 264 annotated dialogues that involve 568 API calls. The selection of APIs is quite diverse, including search engines, calculator, calendar queries, smart home control, schedule management, health data management, account authentication workflow and more. Because there are a large number of APIs, LLM first has access to API search engine to find the right API to call and then uses the corresponding documentation to make a call. Pseudo code of how LLM makes an API call in API-Bank. (Image source: [Li et al. 2023](https://arxiv.org/abs/2304.08244)) In the API-Bank workflow, LLMs need to make a couple of decisions and at each step we can evaluate how accurate that decision is. Decisions include: 1. Whether an API call is needed.",
    "metadata": {
      "H1": "Component Three: Tool Use#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 954
  },
  {
    "page_content": "In the API-Bank workflow, LLMs need to make a couple of decisions and at each step we can evaluate how accurate that decision is. Decisions include: 1. Whether an API call is needed. 2. Identify the right API to call: if not good enough, LLMs need to iteratively modify the API inputs (e.g. deciding search keywords for Search Engine API). 3. Response based on the API results: the model can choose to refine and call again if results are not satisfied. This benchmark evaluates the agent’s tool use capabilities at three levels: * Level-1 evaluates the ability to _call the API_. Given an API’s description, the model needs to determine whether to call a given API, call it correctly, and respond properly to API returns. * Level-2 examines the ability to _retrieve the API_. The model needs to search for possible APIs that may solve the user’s requirement and learn how to use them by reading documentation.",
    "metadata": {
      "H1": "Component Three: Tool Use#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 910
  },
  {
    "page_content": "* Level-2 examines the ability to _retrieve the API_. The model needs to search for possible APIs that may solve the user’s requirement and learn how to use them by reading documentation. * Level-3 assesses the ability to _plan API beyond retrieve and call_. Given unclear user requests (e.g. schedule group meetings, book flight/hotel/restaurant for a trip), the model may have to conduct multiple API calls to solve it.",
    "metadata": {
      "H1": "Component Three: Tool Use#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 421
  },
  {
    "page_content": "# Case Studies# ## Scientific Discovery Agent# **ChemCrow** ([Bran et al. 2023](https://arxiv.org/abs/2304.05376)) is a domain-specific example in which LLM is augmented with 13 expert-designed tools to accomplish tasks across organic synthesis, drug discovery, and materials design. The workflow, implemented in [LangChain](https://github.com/hwchase17/langchain), reflects what was previously described in the ReAct and MRKLs and combines CoT reasoning with tools relevant to the tasks: * The LLM is provided with a list of tool names, descriptions of their utility, and details about the expected input/output. * It is then instructed to answer a user-given prompt using the tools provided when necessary. The instruction suggests the model to follow the ReAct format - `Thought, Action, Action Input, Observation`.",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Scientific Discovery Agent#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 818
  },
  {
    "page_content": "One interesting observation is that while the LLM-based evaluation concluded that GPT-4 and ChemCrow perform nearly equivalently, human evaluations with experts oriented towards the completion and chemical correctness of the solutions showed that ChemCrow outperforms GPT-4 by a large margin. This indicates a potential problem with using LLM to evaluate its own performance on domains that requires deep expertise. The lack of expertise may cause LLMs not knowing its flaws and thus cannot well judge the correctness of task results. [Boiko et al. (2023)](https://arxiv.org/abs/2304.05332) also looked into LLM-empowered agents for scientific discovery, to handle autonomous design, planning, and performance of complex scientific experiments. This agent can use tools to browse the Internet, read documentation, execute code, call robotics experimentation APIs and leverage other LLMs.",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Scientific Discovery Agent#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 887
  },
  {
    "page_content": "For example, when requested to `\"develop a novel anticancer drug\"`, the model came up with the following reasoning steps: 1. inquired about current trends in anticancer drug discovery; 2. selected a target; 3. requested a scaffold targeting these compounds; 4. Once the compound was identified, the model attempted its synthesis. They also discussed the risks, especially with illicit drugs and bioweapons. They developed a test set containing a list of known chemical weapon agents and asked the agent to synthesize them. 4 out of 11 requests (36%) were accepted to obtain a synthesis solution and the agent attempted to consult documentation to execute the procedure. 7 out of 11 were rejected and among these 7 rejected cases, 5 happened after a Web search while 2 were rejected based on prompt only.",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Scientific Discovery Agent#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 803
  },
  {
    "page_content": "## Generative Agents Simulation# **Generative Agents** ([Park, et al. 2023](https://arxiv.org/abs/2304.03442)) is super fun experiment where 25 virtual characters, each controlled by a LLM-powered agent, are living and interacting in a sandbox environment, inspired by The Sims. Generative agents create believable simulacra of human behavior for interactive applications. The design of generative agents combines LLM with memory, planning and reflection mechanisms to enable agents to behave conditioned on past experience, as well as to interact with other agents. * **Memory** stream: is a long-term memory module (external database) that records a comprehensive list of agents’ experience in natural language. * Each element is an _observation_ , an event directly provided by the agent. \\- Inter-agent communication can trigger new natural language statements. * **Retrieval** model: surfaces the context to inform the agent’s behavior, according to relevance, recency and importance.",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Generative Agents Simulation#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 989
  },
  {
    "page_content": "* **Retrieval** model: surfaces the context to inform the agent’s behavior, according to relevance, recency and importance. * Recency: recent events have higher scores * Importance: distinguish mundane from core memories. Ask LM directly. * Relevance: based on how related it is to the current situation / query. * **Reflection** mechanism: synthesizes memories into higher level inferences over time and guides the agent’s future behavior. They are _higher-level summaries of past events_ (<\\- note that this is a bit different from self-reflection above) * Prompt LM with 100 most recent observations and to generate 3 most salient high-level questions given a set of observations/statements. Then ask LM to answer those questions. * **Planning & Reacting**: translate the reflections and the environment information into actions * Planning is essentially in order to optimize believability at the moment vs in time.",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Generative Agents Simulation#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 918
  },
  {
    "page_content": "* **Planning & Reacting**: translate the reflections and the environment information into actions * Planning is essentially in order to optimize believability at the moment vs in time. * Prompt template: `{Intro of an agent X}. Here is X's plan today in broad strokes: 1)` * Relationships between agents and observations of one agent by another are all taken into consideration for planning and reacting. * Environment information is present in a tree structure. The generative agent architecture. (Image source: [Park et al. 2023](https://arxiv.org/abs/2304.03442)) This fun simulation results in emergent social behavior, such as information diffusion, relationship memory (e.g. two agents continuing the conversation topic) and coordination of social events (e.g. host a party and invite many others).",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Generative Agents Simulation#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 804
  },
  {
    "page_content": "## Proof-of-Concept Examples# [AutoGPT](https://github.com/Significant-Gravitas/Auto-GPT) has drawn a lot of attention into the possibility of setting up autonomous agents with LLM as the main controller. It has quite a lot of reliability issues given the natural language interface, but nevertheless a cool proof-of-concept demo. A lot of code in AutoGPT is about format parsing. Here is the system message used by AutoGPT, where `{{...}}` are user inputs: You are {{ai-name}}, {{user-provided AI bot description}}. Your decisions must always be made independently without seeking user assistance. Play to your strengths as an LLM and pursue simple strategies with no legal complications. GOALS: 1. {{user-provided goal 1}} 2. {{user-provided goal 2}} 3. ... 4. ... 5. ... Constraints: 1. ~4000 word limit for short term memory. Your short term memory is short, so immediately save important information to files.",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Proof-of-Concept Examples#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 914
  },
  {
    "page_content": "2. {{user-provided goal 2}} 3. ... 4. ... 5. ... Constraints: 1. ~4000 word limit for short term memory. Your short term memory is short, so immediately save important information to files. 2. If you are unsure how you previously did something or want to recall past events, thinking about similar events will help you remember. 3. No user assistance 4. Exclusively use the commands listed in double quotes e.g. \"command name\" 5. Use subprocesses for commands that will not terminate within a few minutes Commands: 1. Google Search: \"google\", args: \"input\": \"<search>\" 2. Browse Website: \"browse_website\", args: \"url\": \"<url>\", \"question\": \"<what_you_want_to_find_on_website>\" 3. Start GPT Agent: \"start_agent\", args: \"name\": \"<name>\", \"task\": \"<short_task_desc>\", \"prompt\": \"<prompt>\" 4. Message GPT Agent: \"message_agent\", args: \"key\": \"<key>\", \"message\": \"<message>\" 5. List GPT Agents: \"list_agents\", args: 6. Delete GPT Agent: \"delete_agent\", args: \"key\": \"<key>\"",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Proof-of-Concept Examples#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 968
  },
  {
    "page_content": "4. Message GPT Agent: \"message_agent\", args: \"key\": \"<key>\", \"message\": \"<message>\" 5. List GPT Agents: \"list_agents\", args: 6. Delete GPT Agent: \"delete_agent\", args: \"key\": \"<key>\" 7. Clone Repository: \"clone_repository\", args: \"repository_url\": \"<url>\", \"clone_path\": \"<directory>\" 8. Write to file: \"write_to_file\", args: \"file\": \"<file>\", \"text\": \"<text>\" 9. Read file: \"read_file\", args: \"file\": \"<file>\" 10. Append to file: \"append_to_file\", args: \"file\": \"<file>\", \"text\": \"<text>\" 11. Delete file: \"delete_file\", args: \"file\": \"<file>\" 12. Search Files: \"search_files\", args: \"directory\": \"<directory>\" 13. Analyze Code: \"analyze_code\", args: \"code\": \"<full_code_string>\" 14. Get Improved Code: \"improve_code\", args: \"suggestions\": \"<list_of_suggestions>\", \"code\": \"<full_code_string>\" 15. Write Tests: \"write_tests\", args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\" 16. Execute Python File: \"execute_python_file\", args: \"file\": \"<file>\"",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Proof-of-Concept Examples#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 966
  },
  {
    "page_content": "15. Write Tests: \"write_tests\", args: \"code\": \"<full_code_string>\", \"focus\": \"<list_of_focus_areas>\" 16. Execute Python File: \"execute_python_file\", args: \"file\": \"<file>\" 17. Generate Image: \"generate_image\", args: \"prompt\": \"<prompt>\" 18. Send Tweet: \"send_tweet\", args: \"text\": \"<text>\" 19. Do Nothing: \"do_nothing\", args: 20. Task Complete (Shutdown): \"task_complete\", args: \"reason\": \"<reason>\" Resources: 1. Internet access for searches and information gathering. 2. Long Term memory management. 3. GPT-3.5 powered Agents for delegation of simple tasks. 4. File output. Performance Evaluation: 1. Continuously review and analyze your actions to ensure you are performing to the best of your abilities. 2. Constructively self-criticize your big-picture behavior constantly. 3. Reflect on past decisions and strategies to refine your approach. 4. Every command has a cost, so be smart and efficient. Aim to complete tasks in the least number of steps.",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Proof-of-Concept Examples#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 955
  },
  {
    "page_content": "3. Reflect on past decisions and strategies to refine your approach. 4. Every command has a cost, so be smart and efficient. Aim to complete tasks in the least number of steps. You should only respond in JSON format as described below Response Format: \"thoughts\": { \"text\": \"thought\", \"reasoning\": \"reasoning\", \"plan\": \"- short bulleted\\n- list that conveys\\n- long-term plan\", \"criticism\": \"constructive self-criticism\", \"speak\": \"thoughts summary to say to user\" \"command\": { \"name\": \"command name\", \"args\": { \"arg name\": \"value\" Ensure the response can be parsed by Python json.loads copy [GPT-Engineer](https://github.com/AntonOsika/gpt-engineer) is another project to create a whole repository of code given a task specified in natural language. The GPT-Engineer is instructed to think over a list of smaller components to build and ask for user input to clarify questions as needed.",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Proof-of-Concept Examples#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 888
  },
  {
    "page_content": "Here are a sample conversation for task clarification sent to OpenAI ChatCompletion endpoint used by GPT-Engineer. The user inputs are wrapped in `{{user input text}}`. \"role\": \"system\", \"content\": \"You will read instructions and not carry them out, only seek to clarify them.\\nSpecifically you will first summarise a list of super short bullets of areas that need clarification.\\nThen you will pick one clarifying question, and wait for an answer from the user.\\n\" \"role\": \"user\", \"content\": \"We are writing {{a Super Mario game in python. MVC components split in separate files. Keyboard control.}}\\n\" \"role\": \"assistant\",",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Proof-of-Concept Examples#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 624
  },
  {
    "page_content": "\"role\": \"user\", \"content\": \"We are writing {{a Super Mario game in python. MVC components split in separate files. Keyboard control.}}\\n\" \"role\": \"assistant\", \"content\": \"Summary of areas that need clarification:\\n1. Specifics of the Super Mario game (e.g. level design, characters, gameplay mechanics)\\n2. Details about the MVC components (e.g. which components are in each file)\\n3. Keyboard control implementation (e.g. which keys to use, how to handle input)\\n\\nClarifying question:\\nCan you provide more details about the Super Mario game, such as level design, characters, and gameplay mechanics?\" \"role\": \"user\",",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Proof-of-Concept Examples#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 619
  },
  {
    "page_content": "\"role\": \"user\", \"content\": \"{{There are 10 levels in total. The main character is a plumber named Mario, who can walk and jump. It is a classical platform game just like Super Mario. The main character moves from left to right, trying to get to the destination, where there are many obstacles and attacks from enemies in the process.}}\\n\\nIs anything else unclear? If yes, only answer in the form:\\n{remaining unclear areas} remaining questions.\\n{Next question}\\nIf everything is sufficiently clear, only answer \\\"Nothing more to clarify.\\\".\" \"role\": \"assistant\", \"content\": \"Remaining unclear areas: 2 remaining questions.\\nCan you provide more information about how the MVC components are split into separate files?\" \"role\": \"user\", \"content\": \"{{Make your own assumptions and state them explicitly before starting}}\" copy Then after these clarification, the agent moved into the code writing mode with a different system message. System message:",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Proof-of-Concept Examples#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 949
  },
  {
    "page_content": "copy Then after these clarification, the agent moved into the code writing mode with a different system message. System message: You will get instructions for code to write. You will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code. Make sure that every detail of the architecture is, in the end, implemented as code. Think step by step and reason yourself to the right decisions to make sure we get it right. You will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose. Then you will output the content of each file including ALL code. Each file must strictly follow a markdown code block format, where the following tokens must be replaced such that FILENAME is the lowercase file name including the file extension, LANG is the markup code block language for the code’s language, and CODE is the code: FILENAME CODE copy",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Proof-of-Concept Examples#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 964
  },
  {
    "page_content": "FILENAME CODE copy You will start with the “entrypoint” file, then go to the ones that are imported by that file, and so on. Please note that the code should be fully functional. No placeholders. Follow a language and framework appropriate best practice file naming convention. Make sure that files contain all imports, types etc. Make sure that code in different files are compatible with each other. Ensure to implement all code, if you are unsure, write a plausible implementation. Include module dependency or package manager dependency definition file. Before you finish, double check that all parts of the architecture is present in the files.",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Proof-of-Concept Examples#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 649
  },
  {
    "page_content": "Useful to know: You almost always put different classes in different files. For Python, you always create an appropriate requirements.txt file. For NodeJS, you always create an appropriate package.json file. You always add a comment briefly describing the purpose of the function definition. You try to add comments explaining very complex bits of logic. You always follow the best practices for the requested languages in terms of describing the code written as a defined package/project. Python toolbelt preferences: * pytest * dataclasses Conversatin samples: \"role\": \"system\",",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Proof-of-Concept Examples#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 580
  },
  {
    "page_content": "\"content\": \"You will get instructions for code to write.\\nYou will write a very long answer",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Proof-of-Concept Examples#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 91
  },
  {
    "page_content": ". Make sure that every detail of the architecture is, in the end, implemented as code.\\nMake sure that every detail of the architecture is, in the end, implemented as code.\\n\\nThink step by step and reason yourself to the right decisions to make sure we get it right.\\nYou will first lay out the names of the core classes, functions, methods that will be necessary, as well as a quick comment on their purpose.\\n\\nThen you will output the content of each file including ALL code.\\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\\nFILENAME is the lowercase file name including the file extension,\\nLANG is the markup code block language for the code's language, and CODE is the code:\\n\\nFILENAME\\n```LANG\\nCODE\\n```\\n\\nYou will start with the \\\"entrypoint\\\" file, then go to the ones that are imported by that file, and so on.\\nPlease note that the code should be fully functional",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Proof-of-Concept Examples#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 946
  },
  {
    "page_content": ". No placeholders.\\n\\nFollow a language and framework appropriate best practice file naming convention.\\nMake sure that files contain all imports, types etc",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Proof-of-Concept Examples#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 156
  },
  {
    "page_content": ". Make sure that code in different files are compatible with each other.\\nEnsure to implement all code, if you are unsure, write a plausible implementation.\\nInclude module dependency or package manager dependency definition file.\\nBefore you finish, double check that all parts of the architecture is present in the files.\\n\\nUseful to know:\\nYou almost always put different classes in different files.\\nFor Python, you always create an appropriate requirements.txt file.\\nFor NodeJS, you always create an appropriate package.json file.\\nYou always add a comment briefly describing the purpose of the function definition.\\nYou try to add comments explaining very complex bits of logic.\\nYou always follow the best practices for the requested languages in terms of describing the code written as a defined\\npackage/project.\\n\\n\\nPython toolbelt preferences:\\n- pytest\\n- dataclasses\\n\"",
    "metadata": {
      "H1": "Case Studies#",
      "H2": "Proof-of-Concept Examples#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 885
  },
  {
    "page_content": "# … same conversation as earlier, ended with \"Make your own assumptions and state them explicitly before starting\". \"role\": \"assistant\", \"content\": \"Assumptions:\\n1. Model: The model will contain the game's data, such as level information, character states, and enemy positions.\\n2. View: The view will handle the game's visuals, including rendering the game objects, backgrounds, and updating the display.\\n3. Controller: The controller will manage user input, such as keyboard controls, and update the model accordingly.\\n\\nWith these assumptions in mind, is there any specific aspect of the keyboard control implementation you would like me to clarify?\" \"role\": \"user\",",
    "metadata": {
      "H1": "… same conversation as earlier, ended with \"Make your own assumptions and state them explicitly before starting\".",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 672
  },
  {
    "page_content": "\"content\": \"Please now remember the steps:\\n\\nThink step by step and reason yourself to the right decisions to make sure we get it right.\\nFirst lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.\\n\\nThen you will output the content of each file including ALL code.\\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\\nFILENAME is the lowercase file name including the file extension,\\nLANG is the markup code block language for the code's language, and CODE is the code:\\n\\nFILENAME\\n```LANG\\nCODE\\n```\\n\\nPlease note that the code should be fully functional. No placeholders.\\n\\nYou will start with the \\\"entrypoint\\\" file, then go to the ones that are imported by that file, and so on.\\nFollow a language and framework appropriate best practice file naming convention.\\nMake sure that files contain all imports, types etc",
    "metadata": {
      "H1": "… same conversation as earlier, ended with \"Make your own assumptions and state them explicitly before starting\".",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 963
  },
  {
    "page_content": ". The code should be fully functional. Make sure that code in different files are compatible with each other.\\nBefore you finish, double check that all parts of the architecture is present in the files.\\n\"",
    "metadata": {
      "H1": "… same conversation as earlier, ended with \"Make your own assumptions and state them explicitly before starting\".",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 205
  },
  {
    "page_content": "# Challenges# After going through key ideas and demos of building LLM-centered agents, I start to see a couple common limitations: * **Finite context length** : The restricted context capacity limits the inclusion of historical information, detailed instructions, API call context, and responses. The design of the system has to work with this limited communication bandwidth, while mechanisms like self-reflection to learn from past mistakes would benefit a lot from long or infinite context windows. Although vector stores and retrieval can provide access to a larger knowledge pool, their representation power is not as powerful as full attention. * **Challenges in long-term planning and task decomposition** : Planning over a lengthy history and effectively exploring the solution space remain challenging. LLMs struggle to adjust plans when faced with unexpected errors, making them less robust compared to humans who learn from trial and error.",
    "metadata": {
      "H1": "Challenges#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 951
  },
  {
    "page_content": "* **Reliability of natural language interface** : Current agent system relies on natural language as an interface between LLMs and external components such as memory and tools. However, the reliability of model outputs is questionable, as LLMs may make formatting errors and occasionally exhibit rebellious behavior (e.g. refuse to follow an instruction). Consequently, much of the agent demo code focuses on parsing model output.",
    "metadata": {
      "H1": "Challenges#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 430
  },
  {
    "page_content": "# Citation# Cited as: > Weng, Lilian. (Jun 2023). “LLM-powered Autonomous Agents”. Lil’Log. https://lilianweng.github.io/posts/2023-06-23-agent/. @article{weng2023agent, title = \"LLM-powered Autonomous Agents\", author = \"Weng, Lilian\", journal = \"lilianweng.github.io\", year = \"2023\", month = \"Jun\", url = \"https://lilianweng.github.io/posts/2023-06-23-agent/\" copy",
    "metadata": {
      "H1": "Citation#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 365
  },
  {
    "page_content": "# References# [1] Wei et al. [“Chain of thought prompting elicits reasoning in large language models.”](https://arxiv.org/abs/2201.11903) NeurIPS 2022 [2] Yao et al. [“Tree of Thoughts: Dliberate Problem Solving with Large Language Models.”](https://arxiv.org/abs/2305.10601) arXiv preprint arXiv:2305.10601 (2023). [3] Liu et al. [“Chain of Hindsight Aligns Language Models with Feedback “](https://arxiv.org/abs/2302.02676) arXiv preprint arXiv:2302.02676 (2023). [4] Liu et al. [“LLM+P: Empowering Large Language Models with Optimal Planning Proficiency”](https://arxiv.org/abs/2304.11477) arXiv preprint arXiv:2304.11477 (2023). [5] Yao et al. [“ReAct: Synergizing reasoning and acting in language models.”](https://arxiv.org/abs/2210.03629) ICLR 2023. [6] Google Blog. [“Announcing ScaNN: Efficient Vector Similarity Search”](https://ai.googleblog.com/2020/07/announcing-scann-efficient-vector.html) July 28, 2020. [7] <https://chat.openai.com/share/46ff149e-a4c7-4dd7-a800-fc4a642ea389>",
    "metadata": {
      "H1": "References#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 992
  },
  {
    "page_content": "[7] <https://chat.openai.com/share/46ff149e-a4c7-4dd7-a800-fc4a642ea389> [8] Shinn & Labash. [“Reflexion: an autonomous agent with dynamic memory and self-reflection”](https://arxiv.org/abs/2303.11366) arXiv preprint arXiv:2303.11366 (2023). [9] Laskin et al. [“In-context Reinforcement Learning with Algorithm Distillation”](https://arxiv.org/abs/2210.14215) ICLR 2023. [10] Karpas et al. [“MRKL Systems A modular, neuro-symbolic architecture that combines large language models, external knowledge sources and discrete reasoning.”](https://arxiv.org/abs/2205.00445) arXiv preprint arXiv:2205.00445 (2022). [11] Nakano et al. [“Webgpt: Browser-assisted question-answering with human feedback.”](https://arxiv.org/abs/2112.09332) arXiv preprint arXiv:2112.09332 (2021). [12] Parisi et al. [“TALM: Tool Augmented Language Models”](https://arxiv.org/abs/2205.12255)",
    "metadata": {
      "H1": "References#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 863
  },
  {
    "page_content": "[12] Parisi et al. [“TALM: Tool Augmented Language Models”](https://arxiv.org/abs/2205.12255) [13] Schick et al. [“Toolformer: Language Models Can Teach Themselves to Use Tools.”](https://arxiv.org/abs/2302.04761) arXiv preprint arXiv:2302.04761 (2023). [14] Weaviate Blog. [Why is Vector Search so fast?](https://weaviate.io/blog/why-is-vector-search-so-fast) Sep 13, 2022. [15] Li et al. [“API-Bank: A Benchmark for Tool-Augmented LLMs”](https://arxiv.org/abs/2304.08244) arXiv preprint arXiv:2304.08244 (2023). [16] Shen et al. [“HuggingGPT: Solving AI Tasks with ChatGPT and its Friends in HuggingFace”](https://arxiv.org/abs/2303.17580) arXiv preprint arXiv:2303.17580 (2023). [17] Bran et al. [“ChemCrow: Augmenting large-language models with chemistry tools.”](https://arxiv.org/abs/2304.05376) arXiv preprint arXiv:2304.05376 (2023).",
    "metadata": {
      "H1": "References#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 841
  },
  {
    "page_content": "[17] Bran et al. [“ChemCrow: Augmenting large-language models with chemistry tools.”](https://arxiv.org/abs/2304.05376) arXiv preprint arXiv:2304.05376 (2023). [18] Boiko et al. [“Emergent autonomous scientific research capabilities of large language models.”](https://arxiv.org/abs/2304.05332) arXiv preprint arXiv:2304.05332 (2023). [19] Joon Sung Park, et al. [“Generative Agents: Interactive Simulacra of Human Behavior.”](https://arxiv.org/abs/2304.03442) arXiv preprint arXiv:2304.03442 (2023). [20] AutoGPT. <https://github.com/Significant-Gravitas/Auto-GPT> [21] GPT-Engineer. <https://github.com/AntonOsika/gpt-engineer> * [Nlp](https://lilianweng.github.io/tags/nlp/) * [Language-Model](https://lilianweng.github.io/tags/language-model/) * [Agent](https://lilianweng.github.io/tags/agent/) * [Steerability](https://lilianweng.github.io/tags/steerability/) * [Prompting](https://lilianweng.github.io/tags/prompting/) [ «",
    "metadata": {
      "H1": "References#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 929
  },
  {
    "page_content": "* [Agent](https://lilianweng.github.io/tags/agent/) * [Steerability](https://lilianweng.github.io/tags/steerability/) * [Prompting](https://lilianweng.github.io/tags/prompting/) [ « Adversarial Attacks on LLMs ](https://lilianweng.github.io/posts/2023-10-25-adv-attack-llm/) [ » Prompt Engineering ](https://lilianweng.github.io/posts/2023-03-15-prompt-engineering/)",
    "metadata": {
      "H1": "References#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 366
  },
  {
    "page_content": "[ ](https://twitter.com/intent/tweet/?text=LLM%20Powered%20Autonomous%20Agents&url=https%3a%2f%2flilianweng.github.io%2fposts%2f2023-06-23-agent%2f&hashtags=nlp%2clanguage-model%2cagent%2csteerability%2cprompting) [ ](https://www.linkedin.com/shareArticle?mini=true&url=https%3a%2f%2flilianweng.github.io%2fposts%2f2023-06-23-agent%2f&title=LLM%20Powered%20Autonomous%20Agents&summary=LLM%20Powered%20Autonomous%20Agents&source=https%3a%2f%2flilianweng.github.io%2fposts%2f2023-06-23-agent%2f) [ ](https://reddit.com/submit?url=https%3a%2f%2flilianweng.github.io%2fposts%2f2023-06-23-agent%2f&title=LLM%20Powered%20Autonomous%20Agents) [ ](https://facebook.com/sharer/sharer.php?u=https%3a%2f%2flilianweng.github.io%2fposts%2f2023-06-23-agent%2f) [ ](https://api.whatsapp.com/send?text=LLM%20Powered%20Autonomous%20Agents%20-%20https%3a%2f%2flilianweng.github.io%2fposts%2f2023-06-23-agent%2f) [",
    "metadata": {
      "H1": "References#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 895
  },
  {
    "page_content": "[ ](https://api.whatsapp.com/send?text=LLM%20Powered%20Autonomous%20Agents%20-%20https%3a%2f%2flilianweng.github.io%2fposts%2f2023-06-23-agent%2f) [ ](https://telegram.me/share/url?text=LLM%20Powered%20Autonomous%20Agents&url=https%3a%2f%2flilianweng.github.io%2fposts%2f2023-06-23-agent%2f)",
    "metadata": {
      "H1": "References#",
      "source": "https://lilianweng.github.io/posts/2023-06-23-agent/",
      "title": "LLM Powered Autonomous Agents | Lil'Log",
      "description": "Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\nAgent System Overview\nIn a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:\n\nPlanning\n\nSubgoal and decomposition: The agent breaks down large tasks into smaller, manageable subgoals, enabling efficient handling of complex tasks.\nReflection and refinement: The agent can do self-criticism and self-reflection over past actions, learn from mistakes and refine them for future steps, thereby improving the quality of final results.\n\n\nMemory\n\nShort-term memory: I would consider all the in-context learning (See Prompt Engineering) as utilizing short-term memory of the model to learn.\nLong-term memory: This provides the agent with the capability to retain and recall (infinite) information over extended periods, often by leveraging an external vector store and fast retrieval.\n\n\nTool use\n\nThe agent learns to call external APIs for extra information that is missing from the model weights (often hard to change after pre-training), including current information, code execution capability, access to proprietary information sources and more.\n\n\n\n\n\t\n\tOverview of a LLM-powered autonomous agent system.\n\nComponent One: Planning\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 291
  },
  {
    "page_content": "# Large language model 56 languages * [Afrikaans](https://af.wikipedia.org/wiki/Groottaalmodel \"Groottaalmodel – Afrikaans\") * [العربية](https://ar.wikipedia.org/wiki/%D9%86%D9%85%D9%88%D8%B0%D8%AC_%D9%84%D8%BA%D9%88%D9%8A_%D9%83%D8%A8%D9%8A%D8%B1 \"نموذج لغوي كبير – Arabic\") * [Aragonés](https://an.wikipedia.org/wiki/Modelo_de_lenguache_gran \"Modelo de lenguache gran – Aragonese\") * [Azərbaycanca](https://az.wikipedia.org/wiki/B%C3%B6y%C3%BCk_dil_modeli \"Böyük dil modeli – Azerbaijani\") * [বাংলা](https://bn.wikipedia.org/wiki/%E0%A6%AC%E0%A7%83%E0%A6%B9%E0%A7%8E_%E0%A6%AD%E0%A6%BE%E0%A6%B7%E0%A6%BE%E0%A6%B0_%E0%A6%AE%E0%A6%A1%E0%A7%87%E0%A6%B2 \"বৃহৎ ভাষার মডেল – Bangla\") * [閩南語 / Bân-lâm-gú](https://zh-min-nan.wikipedia.org/wiki/T%C5%8Da-h%C3%AAng_g%C3%AD-gi%C3%A2n_b%C3%B4%CD%98-h%C3%AAng \"Tōa-hêng gí-giân bô͘-hêng – Minnan\") * [Boarisch](https://bar.wikipedia.org/wiki/Large_language_model \"Large language model – Bavarian\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 937
  },
  {
    "page_content": "* [Boarisch](https://bar.wikipedia.org/wiki/Large_language_model \"Large language model – Bavarian\") * [Bosanski](https://bs.wikipedia.org/wiki/Veliki_jezi%C4%8Dki_modeli \"Veliki jezički modeli – Bosnian\") * [Català](https://ca.wikipedia.org/wiki/Model_de_llenguatge_extens \"Model de llenguatge extens – Catalan\") * [Čeština](https://cs.wikipedia.org/wiki/Velk%C3%BD_jazykov%C3%BD_model \"Velký jazykový model – Czech\") * [Dansk](https://da.wikipedia.org/wiki/Stor_sprogmodel \"Stor sprogmodel – Danish\") * [Deutsch](https://de.wikipedia.org/wiki/Large_Language_Model \"Large Language Model – German\") * [Ελληνικά](https://el.wikipedia.org/wiki/%CE%9C%CE%B5%CE%B3%CE%AC%CE%BB%CE%BF_%CE%B3%CE%BB%CF%89%CF%83%CF%83%CE%B9%CE%BA%CF%8C_%CE%BC%CE%BF%CE%BD%CF%84%CE%AD%CE%BB%CE%BF \"Μεγάλο γλωσσικό μοντέλο – Greek\") * [Español](https://es.wikipedia.org/wiki/Modelo_extenso_de_lenguaje \"Modelo extenso de lenguaje – Spanish\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 913
  },
  {
    "page_content": "* [Español](https://es.wikipedia.org/wiki/Modelo_extenso_de_lenguaje \"Modelo extenso de lenguaje – Spanish\") * [Esperanto](https://eo.wikipedia.org/wiki/Granda_lingvomodelo \"Granda lingvomodelo – Esperanto\") * [Euskara](https://eu.wikipedia.org/wiki/Hizkuntza-eredu_handi \"Hizkuntza-eredu handi – Basque\") * [فارسی](https://fa.wikipedia.org/wiki/%D9%85%D8%AF%D9%84_%D8%B2%D8%A8%D8%A7%D9%86%DB%8C_%D8%A8%D8%B2%D8%B1%DA%AF \"مدل زبانی بزرگ – Persian\") * [Français](https://fr.wikipedia.org/wiki/Grand_mod%C3%A8le_de_langage \"Grand modèle de langage – French\") * [Gaeilge](https://ga.wikipedia.org/wiki/Samhail_teanga_mh%C3%B3r \"Samhail teanga mhór – Irish\") * [Galego](https://gl.wikipedia.org/wiki/Modelo_de_linguaxe_de_grande_escala \"Modelo de linguaxe de grande escala – Galician\") * [한국어](https://ko.wikipedia.org/wiki/%EB%8C%80%ED%98%95_%EC%96%B8%EC%96%B4_%EB%AA%A8%EB%8D%B8 \"대형 언어 모델 – Korean\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 897
  },
  {
    "page_content": "* [한국어](https://ko.wikipedia.org/wiki/%EB%8C%80%ED%98%95_%EC%96%B8%EC%96%B4_%EB%AA%A8%EB%8D%B8 \"대형 언어 모델 – Korean\") * [हिन्दी](https://hi.wikipedia.org/wiki/%E0%A4%AC%E0%A4%A1%E0%A4%BC%E0%A5%87_%E0%A4%AD%E0%A4%BE%E0%A4%B7%E0%A4%BE_%E0%A4%AE%E0%A5%89%E0%A4%A1%E0%A4%B2 \"बड़े भाषा मॉडल – Hindi\") * [Ido](https://io.wikipedia.org/wiki/Larja_linguomodelo \"Larja linguomodelo – Ido\") * [Bahasa Indonesia](https://id.wikipedia.org/wiki/Model_bahasa_besar \"Model bahasa besar – Indonesian\") * [IsiZulu](https://zu.wikipedia.org/wiki/UNongo_lolimi_olukhulu \"UNongo lolimi olukhulu – Zulu\") * [Italiano](https://it.wikipedia.org/wiki/Modello_linguistico_di_grandi_dimensioni \"Modello linguistico di grandi dimensioni – Italian\") * [עברית](https://he.wikipedia.org/wiki/%D7%9E%D7%95%D7%93%D7%9C_%D7%A9%D7%A4%D7%94_%D7%92%D7%93%D7%95%D7%9C \"מודל שפה גדול – Hebrew\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 854
  },
  {
    "page_content": "* [עברית](https://he.wikipedia.org/wiki/%D7%9E%D7%95%D7%93%D7%9C_%D7%A9%D7%A4%D7%94_%D7%92%D7%93%D7%95%D7%9C \"מודל שפה גדול – Hebrew\") * [Қазақша](https://kk.wikipedia.org/wiki/%D2%AE%D0%BB%D0%BA%D0%B5%D0%BD_%D1%82%D1%96%D0%BB%D0%B4%D1%96%D0%BA_%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C \"Үлкен тілдік модель – Kazakh\") * [Magyar](https://hu.wikipedia.org/wiki/Nagy_nyelvi_modell \"Nagy nyelvi modell – Hungarian\") * [Македонски](https://mk.wikipedia.org/wiki/%D0%93%D0%BE%D0%BB%D0%B5%D0%BC_%D1%98%D0%B0%D0%B7%D0%B8%D1%87%D0%B5%D0%BD_%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB \"Голем јазичен модел – Macedonian\") * [Монгол](https://mn.wikipedia.org/wiki/%D0%98%D1%85_%D0%A5%D1%8D%D0%BB%D0%BD%D0%B8%D0%B9_%D0%97%D0%B0%D0%B3%D0%B2%D0%B0%D1%80_\\(%D1%85%D0%B8%D0%B9%D0%BC%D1%8D%D0%BB_%D0%BE%D1%8E%D1%83%D0%BD\\) \"Их Хэлний Загвар \\(хиймэл оюун\\) – Mongolian\") * [Nederlands](https://nl.wikipedia.org/wiki/Groot_taalmodel \"Groot taalmodel – Dutch\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 923
  },
  {
    "page_content": "* [Nederlands](https://nl.wikipedia.org/wiki/Groot_taalmodel \"Groot taalmodel – Dutch\") * [日本語](https://ja.wikipedia.org/wiki/%E5%A4%A7%E8%A6%8F%E6%A8%A1%E8%A8%80%E8%AA%9E%E3%83%A2%E3%83%87%E3%83%AB \"大規模言語モデル – Japanese\") * [Norsk nynorsk](https://nn.wikipedia.org/wiki/Stor_spr%C3%A5kmodell \"Stor språkmodell – Norwegian Nynorsk\") * [Polski](https://pl.wikipedia.org/wiki/Du%C5%BCy_model_j%C4%99zykowy \"Duży model językowy – Polish\") * [Português](https://pt.wikipedia.org/wiki/Modelos_de_linguagem_de_grande_escala \"Modelos de linguagem de grande escala – Portuguese\") * [Qaraqalpaqsha](https://kaa.wikipedia.org/wiki/%C3%9Alken_til_modeli \"Úlken til modeli – Kara-Kalpak\") * [Română](https://ro.wikipedia.org/wiki/Model_lingvistic_mare \"Model lingvistic mare – Romanian\") * [Runa Simi](https://qu.wikipedia.org/wiki/Hatun_simi_wallpama \"Hatun simi wallpama – Quechua\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 871
  },
  {
    "page_content": "* [Română](https://ro.wikipedia.org/wiki/Model_lingvistic_mare \"Model lingvistic mare – Romanian\") * [Runa Simi](https://qu.wikipedia.org/wiki/Hatun_simi_wallpama \"Hatun simi wallpama – Quechua\") * [Русский](https://ru.wikipedia.org/wiki/%D0%91%D0%BE%D0%BB%D1%8C%D1%88%D0%B0%D1%8F_%D1%8F%D0%B7%D1%8B%D0%BA%D0%BE%D0%B2%D0%B0%D1%8F_%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C \"Большая языковая модель – Russian\") * [Shqip](https://sq.wikipedia.org/wiki/Modeli_i_madh_gjuh%C3%ABsor \"Modeli i madh gjuhësor – Albanian\") * [Simple English](https://simple.wikipedia.org/wiki/Large_language_model \"Large language model – Simple English\") * [Slovenščina](https://sl.wikipedia.org/wiki/Veliki_jezikovni_model \"Veliki jezikovni model – Slovenian\") * [کوردی](https://ckb.wikipedia.org/wiki/%D9%85%DB%86%D8%AF%DB%8E%D9%84%DB%8C_%D8%B2%D9%85%D8%A7%D9%86%DB%8C%DB%8C_%DA%AF%DB%95%D9%88%D8%B1%DB%95 \"مۆدێلی زمانیی گەورە – Central Kurdish\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 917
  },
  {
    "page_content": "* [کوردی](https://ckb.wikipedia.org/wiki/%D9%85%DB%86%D8%AF%DB%8E%D9%84%DB%8C_%D8%B2%D9%85%D8%A7%D9%86%DB%8C%DB%8C_%DA%AF%DB%95%D9%88%D8%B1%DB%95 \"مۆدێلی زمانیی گەورە – Central Kurdish\") * [Српски / srpski](https://sr.wikipedia.org/wiki/Veliki_jezi%C4%8Dki_modeli \"Veliki jezički modeli – Serbian\") * [Suomi](https://fi.wikipedia.org/wiki/Suuri_kielimalli \"Suuri kielimalli – Finnish\") * [Tagalog](https://tl.wikipedia.org/wiki/Malaking_modelong_pangwika \"Malaking modelong pangwika – Tagalog\") * [తెలుగు](https://te.wikipedia.org/wiki/%E0%B0%AA%E0%B1%86%E0%B0%A6%E0%B1%8D%E0%B0%A6_%E0%B0%AD%E0%B0%BE%E0%B0%B7%E0%B0%BE_%E0%B0%A8%E0%B0%AE%E0%B1%82%E0%B0%A8%E0%B0%BE%E0%B0%B2%E0%B1%81 \"పెద్ద భాషా నమూనాలు – Telugu\") * [ไทย](https://th.wikipedia.org/wiki/%E0%B9%81%E0%B8%9A%E0%B8%9A%E0%B8%88%E0%B8%B3%E0%B8%A5%E0%B8%AD%E0%B8%87%E0%B8%A0%E0%B8%B2%E0%B8%A9%E0%B8%B2%E0%B8%82%E0%B8%99%E0%B8%B2%E0%B8%94%E0%B9%83%E0%B8%AB%E0%B8%8D%E0%B9%88 \"แบบจำลองภาษาขนาดใหญ่ – Thai\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 963
  },
  {
    "page_content": "* [Türkçe](https://tr.wikipedia.org/wiki/B%C3%BCy%C3%BCk_dil_modeli \"Büyük dil modeli – Turkish\") * [Українська](https://uk.wikipedia.org/wiki/%D0%92%D0%B5%D0%BB%D0%B8%D0%BA%D0%B0_%D0%BC%D0%BE%D0%B2%D0%BD%D0%B0_%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C \"Велика мовна модель – Ukrainian\") * [ئۇيغۇرچە / Uyghurche](https://ug.wikipedia.org/wiki/%DA%86%D9%88%DA%AD_%D8%AA%D9%89%D9%84_%D9%85%D9%88%D8%AF%D9%89%D9%84%D9%89 \"چوڭ تىل مودىلى – Uyghur\") * [Tiếng Việt](https://vi.wikipedia.org/wiki/M%C3%B4_h%C3%ACnh_ng%C3%B4n_ng%E1%BB%AF_l%E1%BB%9Bn \"Mô hình ngôn ngữ lớn – Vietnamese\") * [文言](https://zh-classical.wikipedia.org/wiki/%E5%A4%A7%E8%AA%9E%E8%A8%80%E6%A8%A1%E5%9E%8B \"大語言模型 – Literary Chinese\") * [粵語](https://zh-yue.wikipedia.org/wiki/%E5%A4%A7%E5%9E%8B%E8%AA%9E%E8%A8%80%E6%A8%A1%E5%9E%8B \"大型語言模型 – Cantonese\") * [中文](https://zh.wikipedia.org/wiki/%E5%A4%A7%E5%9E%8B%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B \"大型语言模型 – Chinese\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 924
  },
  {
    "page_content": "* [中文](https://zh.wikipedia.org/wiki/%E5%A4%A7%E5%9E%8B%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B \"大型语言模型 – Chinese\") [Edit links](https://www.wikidata.org/wiki/Special:EntityPage/Q115305900#sitelinks-wikipedia \"Edit interlanguage links\") * [Article](/wiki/Large_language_model \"View the content page \\[alt-shift-c\\]\") * [Talk](/wiki/Talk:Large_language_model \"Discuss improvements to the content page \\[alt-shift-t\\]\") English * [Read](/wiki/Large_language_model) * [Edit](/w/index.php?title=Large_language_model&action=edit \"Edit this page \\[alt-shift-e\\]\") * [View history](/w/index.php?title=Large_language_model&action=history \"Past revisions of this page \\[alt-shift-h\\]\") Tools Tools move to sidebar hide Actions * [Read](/wiki/Large_language_model) * [Edit](/w/index.php?title=Large_language_model&action=edit \"Edit this page \\[alt-shift-e\\]\") * [View history](/w/index.php?title=Large_language_model&action=history) General",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 926
  },
  {
    "page_content": "* [Edit](/w/index.php?title=Large_language_model&action=edit \"Edit this page \\[alt-shift-e\\]\") * [View history](/w/index.php?title=Large_language_model&action=history) General * [What links here](/wiki/Special:WhatLinksHere/Large_language_model \"List of all English Wikipedia pages containing links to this page \\[alt-shift-j\\]\") * [Related changes](/wiki/Special:RecentChangesLinked/Large_language_model \"Recent changes in pages linked from this page \\[alt-shift-k\\]\") * [Upload file](//en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard \"Upload files \\[alt-shift-u\\]\") * [Permanent link](https://en.wikipedia.org/w/index.php?title=Large_language_model&oldid=1295827202 \"Permanent link to this revision of this page\") * [Page information](/w/index.php?title=Large_language_model&action=info \"More information about this page\") * [Cite this page](/w/index.php?title=Special:CiteThisPage&page=Large_language_model&id=1295827202&wpFormIdentifier=titleform \"Information on how to cite this page\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 993
  },
  {
    "page_content": "* [Cite this page](/w/index.php?title=Special:CiteThisPage&page=Large_language_model&id=1295827202&wpFormIdentifier=titleform \"Information on how to cite this page\") * [Get shortened URL](/w/index.php?title=Special:UrlShortener&url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FLarge_language_model) * [Download QR code](/w/index.php?title=Special:QrCode&url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FLarge_language_model) * [Edit interlanguage links](https://www.wikidata.org/wiki/Special:EntityPage/Q115305900#sitelinks-wikipedia \"Edit interlanguage links\") * Expand all Print/export * [Download as PDF](/w/index.php?title=Special:DownloadAsPdf&page=Large_language_model&action=show-download-screen \"Download this page as a PDF file\") * [Printable version](/w/index.php?title=Large_language_model&printable=yes \"Printable version of this page \\[alt-shift-p\\]\") In other projects * [Wikimedia Commons](https://commons.wikimedia.org/wiki/Category:Large_language_models)",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 961
  },
  {
    "page_content": "In other projects * [Wikimedia Commons](https://commons.wikimedia.org/wiki/Category:Large_language_models) * [Wikidata item](https://www.wikidata.org/wiki/Special:EntityPage/Q115305900 \"Structured data on this page hosted by Wikidata \\[alt-shift-g\\]\") Appearance move to sidebar hide Text * Small Standard Large This page always uses small font size Width * Standard Wide The content is as wide as possible for your browser window. Color (beta) * Automatic Light Dark This page is always in light mode. From Wikipedia, the free encyclopedia Type of machine learning model Not to be confused with [Logic learning machine](/wiki/Logic_learning_machine \"Logic learning machine\"). \"LLM\" redirects here. For other uses, see [LLM (disambiguation)](/wiki/LLM_\\(disambiguation\\) \"LLM \\(disambiguation\\)\").",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 797
  },
  {
    "page_content": "\"LLM\" redirects here. For other uses, see [LLM (disambiguation)](/wiki/LLM_\\(disambiguation\\) \"LLM \\(disambiguation\\)\"). | This article **may be too technical for most readers to understand**. Please [help improve it](https://en.wikipedia.org/w/index.php?title=Large_language_model&action=edit) to [make it understandable to non-experts](/wiki/Wikipedia:Make_technical_articles_understandable \"Wikipedia:Make technical articles understandable\"), without removing the technical details. _( May 2025)__([Learn how and when to remove this message](/wiki/Help:Maintenance_template_removal \"Help:Maintenance template removal\"))_ Part of a series on [Machine learning](/wiki/Machine_learning \"Machine learning\") and [data mining](/wiki/Data_mining \"Data mining\") showParadigms * [Supervised learning](/wiki/Supervised_learning \"Supervised learning\") * [Unsupervised learning](/wiki/Unsupervised_learning \"Unsupervised learning\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 922
  },
  {
    "page_content": "showParadigms * [Supervised learning](/wiki/Supervised_learning \"Supervised learning\") * [Unsupervised learning](/wiki/Unsupervised_learning \"Unsupervised learning\") * [Semi-supervised learning](/wiki/Semi-supervised_learning \"Semi-supervised learning\") * [Self-supervised learning](/wiki/Self-supervised_learning \"Self-supervised learning\") * [Reinforcement learning](/wiki/Reinforcement_learning \"Reinforcement learning\") * [Meta-learning](/wiki/Meta-learning_\\(computer_science\\) \"Meta-learning \\(computer science\\)\") * [Online learning](/wiki/Online_machine_learning \"Online machine learning\") * [Batch learning](/wiki/Batch_learning \"Batch learning\") * [Curriculum learning](/wiki/Curriculum_learning \"Curriculum learning\") * [Rule-based learning](/wiki/Rule-based_machine_learning \"Rule-based machine learning\") * [Neuro-symbolic AI](/wiki/Neuro-symbolic_AI \"Neuro-symbolic AI\") * [Neuromorphic engineering](/wiki/Neuromorphic_engineering \"Neuromorphic engineering\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 972
  },
  {
    "page_content": "* [Neuro-symbolic AI](/wiki/Neuro-symbolic_AI \"Neuro-symbolic AI\") * [Neuromorphic engineering](/wiki/Neuromorphic_engineering \"Neuromorphic engineering\") * [Quantum machine learning](/wiki/Quantum_machine_learning \"Quantum machine learning\") showProblems * [Classification](/wiki/Statistical_classification \"Statistical classification\") * [Generative modeling](/wiki/Generative_model \"Generative model\") * [Regression](/wiki/Regression_analysis \"Regression analysis\") * [Clustering](/wiki/Cluster_analysis \"Cluster analysis\") * [Dimensionality reduction](/wiki/Dimensionality_reduction \"Dimensionality reduction\") * [Density estimation](/wiki/Density_estimation \"Density estimation\") * [Anomaly detection](/wiki/Anomaly_detection \"Anomaly detection\") * [Data cleaning](/wiki/Data_cleaning \"Data cleaning\") * [AutoML](/wiki/Automated_machine_learning \"Automated machine learning\") * [Association rules](/wiki/Association_rule_learning \"Association rule learning\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 963
  },
  {
    "page_content": "* [AutoML](/wiki/Automated_machine_learning \"Automated machine learning\") * [Association rules](/wiki/Association_rule_learning \"Association rule learning\") * [Semantic analysis](/wiki/Semantic_analysis_\\(machine_learning\\) \"Semantic analysis \\(machine learning\\)\") * [Structured prediction](/wiki/Structured_prediction \"Structured prediction\") * [Feature engineering](/wiki/Feature_engineering \"Feature engineering\") * [Feature learning](/wiki/Feature_learning \"Feature learning\") * [Learning to rank](/wiki/Learning_to_rank \"Learning to rank\") * [Grammar induction](/wiki/Grammar_induction \"Grammar induction\") * [Ontology learning](/wiki/Ontology_learning \"Ontology learning\") * [Multimodal learning](/wiki/Multimodal_learning \"Multimodal learning\") show[Supervised learning](/wiki/Supervised_learning \"Supervised learning\") (**[classification](/wiki/Statistical_classification \"Statistical classification\")** • **[regression](/wiki/Regression_analysis \"Regression analysis\")**)",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 981
  },
  {
    "page_content": "(**[classification](/wiki/Statistical_classification \"Statistical classification\")** • **[regression](/wiki/Regression_analysis \"Regression analysis\")**) * [Apprenticeship learning](/wiki/Apprenticeship_learning \"Apprenticeship learning\") * [Decision trees](/wiki/Decision_tree_learning \"Decision tree learning\") * [Ensembles](/wiki/Ensemble_learning \"Ensemble learning\") * [Bagging](/wiki/Bootstrap_aggregating \"Bootstrap aggregating\") * [Boosting](/wiki/Boosting_\\(machine_learning\\) \"Boosting \\(machine learning\\)\") * [Random forest](/wiki/Random_forest \"Random forest\") * [_k_ -NN](/wiki/K-nearest_neighbors_algorithm \"K-nearest neighbors algorithm\") * [Linear regression](/wiki/Linear_regression \"Linear regression\") * [Naive Bayes](/wiki/Naive_Bayes_classifier \"Naive Bayes classifier\") * [Artificial neural networks](/wiki/Artificial_neural_network \"Artificial neural network\") * [Logistic regression](/wiki/Logistic_regression \"Logistic regression\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 957
  },
  {
    "page_content": "* [Artificial neural networks](/wiki/Artificial_neural_network \"Artificial neural network\") * [Logistic regression](/wiki/Logistic_regression \"Logistic regression\") * [Perceptron](/wiki/Perceptron \"Perceptron\") * [Relevance vector machine (RVM)](/wiki/Relevance_vector_machine \"Relevance vector machine\") * [Support vector machine (SVM)](/wiki/Support_vector_machine \"Support vector machine\") show[Clustering](/wiki/Cluster_analysis \"Cluster analysis\") * [BIRCH](/wiki/BIRCH \"BIRCH\") * [CURE](/wiki/CURE_algorithm \"CURE algorithm\") * [Hierarchical](/wiki/Hierarchical_clustering \"Hierarchical clustering\") * [_k_ -means](/wiki/K-means_clustering \"K-means clustering\") * [Fuzzy](/wiki/Fuzzy_clustering \"Fuzzy clustering\") * [Expectation–maximization (EM)](/wiki/Expectation%E2%80%93maximization_algorithm \"Expectation–maximization algorithm\") [DBSCAN](/wiki/DBSCAN \"DBSCAN\") * [OPTICS](/wiki/OPTICS_algorithm \"OPTICS algorithm\") * [Mean shift](/wiki/Mean_shift \"Mean shift\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 973
  },
  {
    "page_content": "[DBSCAN](/wiki/DBSCAN \"DBSCAN\") * [OPTICS](/wiki/OPTICS_algorithm \"OPTICS algorithm\") * [Mean shift](/wiki/Mean_shift \"Mean shift\") show[Dimensionality reduction](/wiki/Dimensionality_reduction \"Dimensionality reduction\") * [Factor analysis](/wiki/Factor_analysis \"Factor analysis\") * [CCA](/wiki/Canonical_correlation \"Canonical correlation\") * [ICA](/wiki/Independent_component_analysis \"Independent component analysis\") * [LDA](/wiki/Linear_discriminant_analysis \"Linear discriminant analysis\") * [NMF](/wiki/Non-negative_matrix_factorization \"Non-negative matrix factorization\") * [PCA](/wiki/Principal_component_analysis \"Principal component analysis\") * [PGD](/wiki/Proper_generalized_decomposition \"Proper generalized decomposition\") * [t-SNE](/wiki/T-distributed_stochastic_neighbor_embedding \"T-distributed stochastic neighbor embedding\") * [SDL](/wiki/Sparse_dictionary_learning \"Sparse dictionary learning\") show[Structured prediction](/wiki/Structured_prediction \"Structured prediction\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 999
  },
  {
    "page_content": "* [SDL](/wiki/Sparse_dictionary_learning \"Sparse dictionary learning\") show[Structured prediction](/wiki/Structured_prediction \"Structured prediction\") * [Graphical models](/wiki/Graphical_model \"Graphical model\") * [Bayes net](/wiki/Bayesian_network \"Bayesian network\") * [Conditional random field](/wiki/Conditional_random_field \"Conditional random field\") * [Hidden Markov](/wiki/Hidden_Markov_model \"Hidden Markov model\") show[Anomaly detection](/wiki/Anomaly_detection \"Anomaly detection\") * [RANSAC](/wiki/Random_sample_consensus \"Random sample consensus\") * [_k_ -NN](/wiki/K-nearest_neighbors_algorithm \"K-nearest neighbors algorithm\") * [Local outlier factor](/wiki/Local_outlier_factor \"Local outlier factor\") * [Isolation forest](/wiki/Isolation_forest \"Isolation forest\") show[Neural networks](/wiki/Neural_network_\\(machine_learning\\) \"Neural network \\(machine learning\\)\") * [Autoencoder](/wiki/Autoencoder \"Autoencoder\") * [Deep learning](/wiki/Deep_learning \"Deep learning\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 990
  },
  {
    "page_content": "* [Autoencoder](/wiki/Autoencoder \"Autoencoder\") * [Deep learning](/wiki/Deep_learning \"Deep learning\") * [Feedforward neural network](/wiki/Feedforward_neural_network \"Feedforward neural network\") * [Recurrent neural network](/wiki/Recurrent_neural_network \"Recurrent neural network\") * [LSTM](/wiki/Long_short-term_memory \"Long short-term memory\") * [GRU](/wiki/Gated_recurrent_unit \"Gated recurrent unit\") * [ESN](/wiki/Echo_state_network \"Echo state network\") * [reservoir computing](/wiki/Reservoir_computing \"Reservoir computing\") * [Boltzmann machine](/wiki/Boltzmann_machine \"Boltzmann machine\") * [Restricted](/wiki/Restricted_Boltzmann_machine \"Restricted Boltzmann machine\") * [GAN](/wiki/Generative_adversarial_network \"Generative adversarial network\") * [Diffusion model](/wiki/Diffusion_model \"Diffusion model\") * [SOM](/wiki/Self-organizing_map \"Self-organizing map\") * [Convolutional neural network](/wiki/Convolutional_neural_network \"Convolutional neural network\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 982
  },
  {
    "page_content": "* [SOM](/wiki/Self-organizing_map \"Self-organizing map\") * [Convolutional neural network](/wiki/Convolutional_neural_network \"Convolutional neural network\") * [U-Net](/wiki/U-Net \"U-Net\") * [LeNet](/wiki/LeNet \"LeNet\") * [AlexNet](/wiki/AlexNet \"AlexNet\") * [DeepDream](/wiki/DeepDream \"DeepDream\") * [Neural radiance field](/wiki/Neural_radiance_field \"Neural radiance field\") * [Transformer](/wiki/Transformer_\\(machine_learning_model\\) \"Transformer \\(machine learning model\\)\") * [Vision](/wiki/Vision_transformer \"Vision transformer\") * [Mamba](/wiki/Mamba_\\(deep_learning_architecture\\) \"Mamba \\(deep learning architecture\\)\") * [Spiking neural network](/wiki/Spiking_neural_network \"Spiking neural network\") * [Memtransistor](/wiki/Memtransistor \"Memtransistor\") * [Electrochemical RAM](/wiki/Electrochemical_RAM \"Electrochemical RAM\") (ECRAM) show[Reinforcement learning](/wiki/Reinforcement_learning \"Reinforcement learning\") * [Q-learning](/wiki/Q-learning \"Q-learning\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 979
  },
  {
    "page_content": "show[Reinforcement learning](/wiki/Reinforcement_learning \"Reinforcement learning\") * [Q-learning](/wiki/Q-learning \"Q-learning\") * [SARSA](/wiki/State%E2%80%93action%E2%80%93reward%E2%80%93state%E2%80%93action \"State–action–reward–state–action\") * [Temporal difference (TD)](/wiki/Temporal_difference_learning \"Temporal difference learning\") * [Multi-agent](/wiki/Multi-agent_reinforcement_learning \"Multi-agent reinforcement learning\") * [Self-play](/wiki/Self-play_\\(reinforcement_learning_technique\\) \"Self-play \\(reinforcement learning technique\\)\") showLearning with humans * [Active learning](/wiki/Active_learning_\\(machine_learning\\) \"Active learning \\(machine learning\\)\") * [Crowdsourcing](/wiki/Crowdsourcing \"Crowdsourcing\") * [Human-in-the-loop](/wiki/Human-in-the-loop \"Human-in-the-loop\") * [Mechanistic interpretability](/wiki/Mechanistic_interpretability \"Mechanistic interpretability\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 904
  },
  {
    "page_content": "* [Human-in-the-loop](/wiki/Human-in-the-loop \"Human-in-the-loop\") * [Mechanistic interpretability](/wiki/Mechanistic_interpretability \"Mechanistic interpretability\") * [RLHF](/wiki/Reinforcement_learning_from_human_feedback \"Reinforcement learning from human feedback\") showModel diagnostics * [Coefficient of determination](/wiki/Coefficient_of_determination \"Coefficient of determination\") * [Confusion matrix](/wiki/Confusion_matrix \"Confusion matrix\") * [Learning curve](/wiki/Learning_curve_\\(machine_learning\\) \"Learning curve \\(machine learning\\)\") * [ROC curve](/wiki/Receiver_operating_characteristic \"Receiver operating characteristic\") showMathematical foundations * [Kernel machines](/wiki/Kernel_machines \"Kernel machines\") * [Bias–variance tradeoff](/wiki/Bias%E2%80%93variance_tradeoff \"Bias–variance tradeoff\") * [Computational learning theory](/wiki/Computational_learning_theory \"Computational learning theory\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 930
  },
  {
    "page_content": "* [Bias–variance tradeoff](/wiki/Bias%E2%80%93variance_tradeoff \"Bias–variance tradeoff\") * [Computational learning theory](/wiki/Computational_learning_theory \"Computational learning theory\") * [Empirical risk minimization](/wiki/Empirical_risk_minimization \"Empirical risk minimization\") * [Occam learning](/wiki/Occam_learning \"Occam learning\") * [PAC learning](/wiki/Probably_approximately_correct_learning \"Probably approximately correct learning\") * [Statistical learning](/wiki/Statistical_learning_theory \"Statistical learning theory\") * [VC theory](/wiki/Vapnik%E2%80%93Chervonenkis_theory \"Vapnik–Chervonenkis theory\") * [Topological deep learning](/wiki/Topological_deep_learning \"Topological deep learning\") showJournals and conferences * [ECML PKDD](/wiki/ECML_PKDD \"ECML PKDD\") * [NeurIPS](/wiki/Conference_on_Neural_Information_Processing_Systems \"Conference on Neural Information Processing Systems\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 916
  },
  {
    "page_content": "showJournals and conferences * [ECML PKDD](/wiki/ECML_PKDD \"ECML PKDD\") * [NeurIPS](/wiki/Conference_on_Neural_Information_Processing_Systems \"Conference on Neural Information Processing Systems\") * [ICML](/wiki/International_Conference_on_Machine_Learning \"International Conference on Machine Learning\") * [ICLR](/wiki/International_Conference_on_Learning_Representations \"International Conference on Learning Representations\") * [IJCAI](/wiki/International_Joint_Conference_on_Artificial_Intelligence \"International Joint Conference on Artificial Intelligence\") * [ML](/wiki/Machine_Learning_\\(journal\\) \"Machine Learning \\(journal\\)\") * [JMLR](/wiki/Journal_of_Machine_Learning_Research \"Journal of Machine Learning Research\") showRelated articles * [Glossary of artificial intelligence](/wiki/Glossary_of_artificial_intelligence \"Glossary of artificial intelligence\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 871
  },
  {
    "page_content": "showRelated articles * [Glossary of artificial intelligence](/wiki/Glossary_of_artificial_intelligence \"Glossary of artificial intelligence\") * [List of datasets for machine-learning research](/wiki/List_of_datasets_for_machine-learning_research \"List of datasets for machine-learning research\") * [List of datasets in computer vision and image processing](/wiki/List_of_datasets_in_computer_vision_and_image_processing \"List of datasets in computer vision and image processing\") * [Outline of machine learning](/wiki/Outline_of_machine_learning \"Outline of machine learning\") * [v](/wiki/Template:Machine_learning \"Template:Machine learning\") * [t](/wiki/Template_talk:Machine_learning \"Template talk:Machine learning\") * [e](/wiki/Special:EditPage/Template:Machine_learning \"Special:EditPage/Template:Machine learning\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 821
  },
  {
    "page_content": "* [t](/wiki/Template_talk:Machine_learning \"Template talk:Machine learning\") * [e](/wiki/Special:EditPage/Template:Machine_learning \"Special:EditPage/Template:Machine learning\") A **large language model** (**LLM**) is a [language model](/wiki/Language_model \"Language model\") trained with [self-supervised](/wiki/Self-supervised_learning \"Self-supervised learning\") [machine learning](/wiki/Machine_learning \"Machine learning\") on a vast amount of text, designed for [natural language processing](/wiki/Natural_language_processing \"Natural language processing\") tasks, especially [language generation](/wiki/Natural_language_generation \"Natural language generation\").",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 667
  },
  {
    "page_content": "The largest and most capable LLMs are [generative pretrained transformers](/wiki/Generative_pre-trained_transformer \"Generative pre-trained transformer\") (GPTs), which are largely used in [generative](/wiki/Generative_artificial_intelligence \"Generative artificial intelligence\") [chatbots](/wiki/Chatbot \"Chatbot\") such as [ChatGPT](/wiki/ChatGPT \"ChatGPT\") or [Gemini](/wiki/Gemini_\\(chatbot\\) \"Gemini \\(chatbot\\)\")",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 417
  },
  {
    "page_content": ". LLMs can be [fine-tuned](/wiki/Fine-tuning_\\(deep_learning\\) \"Fine-tuning \\(deep learning\\)\") for specific tasks or guided by [prompt engineering](/wiki/Prompt_engineering \"Prompt engineering\").[1] These models acquire [predictive power](/wiki/Predictive_learning \"Predictive learning\") regarding [syntax](/wiki/Syntax \"Syntax\"), [semantics](/wiki/Semantics \"Semantics\"), and [ontologies](/wiki/Ontology_\\(information_science\\) \"Ontology \\(information science\\)\")[2] inherent in human [language corpora](/wiki/Text_corpus \"Text corpus\"), but they also inherit inaccuracies and [biases](/wiki/Algorithmic_bias \"Algorithmic bias\") present in the [data](/wiki/Training,_validation,_and_test_data_sets \"Training, validation, and test data sets\") they are trained in.[3]",
    "metadata": {
      "H1": "Large language model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 767
  },
  {
    "page_content": "## History [[edit](/w/index.php?title=Large_language_model&action=edit&section=1 \"Edit section: History\")] [](/wiki/File:Trends_in_AI_training_FLOP_over_time_\\(2010-2025\\).svg)The training compute of notable large models in FLOPs vs publication date over the period 2010-2024. For overall notable models (top left), frontier models (top right), top language models (bottom left) and top models within leading companies (bottom right). The majority of these models are language models. [](/wiki/File:Large-scale_AI_training_compute_\\(FLOP\\)_vs_Publication_date_\\(2017-2024\\).svg)The training compute of notable large AI models in FLOPs vs publication date over the period 2017-2024. The majority of large models are language models or multimodal models with language capacity.",
    "metadata": {
      "H1": "Large language model",
      "H2": "History",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 775
  },
  {
    "page_content": "Before the emergence of transformer-based models in 2017, some [language models](/wiki/Language_model \"Language model\") were considered large relative to the computational and data constraints of their time. In the early 1990s, IBM's statistical models pioneered [word alignment](/wiki/Bitext_word_alignment \"Bitext word alignment\") techniques for machine translation, laying the groundwork for [corpus-based language modeling](/wiki/Construction_grammar \"Construction grammar\"). A smoothed [n-gram model](/wiki/Word_n-gram_language_model \"Word n-gram language model\") in 2001, such as those employing Kneser-Ney smoothing, trained on 300 million words achieved state-of-the-art [perplexity](/wiki/Perplexity \"Perplexity\") on benchmark tests at the time.[4] During the 2000's, with the rise of widespread internet access, researchers began compiling massive text datasets from the web (\"web as corpus\"[5]) to train statistical language models.[6][7]",
    "metadata": {
      "H1": "Large language model",
      "H2": "History",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 949
  },
  {
    "page_content": "Following the breakthrough of [deep neural networks](/wiki/Deep_learning \"Deep learning\") in image classification around 2012,[8] similar architectures were adapted for language tasks. This shift was marked by the development of [word embeddings](/wiki/Word_embedding \"Word embedding\") (eg, [Word2Vec](/wiki/Word2vec \"Word2vec\") by Mikolov in 2013) and sequence-to-sequence ([seq2seq](/wiki/Seq2seq \"Seq2seq\")) models using [LSTM](/wiki/Long_short-term_memory \"Long short-term memory\"). In 2016, Google transitioned its translation service to [neural machine translation](/wiki/Neural_machine_translation \"Neural machine translation\") (NMT), replacing statistical phrase-based models with deep [recurrent neural networks](/wiki/Recurrent_neural_network \"Recurrent neural network\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "History",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 780
  },
  {
    "page_content": ". These early NMT systems used LSTM-based [encoder-decoder architectures,](/wiki/Encoder-decoder_model \"Encoder-decoder model\") as they preceded the invention of [transformers](/wiki/Transformer_\\(deep_learning_architecture\\) \"Transformer \\(deep learning architecture\\)\").",
    "metadata": {
      "H1": "Large language model",
      "H2": "History",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 272
  },
  {
    "page_content": "[](/wiki/File:The-Transformer-model-architecture.png)An illustration of main components of the transformer model from the original paper, where layers were normalized after (instead of before) multiheaded attention",
    "metadata": {
      "H1": "Large language model",
      "H2": "History",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 214
  },
  {
    "page_content": "At the 2017 [NeurIPS](/wiki/NeurIPS \"NeurIPS\") conference, Google researchers introduced the transformer architecture in their landmark paper \"[Attention Is All You Need](/wiki/Attention_Is_All_You_Need \"Attention Is All You Need\")\". This paper's goal was to improve upon 2014 seq2seq technology,[9] and was based mainly on the [attention](/wiki/Attention_\\(machine_learning\\) \"Attention \\(machine learning\\)\") mechanism developed by Bahdanau et al. in 2014.[10] The following year in 2018, [BERT](/wiki/BERT_\\(language_model\\) \"BERT \\(language model\\)\") was introduced and quickly became \"ubiquitous\".[11] Though the original transformer has both encoder and decoder blocks, BERT is an encoder-only model. Academic and research usage of BERT began to decline in 2023, following rapid improvements in the abilities of decoder-only models (such as GPT) to solve tasks via [prompting](/wiki/Prompt_engineering \"Prompt engineering\").[12]",
    "metadata": {
      "H1": "Large language model",
      "H2": "History",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 934
  },
  {
    "page_content": "Although decoder-only [GPT-1](/wiki/GPT-1 \"GPT-1\") was introduced in 2018, it was [GPT-2](/wiki/GPT-2 \"GPT-2\") in 2019 that caught widespread attention because [OpenAI](/wiki/OpenAI \"OpenAI\") at first deemed it too powerful to release publicly, out of fear of malicious use.[13] [GPT-3](/wiki/GPT-3 \"GPT-3\") in 2020 went a step further and as of 2025[[update]](https://en.wikipedia.org/w/index.php?title=Large_language_model&action=edit) is available only via [API](/wiki/Web_API \"Web API\") with no offering of downloading the model to execute locally",
    "metadata": {
      "H1": "Large language model",
      "H2": "History",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 551
  },
  {
    "page_content": ". But it was the 2022 consumer-facing chatbot [ChatGPT](/wiki/ChatGPT \"ChatGPT\") that received extensive media coverage and public attention.[14] The 2023 [GPT-4](/wiki/GPT-4 \"GPT-4\") was praised for its increased accuracy and as a \"holy grail\" for its [multimodal](/wiki/Multimodal_learning \"Multimodal learning\") capabilities.[15] OpenAI did not reveal the high-level architecture and the number of [parameters](/wiki/Parameter#Artificial_intelligence \"Parameter\") of GPT-4. The release of ChatGPT led to an uptick in LLM usage across several research subfields of computer science, including robotics, software engineering, and societal impact work.[12] In 2024 OpenAI released the [reasoning model](/wiki/Reasoning_language_model \"Reasoning language model\") [OpenAI o1](/wiki/OpenAI_o1 \"OpenAI o1\"), which generates long chains of thought before returning a final answer.[16] Many LLMs with parameter counts comparable to those of OpenAI's GPT series have been developed.[17]",
    "metadata": {
      "H1": "Large language model",
      "H2": "History",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 979
  },
  {
    "page_content": "Since 2022, [source-available](/wiki/Source-available_software \"Source-available software\") models have been gaining popularity, especially at first with [BLOOM](/wiki/BLOOM_\\(language_model\\) \"BLOOM \\(language model\\)\") and [LLaMA](/wiki/LLaMA \"LLaMA\"), though both have restrictions on the field of use. [Mistral AI](/wiki/Mistral_AI \"Mistral AI\")'s models Mistral 7B and Mixtral 8x7b have the more permissive [Apache License](/wiki/Apache_License \"Apache License\"). In January 2025, [DeepSeek](/wiki/DeepSeek \"DeepSeek\") released DeepSeek R1, a 671-billion-parameter open-weight model that performs comparably to OpenAI o1 but at a much lower cost.[18] Since 2023, many LLMs have been trained to be [multimodal](/wiki/Multimodal_learning \"Multimodal learning\"), having the ability to also process or generate other types of data, such as images or audio. These LLMs are also called large multimodal models (LMMs).[19]",
    "metadata": {
      "H1": "Large language model",
      "H2": "History",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 920
  },
  {
    "page_content": "As of 2024, the largest and most capable models are all based on the transformer architecture. Some recent implementations are based on other architectures, such as [recurrent neural network](/wiki/Recurrent_neural_network \"Recurrent neural network\") variants and [Mamba](/wiki/Mamba_\\(deep_learning_architecture\\) \"Mamba \\(deep learning architecture\\)\") (a [state space](/wiki/State-space_representation \"State-space representation\") model).[20][21][22]",
    "metadata": {
      "H1": "Large language model",
      "H2": "History",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 454
  },
  {
    "page_content": "## Dataset preprocessing [[edit](/w/index.php?title=Large_language_model&action=edit&section=2 \"Edit section: Dataset preprocessing\")] See also: [List of datasets for machine-learning research § Internet](/wiki/List_of_datasets_for_machine-learning_research#Internet \"List of datasets for machine-learning research\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Dataset preprocessing",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 316
  },
  {
    "page_content": "### Tokenization [[edit](/w/index.php?title=Large_language_model&action=edit&section=3 \"Edit section: Tokenization\")]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Dataset preprocessing",
      "H3": "Tokenization",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 117
  },
  {
    "page_content": "As [machine learning](/wiki/Machine_learning \"Machine learning\") algorithms process numbers rather than text, the text must be converted to numbers. In the first step, a vocabulary is decided upon, then integer indices are arbitrarily but uniquely assigned to each vocabulary entry, and finally, an [embedding](/wiki/Word_embedding \"Word embedding\") is associated to the integer index. Algorithms include [byte-pair encoding](/wiki/Byte_pair_encoding \"Byte pair encoding\") (BPE) and WordPiece. There are also special tokens serving as [control characters](/wiki/Control_character \"Control character\"), such as `[MASK]` for masked-out token (as used in [BERT](/wiki/BERT_\\(language_model\\) \"BERT \\(language model\\)\")), and `[UNK]` (\"unknown\") for characters not appearing in the vocabulary. Also, some special symbols are used to denote special text formatting. For example, \"Ġ\" denotes a preceding whitespace in RoBERTa and GPT. \"##\" denotes continuation of a preceding word in BERT.[23]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Dataset preprocessing",
      "H3": "Tokenization",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 987
  },
  {
    "page_content": "For example, the BPE tokenizer used by GPT-3 (Legacy) would split `tokenizer: texts -> series of numerical \"tokens\"` as Tokenization also [compresses](/wiki/Data_compression \"Data compression\") the datasets. Because LLMs generally require input to be an [array](/wiki/Array_\\(data_structure\\) \"Array \\(data structure\\)\") that is not [jagged](/wiki/Jagged_array \"Jagged array\"), the shorter texts must be \"padded\" until they match the length of the longest one. How many tokens are, on average, needed per word depends on the language of the dataset.[24][25] #### BPE [[edit](/w/index.php?title=Large_language_model&action=edit&section=4 \"Edit section: BPE\")] Main article: [Byte pair encoding](/wiki/Byte_pair_encoding \"Byte pair encoding\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Dataset preprocessing",
      "H3": "Tokenization",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 740
  },
  {
    "page_content": "Main article: [Byte pair encoding](/wiki/Byte_pair_encoding \"Byte pair encoding\") As an example, consider a tokenizer based on byte-pair encoding. In the first step, all unique characters (including blanks and [punctuation marks](/wiki/Punctuation_mark \"Punctuation mark\")) are treated as an initial set of [_n_ -grams](/wiki/N-gram \"N-gram\") (i.e. initial set of uni-grams). Successively the most frequent pair of adjacent characters is merged into a bi-gram and all instances of the pair are replaced by it. All occurrences of adjacent pairs of (previously merged) _n_ -grams that most frequently occur together are then again merged into even lengthier _n_ -gram, until a vocabulary of prescribed size is obtained (in case of [GPT-3](/wiki/GPT-3 \"GPT-3\"), the size is 50257).[26] After a tokenizer is trained, any text can be tokenized by it, as long as it does not contain characters not appearing in the initial-set of uni-grams.[27] #### Problems",
    "metadata": {
      "H1": "Large language model",
      "H2": "Dataset preprocessing",
      "H3": "Tokenization",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 952
  },
  {
    "page_content": "#### Problems [[edit](/w/index.php?title=Large_language_model&action=edit&section=5 \"Edit section: Problems\")] A token vocabulary based on the frequencies extracted from mainly English corpora uses as few tokens as possible for an average English word. However, an average word in another language encoded by such an English-optimized tokenizer is split into a suboptimal amount of tokens. GPT-2 tokenizer can use up to 15 times more tokens per word for some languages, for example for the [Shan language](/wiki/Shan_language \"Shan language\") from [Myanmar](/wiki/Myanmar \"Myanmar\"). Even more widespread languages such as Portuguese and German have \"a premium of 50%\" compared to English.[25] Greedy tokenization also causes subtle problems with text completion.[28]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Dataset preprocessing",
      "H3": "Tokenization",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 767
  },
  {
    "page_content": "### Dataset cleaning [[edit](/w/index.php?title=Large_language_model&action=edit&section=6 \"Edit section: Dataset cleaning\")] Main article: [Data cleansing](/wiki/Data_cleansing \"Data cleansing\") In the context of training LLMs, datasets are typically cleaned by removing low-quality, duplicated, or toxic data.[29] Cleaned datasets can increase training efficiency and lead to improved downstream performance.[30][31] A trained LLM can be used to clean datasets for training a further LLM.[32] With the increasing proportion of LLM-generated content on the web, data cleaning in the future may include filtering out such content. LLM-generated content can pose a problem if the content is similar to human text (making filtering difficult) but of lower quality (degrading performance of models trained on it).[33]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Dataset preprocessing",
      "H3": "Dataset cleaning",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 814
  },
  {
    "page_content": "### Synthetic data [[edit](/w/index.php?title=Large_language_model&action=edit&section=7 \"Edit section: Synthetic data\")] Main article: [Synthetic data](/wiki/Synthetic_data \"Synthetic data\") Training of largest language models might need more linguistic data than naturally available, or that the naturally occurring data is of insufficient quality. In these cases, synthetic data might be used. Microsoft's [Phi](/w/index.php?title=Phi_\\(LLM\\)&action=edit&redlink=1 \"Phi \\(LLM\\) \\(page does not exist\\)\") series of LLMs is trained on textbook-like data generated by another LLM.[34]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Dataset preprocessing",
      "H3": "Synthetic data",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 584
  },
  {
    "page_content": "## Training and architecture [[edit](/w/index.php?title=Large_language_model&action=edit&section=8 \"Edit section: Training and architecture\")] See also: [Fine-tuning (machine learning)](/wiki/Fine-tuning_\\(machine_learning\\) \"Fine-tuning \\(machine learning\\)\") An LLM is a type of [foundation model](/wiki/Foundation_model \"Foundation model\") (large X model) trained on language.[35] LLMs can be trained in different ways. In particular, GPT models are first pretrained to predict the next word on a large amount of data, before being fine-tuned.[36]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Training and architecture",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 550
  },
  {
    "page_content": "### Reinforcement learning from human feedback [[edit](/w/index.php?title=Large_language_model&action=edit&section=9 \"Edit section: Reinforcement learning from human feedback\")] [Reinforcement learning from human feedback](/wiki/Reinforcement_learning_from_human_feedback \"Reinforcement learning from human feedback\") (RLHF) through algorithms, such as [proximal policy optimization](/wiki/Proximal_Policy_Optimization \"Proximal Policy Optimization\"), is used to further fine-tune a model based on a dataset of human preferences.[37]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Training and architecture",
      "H3": "Reinforcement learning from human feedback",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 533
  },
  {
    "page_content": "### Instruction tuning [[edit](/w/index.php?title=Large_language_model&action=edit&section=10 \"Edit section: Instruction tuning\")] Using \"self-instruct\" approaches, LLMs have been able to [bootstrap](/wiki/Bootstrapping \"Bootstrapping\") correct responses, replacing any naive responses, starting from human-generated corrections of a few cases. For example, in the instruction \"Write an essay about the main themes represented in _Hamlet_ \", an initial naive completion might be \"If you submit the essay after March 17, your grade will be reduced by 10% for each day of delay\", based on the frequency of this textual sequence in the corpus.[38]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Training and architecture",
      "H3": "Instruction tuning",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 644
  },
  {
    "page_content": "### Mixture of experts [[edit](/w/index.php?title=Large_language_model&action=edit&section=11 \"Edit section: Mixture of experts\")] Main article: [Mixture of experts](/wiki/Mixture_of_experts \"Mixture of experts\") The largest LLM may be too expensive to train and use directly. For such models, [mixture of experts](/wiki/Mixture_of_experts \"Mixture of experts\") (MoE) can be applied, a line of research pursued by Google researchers since 2017 to train models reaching up to 1 trillion parameters.[39][40][41]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Training and architecture",
      "H3": "Mixture of experts",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 509
  },
  {
    "page_content": "### Prompt engineering, attention mechanism, and context window [[edit](/w/index.php?title=Large_language_model&action=edit&section=12 \"Edit section: Prompt engineering, attention mechanism, and context window\")] See also: [Prompt engineering](/wiki/Prompt_engineering \"Prompt engineering\") and [Attention (machine learning)](/wiki/Attention_\\(machine_learning\\) \"Attention \\(machine learning\\)\") Most results previously achievable only by (costly) fine-tuning, can be achieved through [prompt engineering](/wiki/Prompt_engineering \"Prompt engineering\"), although limited to the scope of a single conversation (more precisely, limited to the scope of a context window).[42]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Training and architecture",
      "H3": "Prompt engineering, attention mechanism, and context window",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 673
  },
  {
    "page_content": "[](/wiki/File:Multiple_attention_heads.png) When each head calculates, according to its own criteria, how much other tokens are relevant for the \"it_\" token, note that the second attention head, represented by the second column, is focusing most on the first two rows, i.e. the tokens \"The\" and \"animal\", while the third column is focusing most on the bottom two rows, i.e. on \"tired\", which has been tokenized into two tokens.[43]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Training and architecture",
      "H3": "Prompt engineering, attention mechanism, and context window",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 431
  },
  {
    "page_content": "In order to find out which tokens are relevant to each other within the scope of the context window, the attention mechanism calculates \"soft\" weights for each token, more precisely for its embedding, by using multiple attention heads, each with its own \"relevance\" for calculating its own soft weights. For example, the small (i.e. 117M parameter sized) [GPT-2](/wiki/GPT-2 \"GPT-2\") model has had twelve attention heads and a context window of only 1k tokens.[44] In its medium version it has 345M parameters and contains 24 layers, each with 12 attention heads. For the training with gradient descent a batch size of 512 was utilized.[27]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Training and architecture",
      "H3": "Prompt engineering, attention mechanism, and context window",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 640
  },
  {
    "page_content": "The largest models, such as Google's [Gemini 1.5](/wiki/Gemini_\\(language_model\\) \"Gemini \\(language model\\)\"), presented in February 2024, can have a context window sized up to 1 million (context window of 10 million was also \"successfully tested\").[45] Other models with large context windows includes Anthropic's Claude 2.1, with a context window of up to 200k tokens.[46] Note that this maximum refers to the number of input tokens and that the maximum number of output tokens differs from the input and is often smaller. For example, the GPT-4 Turbo model has a maximum output of 4096 tokens.[47]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Training and architecture",
      "H3": "Prompt engineering, attention mechanism, and context window",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 601
  },
  {
    "page_content": "Length of a conversation that the model can take into account when generating its next answer is limited by the size of a context window, as well. If the length of a conversation, for example with [ChatGPT](/wiki/ChatGPT \"ChatGPT\"), is longer than its context window, only the parts inside the context window are taken into account when generating the next answer, or the model needs to apply some algorithm to summarize the too distant parts of conversation. The shortcomings of making a context window larger include higher computational cost and possibly diluting the focus on local context, while making it smaller can cause a model to miss an important long-range dependency. Balancing them is a matter of experimentation and domain-specific considerations. A model may be pre-trained either to predict how the segment continues, or what is missing in the segment, given a segment from its training dataset.[48] It can be either",
    "metadata": {
      "H1": "Large language model",
      "H2": "Training and architecture",
      "H3": "Prompt engineering, attention mechanism, and context window",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 933
  },
  {
    "page_content": "A model may be pre-trained either to predict how the segment continues, or what is missing in the segment, given a segment from its training dataset.[48] It can be either * autoregressive (i.e. predicting how the segment continues, as [GPTs](/wiki/Generative_pretrained_transformer \"Generative pretrained transformer\") do): for example given a segment \"I like to eat\", the model predicts \"ice cream\", or \"sushi\". * \"[masked](/wiki/Cloze_test \"Cloze test\")\" (i.e. filling in the parts missing from the segment, the way \"BERT\"[49] does it): for example, given a segment \"I like to `[__] [__]` cream\", the model predicts that \"eat\" and \"ice\" are missing.",
    "metadata": {
      "H1": "Large language model",
      "H2": "Training and architecture",
      "H3": "Prompt engineering, attention mechanism, and context window",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 651
  },
  {
    "page_content": "Models may be trained on auxiliary tasks which test their understanding of the data distribution, such as Next Sentence Prediction (NSP), in which pairs of sentences are presented and the model must predict whether they appear consecutively in the training corpus.[49] During training, [regularization](/wiki/Regularization_\\(mathematics\\) \"Regularization \\(mathematics\\)\") loss is also used to stabilize training. However regularization loss is usually not used during [testing](/wiki/Training,_validation,_and_test_data_sets \"Training, validation, and test data sets\") and evaluation.",
    "metadata": {
      "H1": "Large language model",
      "H2": "Training and architecture",
      "H3": "Prompt engineering, attention mechanism, and context window",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 586
  },
  {
    "page_content": "### Infrastructure [[edit](/w/index.php?title=Large_language_model&action=edit&section=13 \"Edit section: Infrastructure\")] Substantial infrastructure is necessary for training the largest models.[50][51][52]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Training and architecture",
      "H3": "Infrastructure",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 207
  },
  {
    "page_content": "## Training cost [[edit](/w/index.php?title=Large_language_model&action=edit&section=14 \"Edit section: Training cost\")] [](/wiki/File:Estimated_training_cost_of_some_AI_models_-_2024_AI_index.jpg) The qualifier \"large\" in \"large language model\" is inherently vague, as there is no definitive threshold for the number of parameters required to qualify as \"large\". As time goes on, what was previously considered \"large\" may evolve. [GPT-1](/wiki/GPT-1 \"GPT-1\") of 2018 is usually considered the first LLM, even though it has only 117 million parameters. The tendency towards larger models is visible in the [list of large language models](/wiki/List_of_large_language_models \"List of large language models\").",
    "metadata": {
      "H1": "Large language model",
      "H2": "Training cost",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 707
  },
  {
    "page_content": "As technology advanced, large sums have been invested in increasingly large models. For example, training of the GPT-2 (i.e. a 1.5-billion-parameters model) in 2019 cost $50,000, while training of the PaLM (i.e. a 540-billion-parameters model) in 2022 cost $8 million, and Megatron-Turing NLG 530B (in 2021) cost around $11 million.[53] For Transformer-based LLM, training cost is much higher than [inference](/wiki/Statistical_inference \"Statistical inference\") cost. It costs 6 [FLOPs](/wiki/FLOPS \"FLOPS\") per parameter to train on one token, whereas it costs 1 to 2 FLOPs per parameter to infer on one token.[54]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Training cost",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 616
  },
  {
    "page_content": "## Tool use [[edit](/w/index.php?title=Large_language_model&action=edit&section=15 \"Edit section: Tool use\")] Tool use is a mechanism that enables LLMs to interact with external systems, applications, or data sources. It can allow for example to fetch real-time information from an API or to execute code.[55] Generally, in order to get an LLM to use tools, one must fine-tune it for tool use. If the number of tools is finite, then fine-tuning may be done just once. If the number of tools can grow arbitrarily, as with online [API](/wiki/API \"API\") services, then the LLM can be fine-tuned to be able to read API documentation and call API correctly.[56][57]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Tool use",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 660
  },
  {
    "page_content": "[Retrieval-augmented generation](/wiki/Retrieval-augmented_generation \"Retrieval-augmented generation\") (RAG) is another approach that enhances LLMs by integrating them with [document retrieval](/wiki/Document_retrieval \"Document retrieval\") systems. Given a query, a document retriever is called to retrieve the most relevant documents. This is usually done by encoding the query and the documents into vectors, then finding the documents with vectors (usually stored in a [vector database](/wiki/Vector_database \"Vector database\")) most similar to the vector of the query. The LLM then generates an output based on both the query and context included from the retrieved documents.[58]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Tool use",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 686
  },
  {
    "page_content": "## Agency [[edit](/w/index.php?title=Large_language_model&action=edit&section=16 \"Edit section: Agency\")] Main article: [AI agent](/wiki/AI_agent \"AI agent\") An LLM is typically not an [autonomous agent](/wiki/Autonomous_agent \"Autonomous agent\") by itself, as it lacks the ability to interact with dynamic environments, recall past behaviors, and plan future actions. But it can be transformed into an agent by integrating modules like profiling, memory, planning, and action.[59]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Agency",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 481
  },
  {
    "page_content": "The [ReAct pattern](/w/index.php?title=ReAct_pattern&action=edit&redlink=1 \"ReAct pattern \\(page does not exist\\)\"), a portmanteau of \"Reason + Act\", constructs an [agent](/wiki/Intelligent_agent \"Intelligent agent\") out of an LLM, using the LLM as a planner. The LLM is prompted to \"think out loud\". Specifically, the language model is prompted with a textual description of the environment, a goal, a list of possible actions, and a record of the actions and observations so far. It generates one or more thoughts before generating an action, which is then executed in the environment.[60] The linguistic description of the environment given to the LLM planner can even be the LaTeX code of a paper describing the environment.[61]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Agency",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 732
  },
  {
    "page_content": "In the DEPS (\"Describe, Explain, Plan and Select\") method, an LLM is first connected to the visual world via image descriptions. It is then prompted to produce plans for complex tasks and behaviors based on its pretrained knowledge and environmental feedback it receives.[62] The Reflexion method[63] constructs an agent that learns over multiple episodes. At the end of each episode, the LLM is given the record of the episode, and prompted to think up \"lessons learned\", which would help it perform better at a subsequent episode. These \"lessons learned\" are given to the agent in the subsequent episodes.[63] [Monte Carlo tree search](/wiki/Monte_Carlo_tree_search \"Monte Carlo tree search\") can use an LLM as rollout heuristic. When a programmatic world model is not available, an LLM can also be prompted with a description of the environment to act as world model.[64]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Agency",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 874
  },
  {
    "page_content": "For open-ended exploration, an LLM can be used to score observations for their \"interestingness\", which can be used as a reward signal to guide a normal (non-LLM) reinforcement learning agent.[65] Alternatively, it can [propose increasingly difficult tasks](/wiki/Zone_of_proximal_development \"Zone of proximal development\") for [curriculum learning](/wiki/Curriculum_learning \"Curriculum learning\").[66] Instead of outputting individual actions, an LLM planner can also construct \"skills\", or [functions](/wiki/Function_\\(computer_programming\\) \"Function \\(computer programming\\)\") for complex action sequences. The skills can be stored and later invoked, allowing increasing levels of abstraction in planning.[66] LLM-powered agents can keep a long-term memory of its previous contexts, and the memory can be retrieved in the same way as Retrieval Augmented Generation. Multiple such agents can interact socially.[67]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Agency",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 919
  },
  {
    "page_content": "## Compression [[edit](/w/index.php?title=Large_language_model&action=edit&section=17 \"Edit section: Compression\")] See also: [1.58-bit large language model](/wiki/1.58-bit_large_language_model \"1.58-bit large language model\") Typically, LLMs are trained with single- or half-precision floating point numbers (float32 and float16). One float16 has 16 bits, or 2 bytes, and so one billion parameters require 2 gigabytes. The largest models typically have 100 billion parameters, requiring 200 gigabytes to load, which places them outside the range of most consumer electronics.[68]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Compression",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 580
  },
  {
    "page_content": "_Post-training[quantization](/wiki/Quantization_\\(signal_processing\\) \"Quantization \\(signal processing\\)\")_[69] aims to decrease the space requirement by lowering precision of the parameters of a trained model, while preserving most of its performance.[70][71] The simplest form of quantization simply truncates all numbers to a given number of bits. It can be improved by using a different quantization [codebook](/wiki/Block_cipher \"Block cipher\") per layer. Further improvement can be done by applying [different precisions](/wiki/Mixed-precision_arithmetic \"Mixed-precision arithmetic\") to different parameters, with higher precision for particularly important parameters (\"outlier weights\").[72] See the visual guide to quantization by Maarten Grootendorst[73] for a visual depiction. While quantized models are typically frozen, and only pre-quantized models are fine-tuned, quantized models can still be fine-tuned.[74]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Compression",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 927
  },
  {
    "page_content": "## Multimodality [[edit](/w/index.php?title=Large_language_model&action=edit&section=18 \"Edit section: Multimodality\")] See also: [Multimodal learning](/wiki/Multimodal_learning \"Multimodal learning\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Multimodality",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 200
  },
  {
    "page_content": "[[edit](/w/index.php?title=Large_language_model&action=edit&section=18 \"Edit section: Multimodality\")] See also: [Multimodal learning](/wiki/Multimodal_learning \"Multimodal learning\") Multimodality means having multiple modalities, where a \"[modality](/wiki/Modality_\\(human%E2%80%93computer_interaction\\) \"Modality \\(human–computer interaction\\)\")\" refers to a type of input or output, such as video, image, audio, text, [proprioception](/wiki/Proprioception \"Proprioception\"), etc.[75] For example, [Google PaLM](/wiki/Pathways_Language_Model \"Pathways Language Model\") model was fine-tuned into a multimodal model and applied to [robotic control](/wiki/Robot_control \"Robot control\").[76] [LLaMA](/wiki/LLaMA \"LLaMA\") models have also been turned multimodal using the tokenization method, to allow image inputs,[77] and video inputs.[78] [GPT-4o](/wiki/GPT-4o \"GPT-4o\") can process and generate text, audio and images.[79] Such models are sometimes called large multimodal models (LMMs).[80]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Multimodality",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 994
  },
  {
    "page_content": "A common method to create multimodal models out of an LLM is to \"tokenize\" the output of a trained encoder. Concretely, one can construct an LLM that can understand images as follows: take a trained LLM, and take a trained image encoder E {\\displaystyle E} . Make a small multilayered perceptron f {\\displaystyle f} , so that for any image y {\\displaystyle y} , the post-processed vector f ( E ( y ) ) {\\displaystyle f(E(y))} has the same dimensions as an encoded token. That is an \"image token\". Then, one can interleave text tokens and image tokens. The compound model is then fine-tuned on an image-text dataset. This basic construction can be applied with more sophistication to improve the model",
    "metadata": {
      "H1": "Large language model",
      "H2": "Multimodality",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 700
  },
  {
    "page_content": ". The compound model is then fine-tuned on an image-text dataset. This basic construction can be applied with more sophistication to improve the model. The image encoder may be frozen to improve stability.[81] The model Flamingo demonstrated in 2022 the effectiveness of the tokenization method, fine-tuning a pair of pretrained language model and image encoder to perform better on visual question answering than models trained from scratch.[82]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Multimodality",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 446
  },
  {
    "page_content": "## Reasoning [[edit](/w/index.php?title=Large_language_model&action=edit&section=19 \"Edit section: Reasoning\")] Main article: [Reasoning language model](/wiki/Reasoning_language_model \"Reasoning language model\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Reasoning",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 211
  },
  {
    "page_content": "In late 2024, a new direction emerged in LLM development with models specifically designed for complex reasoning tasks. These \"reasoning models\" were trained to spend more time generating step-by-step solutions before providing final answers, similar to human problem-solving processes.[83] OpenAI introduced this trend with their [o1](/wiki/OpenAI_o1 \"OpenAI o1\") model in September 2024, followed by [o3](/wiki/OpenAI_o3 \"OpenAI o3\") in December 2024. These models showed significant improvements in mathematics, science, and coding tasks compared to traditional LLMs",
    "metadata": {
      "H1": "Large language model",
      "H2": "Reasoning",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 569
  },
  {
    "page_content": ". These models showed significant improvements in mathematics, science, and coding tasks compared to traditional LLMs. For example, on [International Mathematics Olympiad](/wiki/International_Mathematical_Olympiad \"International Mathematical Olympiad\") qualifying exam problems, [GPT-4o](/wiki/GPT-4o \"GPT-4o\") achieved 13% accuracy while o1 reached 83%.[83][84] In January 2025, the Chinese company DeepSeek released DeepSeek-R1, a 671-billion-parameter open-weight reasoning model that achieved comparable performance to OpenAI's o1 while being significantly more cost-effective to operate. Unlike proprietary models from OpenAI, DeepSeek-R1's open-weight nature allowed researchers to study and build upon the algorithm, though its training data remained private.[85] These reasoning models typically require more computational resources per query compared to traditional LLMs, as they perform more extensive processing to work through problems step-by-step",
    "metadata": {
      "H1": "Large language model",
      "H2": "Reasoning",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 960
  },
  {
    "page_content": ". However, they have shown superior capabilities in domains requiring structured logical thinking, such as mathematics, scientific research, and computer programming.[84]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Reasoning",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 170
  },
  {
    "page_content": "Efforts to reduce or compensate for hallucinations have employed [automated reasoning](/wiki/Automated_reasoning \"Automated reasoning\"), RAG ([retrieval-augmented generation](/wiki/Retrieval-augmented_generation \"Retrieval-augmented generation\")), [fine-tuning](/wiki/Fine-tuning_\\(deep_learning\\) \"Fine-tuning \\(deep learning\\)\"), and other methods.[86]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Reasoning",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 354
  },
  {
    "page_content": "## Properties [[edit](/w/index.php?title=Large_language_model&action=edit&section=20 \"Edit section: Properties\")]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Properties",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 113
  },
  {
    "page_content": "### Scaling laws [[edit](/w/index.php?title=Large_language_model&action=edit&section=21 \"Edit section: Scaling laws\")] Main article: [Neural scaling law](/wiki/Neural_scaling_law \"Neural scaling law\") The performance of an LLM after pretraining largely depends on the: * cost of pretraining C {\\displaystyle C} (the total amount of compute used), * size of the [artificial neural network](/wiki/Artificial_neural_network \"Artificial neural network\") itself, such as number of parameters N {\\displaystyle N} (i.e. amount of neurons in its layers, amount of weights between them and biases), * size of its pretraining dataset (i.e. number of tokens in corpus, D {\\displaystyle D} ).",
    "metadata": {
      "H1": "Large language model",
      "H2": "Properties",
      "H3": "Scaling laws",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 680
  },
  {
    "page_content": "* size of its pretraining dataset (i.e. number of tokens in corpus, D {\\displaystyle D} ). \"Scaling laws\" are [empirical statistical laws](/wiki/Empirical_statistical_laws \"Empirical statistical laws\") that predict LLM performance based on such factors. One particular scaling law (\"[Chinchilla scaling](/wiki/Chinchilla_AI \"Chinchilla AI\")\") for LLM autoregressively trained for one epoch, with a [log-log](/wiki/Log-log_plot \"Log-log plot\") [learning rate](/wiki/Learning_rate \"Learning rate\") schedule, states that:[87] { C = C 0 N D L = A N α + B D β + L 0 {\\displaystyle {\\begin{cases}C=C_{0}ND\\\\\\\\[6pt]L={\\frac {A}{N^{\\alpha }}}+{\\frac {B}{D^{\\beta }}}+L_{0}\\end{cases}}} where the variables are * C {\\displaystyle C} is the cost of training the model, in [FLOPs](/wiki/FLOPS \"FLOPS\"). * N {\\displaystyle N} is the number of parameters in the model. * D {\\displaystyle D} is the number of tokens in the training set.",
    "metadata": {
      "H1": "Large language model",
      "H2": "Properties",
      "H3": "Scaling laws",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 922
  },
  {
    "page_content": "* N {\\displaystyle N} is the number of parameters in the model. * D {\\displaystyle D} is the number of tokens in the training set. * L {\\displaystyle L} is the average negative log-likelihood loss per token ([nats](/wiki/Nat_\\(unit\\) \"Nat \\(unit\\)\")/token), achieved by the trained LLM on the test dataset. and the statistical hyper-parameters are * C 0 = 6 {\\displaystyle C_{0}=6} , meaning that it costs 6 FLOPs per parameter to train on one token. Note that training cost is much higher than inference cost, where it costs 1 to 2 FLOPs per parameter to infer on one token.[54] * α = 0.34 , β = 0.28 , A = 406.4 , B = 410.7 , L 0 = 1.69 {\\displaystyle \\alpha =0.34,\\beta =0.28,A=406.4,B=410.7,L_{0}=1.69}",
    "metadata": {
      "H1": "Large language model",
      "H2": "Properties",
      "H3": "Scaling laws",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 706
  },
  {
    "page_content": "### Emergent abilities [[edit](/w/index.php?title=Large_language_model&action=edit&section=22 \"Edit section: Emergent abilities\")] [](/wiki/File:LLM_emergent_benchmarks.png)At point(s) referred to as [breaks](/wiki/Broken_Neural_Scaling_Law \"Broken Neural Scaling Law\"),[88] the lines change their slopes, appearing on a linear-log plot as a series of linear segments connected by arcs. Performance of bigger models on various tasks, when plotted on a log-log scale, appears as a linear extrapolation of performance achieved by smaller models. However, this linearity may be punctuated by \"[break(s)](/wiki/Broken_Neural_Scaling_Law \"Broken Neural Scaling Law\")\"[88] in the scaling law, where the slope of the line changes abruptly, and where larger models acquire \"emergent abilities\".[42][89] They arise from the complex interaction of the model's components and are not explicitly programmed or designed.[90]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Properties",
      "H3": "Emergent abilities",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 911
  },
  {
    "page_content": "Furthermore, recent research has demonstrated that AI systems, including large language models, can employ heuristic reasoning akin to human cognition. They balance between exhaustive logical processing and the use of cognitive shortcuts (heuristics), adapting their reasoning strategies to optimize between accuracy and effort. This behavior mimics principles of resource-rational human cognition, as discussed in classical theories of bounded rationality and dual-process theory.[91] One of the emergent abilities is [in-context learning](/wiki/In-context_learning \"In-context learning\") from example demonstrations.[92] In-context learning is involved in tasks, such as: * reported arithmetics * decoding the [International Phonetic Alphabet](/wiki/International_Phonetic_Alphabet \"International Phonetic Alphabet\") * unscrambling a word's letters * disambiguating word-in-context datasets[42][93][94] * converting spatial words",
    "metadata": {
      "H1": "Large language model",
      "H2": "Properties",
      "H3": "Emergent abilities",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 931
  },
  {
    "page_content": "* unscrambling a word's letters * disambiguating word-in-context datasets[42][93][94] * converting spatial words * [cardinal directions](/wiki/Cardinal_direction \"Cardinal direction\") (for example, replying \"northeast\" in response to a 3x3 grid of 8 zeros and a 1 in the top-right), color terms represented in text.[95] * [chain-of-thought prompting](/wiki/Chain-of-thought_prompting \"Chain-of-thought prompting\"): In a 2022 research paper, chain-of-thought prompting only improved the performance for models that had at least 62B parameters. Smaller models perform better when prompted to answer immediately, without chain of thought.[96] * identifying offensive content in paragraphs of [Hinglish](/wiki/Hinglish \"Hinglish\") (a combination of Hindi and English), and generating a similar English equivalent of [Kiswahili](/wiki/Kiswahili \"Kiswahili\") proverbs.[97]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Properties",
      "H3": "Emergent abilities",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 866
  },
  {
    "page_content": "Schaeffer _et. al._ argue that the emergent abilities are not unpredictably acquired, but predictably acquired according to a [smooth scaling law](/wiki/Neural_scaling_law \"Neural scaling law\"). The authors considered a toy statistical model of an LLM solving multiple-choice questions, and showed that this statistical model, modified to account for other types of tasks, applies to these tasks as well.[98] Let x {\\displaystyle x} be the number of parameter count, and y {\\displaystyle y} be the performance of the model. * When y = average Pr ( correct token ) {\\displaystyle y={\\text{average }}\\Pr({\\text{correct token}})} , then ( log x , y ) {\\displaystyle (\\log x,y)} is an exponential curve (before it hits the plateau at one), which looks like emergence.",
    "metadata": {
      "H1": "Large language model",
      "H2": "Properties",
      "H3": "Emergent abilities",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 763
  },
  {
    "page_content": "* When y = average log ( Pr ( correct token ) ) {\\displaystyle y={\\text{average }}\\log(\\Pr({\\text{correct token}}))} , then the ( log x , y ) {\\displaystyle (\\log x,y)} plot is a straight line (before it hits the plateau at zero), which does not look like emergence. * When y = average Pr ( the most likely token is correct ) {\\displaystyle y={\\text{average }}\\Pr({\\text{the most likely token is correct}})} , then ( log x , y ) {\\displaystyle (\\log x,y)} is a step-function, which looks like emergence.",
    "metadata": {
      "H1": "Large language model",
      "H2": "Properties",
      "H3": "Emergent abilities",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 503
  },
  {
    "page_content": "## Interpretation [[edit](/w/index.php?title=Large_language_model&action=edit&section=23 \"Edit section: Interpretation\")] Large language models by themselves are [black boxes](/wiki/Black_box \"Black box\"), and it is not clear how they can perform linguistic tasks. Similarly, it is unclear if or how LLMs should be viewed as models of the human brain and/or human mind.[99] Various techniques have been developed to enhance the transparency and interpretability of LLMs. Mechanistic interpretability aims to [reverse-engineer](/wiki/Reverse_engineering \"Reverse engineering\") LLMs by discovering symbolic algorithms that approximate the inference performed by an LLM. In recent years, sparse coding models such as sparse autoencoders, transcoders, and crosscoders have emerged as promising tools for identifying interpretable features.",
    "metadata": {
      "H1": "Large language model",
      "H2": "Interpretation",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 835
  },
  {
    "page_content": "### Studying a replacement model [[edit](/w/index.php?title=Large_language_model&action=edit&section=24 \"Edit section: Studying a replacement model\")] Transcoders, which are more interpretable than transformers, have been utilized to develop “replacement models.” In one such study involving the mechanistic interpretation of writing a rhyming poem by an LLM, it was shown that although they are believed to simply predict the next token, they can, in fact, plan ahead.[100]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Interpretation",
      "H3": "Studying a replacement model",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 474
  },
  {
    "page_content": "### Explainability [[edit](/w/index.php?title=Large_language_model&action=edit&section=25 \"Edit section: Explainability\")] A related concept is [AI explainability](/wiki/AI_explainability \"AI explainability\"), which focuses on understanding how an AI model arrives at a given result. Techniques such as partial dependency plots, SHAP (SHapley Additive exPlanations), and feature importance assessments allow researchers to visualize and understand the contributions of various input features to the model's predictions. These methods help ensure that AI models make decisions based on relevant and fair criteria, enhancing trust and accountability. By integrating these techniques, researchers and practitioners can gain deeper insights into the operations of LLMs, fostering trust and facilitating the responsible deployment of these powerful models.",
    "metadata": {
      "H1": "Large language model",
      "H2": "Interpretation",
      "H3": "Explainability",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 851
  },
  {
    "page_content": "In another example, the authors trained small transformers on [modular arithmetic addition](/wiki/Modular_arithmetic \"Modular arithmetic\"). The resulting models were reverse-engineered, and it turned out they used [discrete Fourier transform](/wiki/Discrete_Fourier_transform \"Discrete Fourier transform\").[101]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Interpretation",
      "H3": "Explainability",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 311
  },
  {
    "page_content": "### Understanding and intelligence [[edit](/w/index.php?title=Large_language_model&action=edit&section=26 \"Edit section: Understanding and intelligence\")] See also: [Philosophy of artificial intelligence](/wiki/Philosophy_of_artificial_intelligence \"Philosophy of artificial intelligence\") and [Artificial consciousness](/wiki/Artificial_consciousness \"Artificial consciousness\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Interpretation",
      "H3": "Understanding and intelligence",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 379
  },
  {
    "page_content": "NLP researchers were evenly split when asked, in a 2022 survey, whether (untuned) LLMs \"could (ever) understand natural language in some nontrivial sense\".[102] Proponents of \"LLM understanding\" believe that some LLM abilities, such as mathematical reasoning, imply an ability to [\"understand\"](/wiki/Natural_language_understanding \"Natural language understanding\") certain concepts",
    "metadata": {
      "H1": "Large language model",
      "H2": "Interpretation",
      "H3": "Understanding and intelligence",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 382
  },
  {
    "page_content": ". A Microsoft team argued in 2023 that GPT-4 \"can solve novel and difficult tasks that span mathematics, coding, vision, medicine, law, psychology and more\" and that GPT-4 \"could reasonably be viewed as an early (yet still incomplete) version of an [artificial general intelligence](/wiki/Artificial_general_intelligence \"Artificial general intelligence\") system\": \"Can one reasonably say that a system that passes exams for software engineering candidates is not _really_ intelligent?\"[103][104] [Ilya Sutskever](/wiki/Ilya_Sutskever \"Ilya Sutskever\") argues that predicting the next word sometimes involves reasoning and deep insights, for example if the LLM has to predict the name of the criminal in an unknown detective novel after processing the entire story leading up to the revelation.[105] Some researchers characterize LLMs as \"alien intelligence\".[106][107] For example, Conjecture CEO [Connor Leahy](/wiki/Connor_Leahy \"Connor Leahy\") considers untuned LLMs to be like inscrutable alien",
    "metadata": {
      "H1": "Large language model",
      "H2": "Interpretation",
      "H3": "Understanding and intelligence",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 999
  },
  {
    "page_content": "Some researchers characterize LLMs as \"alien intelligence\".[106][107] For example, Conjecture CEO [Connor Leahy](/wiki/Connor_Leahy \"Connor Leahy\") considers untuned LLMs to be like inscrutable alien \"[Shoggoths](/wiki/Shoggoth \"Shoggoth\")\", and believes that RLHF tuning creates a \"smiling facade\" obscuring the inner workings of the LLM: \"If you don't push it too far, the smiley face stays on",
    "metadata": {
      "H1": "Large language model",
      "H2": "Interpretation",
      "H3": "Understanding and intelligence",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 395
  },
  {
    "page_content": ". But then you give it [an unexpected] prompt, and suddenly you see this massive underbelly of insanity, of weird thought processes and clearly non-human understanding.\"[108][109]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Interpretation",
      "H3": "Understanding and intelligence",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 179
  },
  {
    "page_content": "In contrast, some skeptics of LLM understanding believe that existing LLMs are \"simply remixing and recombining existing writing\",[107] a phenomenon known as [stochastic parrot](/wiki/Stochastic_parrot \"Stochastic parrot\"), or they point to the deficits existing LLMs continue to have in prediction skills, reasoning skills, agency, and explainability.[102] For example, GPT-4 has natural deficits in planning and in real-time learning.[104] Generative LLMs have been observed to confidently assert claims of fact which do not seem to be [justified](/wiki/Justification_\\(epistemology\\) \"Justification \\(epistemology\\)\") by their [training data](/wiki/Training_data \"Training data\"), a phenomenon which has been termed \"[hallucination](/wiki/Hallucination_\\(artificial_intelligence\\) \"Hallucination \\(artificial intelligence\\)\")\".[110] Specifically, hallucinations in the context of LLMs correspond to the generation of text or responses that seem syntactically sound, fluent, and natural but are",
    "metadata": {
      "H1": "Large language model",
      "H2": "Interpretation",
      "H3": "Understanding and intelligence",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 996
  },
  {
    "page_content": "\\(artificial intelligence\\)\")\".[110] Specifically, hallucinations in the context of LLMs correspond to the generation of text or responses that seem syntactically sound, fluent, and natural but are factually incorrect, nonsensical, or unfaithful to the provided source input.[111] Neuroscientist [Terrence Sejnowski](/wiki/Terrence_Sejnowski \"Terrence Sejnowski\") has argued that \"The diverging opinions of experts on the intelligence of LLMs suggests that our old ideas based on natural intelligence are inadequate\".[102]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Interpretation",
      "H3": "Understanding and intelligence",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 522
  },
  {
    "page_content": "The matter of LLM's exhibiting intelligence or understanding has two main aspects – the first is how to model thought and language in a computer system, and the second is how to enable the computer system to generate human like language.[102] These aspects of language as a model of [cognition](/wiki/Cognition \"Cognition\") have been developed in the field of [cognitive linguistics](/wiki/Cognitive_linguistics \"Cognitive linguistics\"). American linguist [George Lakoff](/wiki/George_Lakoff \"George Lakoff\") presented Neural Theory of Language (NTL)[112] as a [computational basis](/wiki/Cognitive_linguistics#Computational_approaches \"Cognitive linguistics\") for using language as a model of learning tasks and understanding",
    "metadata": {
      "H1": "Large language model",
      "H2": "Interpretation",
      "H3": "Understanding and intelligence",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 726
  },
  {
    "page_content": ". [The NTL Model](https://www.icsi.berkeley.edu/icsi/projects/ai/ntl) outlines how specific neural structures of the human brain shape the nature of thought and language and in turn what are the computational properties of such neural systems that can be applied to model thought and language in a computer system. After a framework for modeling language in a computer systems was established, the focus shifted to establishing frameworks for computer systems to generate language with acceptable grammar",
    "metadata": {
      "H1": "Large language model",
      "H2": "Interpretation",
      "H3": "Understanding and intelligence",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 504
  },
  {
    "page_content": ". After a framework for modeling language in a computer systems was established, the focus shifted to establishing frameworks for computer systems to generate language with acceptable grammar. In his 2014 book titled _[The Language Myth: Why Language Is Not An Instinct](/wiki/The_Language_Myth \"The Language Myth\")_ , British cognitive linguist and digital communication technologist [Vyvyan Evans](/wiki/Vyvyan_Evans \"Vyvyan Evans\") mapped out the role of [probabilistic context-free grammar](/wiki/Probabilistic_context-free_grammar \"Probabilistic context-free grammar\") (PCFG) in enabling [NLP to model cognitive patterns](/wiki/Natural_language_processing#Cognition \"Natural language processing\") and generate human like language.[113][114]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Interpretation",
      "H3": "Understanding and intelligence",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 745
  },
  {
    "page_content": "## Evaluation [[edit](/w/index.php?title=Large_language_model&action=edit&section=27 \"Edit section: Evaluation\")]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Evaluation",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 113
  },
  {
    "page_content": "### Perplexity [[edit](/w/index.php?title=Large_language_model&action=edit&section=28 \"Edit section: Perplexity\")] The canonical measure of the performance of an LLM is its [perplexity](/wiki/Perplexity \"Perplexity\") on a given text corpus. Perplexity measures how well a model predicts the contents of a dataset; the higher the likelihood the model assigns to the dataset, the lower the perplexity. In mathematical terms, perplexity is the exponential of the average negative log likelihood per token. log ( Perplexity ) = − 1 N ∑ i = 1 N log ( Pr ( token i ∣ context for token i ) ) {\\displaystyle \\log({\\text{Perplexity}})=-{\\frac {1}{N}}\\sum _{i=1}^{N}\\log(\\Pr({\\text{token}}_{i}\\mid {\\text{context for token}}_{i}))}",
    "metadata": {
      "H1": "Large language model",
      "H2": "Evaluation",
      "H3": "Perplexity",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 721
  },
  {
    "page_content": "Here, N {\\displaystyle N} is the number of tokens in the text corpus, and \"context for token i {\\displaystyle i} \" depends on the specific type of LLM. If the LLM is autoregressive, then \"context for token i {\\displaystyle i} \" is the segment of text appearing before token i {\\displaystyle i} . If the LLM is masked, then \"context for token i {\\displaystyle i} \" is the segment of text surrounding token i {\\displaystyle i} . Because language models may [overfit](/wiki/Overfit \"Overfit\") to training data, models are usually evaluated by their perplexity on a [test set](/wiki/Test_set \"Test set\").[49] This evaluation is potentially problematic for larger models which, as they are trained on increasingly large corpora of text, are increasingly likely to inadvertently include portions of any given test set.[115] #### Measures [[edit](/w/index.php?title=Large_language_model&action=edit&section=29 \"Edit section: Measures\")]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Evaluation",
      "H3": "Perplexity",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 929
  },
  {
    "page_content": "#### Measures [[edit](/w/index.php?title=Large_language_model&action=edit&section=29 \"Edit section: Measures\")] In [information theory](/wiki/Information_theory \"Information theory\"), the concept of [entropy](/wiki/Entropy_\\(information_theory\\) \"Entropy \\(information theory\\)\") is intricately linked to perplexity, a relationship notably established by [Claude Shannon](/wiki/Claude_Shannon \"Claude Shannon\").[116] This relationship is mathematically expressed as Entropy = log 2 ( Perplexity ) {\\displaystyle {\\text{Entropy}}=\\log _{2}({\\text{Perplexity}})} . Entropy, in this context, is commonly quantified in terms of bits per word (BPW) or bits per character (BPC), which hinges on whether the language model utilizes word-based or character-based tokenization.",
    "metadata": {
      "H1": "Large language model",
      "H2": "Evaluation",
      "H3": "Perplexity",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 768
  },
  {
    "page_content": "Notably, in the case of larger language models that predominantly employ sub-word tokenization, bits per token (BPT) emerges as a seemingly more appropriate measure. However, due to the variance in tokenization methods across different Large Language Models (LLMs), BPT does not serve as a reliable metric for comparative analysis among diverse models. To convert BPT into BPW, one can multiply it by the average number of tokens per word. In the evaluation and comparison of language models, [cross-entropy](/wiki/Cross-entropy \"Cross-entropy\") is generally the preferred metric over entropy. The underlying principle is that a lower BPW is indicative of a model's enhanced capability for compression. This, in turn, reflects the model's proficiency in making accurate predictions.",
    "metadata": {
      "H1": "Large language model",
      "H2": "Evaluation",
      "H3": "Perplexity",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 782
  },
  {
    "page_content": "Due to their ability to accurately predict the next token, LLMs are highly capable in [lossless compression](/wiki/Lossless_compression \"Lossless compression\"). A 2023 study by DeepMind showed that the model [Chinchilla](/wiki/Chinchilla_\\(language_model\\) \"Chinchilla \\(language model\\)\"), despite being trained primarily on text, was able to compress [ImageNet](/wiki/ImageNet \"ImageNet\") to 43% of its size, beating PNG with 58%.[117]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Evaluation",
      "H3": "Perplexity",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 437
  },
  {
    "page_content": "### Benchmarks [[edit](/w/index.php?title=Large_language_model&action=edit&section=30 \"Edit section: Benchmarks\")] [Benchmarks](/wiki/Language_model_benchmark \"Language model benchmark\") are used to evaluate LLM performance on specific tasks. Tests evaluate capabilities such as general knowledge, bias, [commonsense reasoning](/wiki/Commonsense_reasoning \"Commonsense reasoning\"), question answering, and mathematical problem-solving. Composite benchmarks examine multiple capabilities. Results are often sensitive to the prompting method.[118][119]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Evaluation",
      "H3": "Benchmarks",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 550
  },
  {
    "page_content": "A question answering benchmark is termed \"open book\" if the model's prompt includes text from which the expected answer can be derived (for example, the previous question could be combined with text that includes the sentence \"The Sharks have advanced to the Stanley Cup finals once, losing to the Pittsburgh Penguins in 2016.\"[120]). Otherwise, the task is considered \"closed book\", and the model must draw solely on its training.[121] Examples include GLUE, SuperGLUE, [MMLU](/wiki/MMLU \"MMLU\"), BIG-bench, HELM, and [HLE (Humanity's Last Exam)](/wiki/HLE_\\(Humanity%27s_Last_Exam\\) \"HLE \\(Humanity's Last Exam\\)\").[116][121] LLM bias may be assessed through benchmarks such as CrowS-Pairs (Crowdsourced Stereotype Pairs),[122] Stereo Set,[123] and Parity Benchmark.[124]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Evaluation",
      "H3": "Benchmarks",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 773
  },
  {
    "page_content": "LLM bias may be assessed through benchmarks such as CrowS-Pairs (Crowdsourced Stereotype Pairs),[122] Stereo Set,[123] and Parity Benchmark.[124] Fact-checking and misinformation detection benchmarks are available. A 2023 study compared the fact-checking accuracy of LLMs including ChatGPT 3.5 and 4.0, Bard, and Bing AI against independent fact-checkers such as PolitiFact and Snopes. The results demonstrated moderate proficiency, with GPT-4 achieving the highest accuracy at 71%, lagging behind human fact-checkers.[125] An earlier standard tested using a portion of the evaluation dataset. It became more common to evaluate a pre-trained model directly through prompting techniques. Researchers vary in how they formulate prompts for particular tasks, particularly with respect to the number of correct examples attached to the prompt (i.e. the value of _n_ in _n_ -shot prompting). #### Datasets [[edit](/w/index.php?title=Large_language_model&action=edit&section=31 \"Edit section: Datasets\")]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Evaluation",
      "H3": "Benchmarks",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 998
  },
  {
    "page_content": "#### Datasets [[edit](/w/index.php?title=Large_language_model&action=edit&section=31 \"Edit section: Datasets\")] Typical datasets consist of pairs of questions and correct answers, for example, (\"Have the San Jose Sharks won the Stanley Cup?\", \"No\").[120] Some examples of commonly used question answering datasets include TruthfulQA, Web Questions, TriviaQA, and SQuAD.[121] Evaluation datasets may also take the form of text completion, having the model select the most likely word or sentence to complete a prompt, for example: \"Alice was friends with Bob. Alice went to visit her friend, __\".[115] Datasets are of varying quality and may contain questions that are mislabeled, ambiguous, unanswerable, or otherwise of low-quality.[126] #### Adversarial evaluations [[edit](/w/index.php?title=Large_language_model&action=edit&section=32 \"Edit section: Adversarial evaluations\")]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Evaluation",
      "H3": "Benchmarks",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 880
  },
  {
    "page_content": "#### Adversarial evaluations [[edit](/w/index.php?title=Large_language_model&action=edit&section=32 \"Edit section: Adversarial evaluations\")] LLMs' rapid improvement regularly renders benchmarks obsolete, with the models exceeding the performance of human annotators.[127] In addition, \"shortcut learning\" allows AIs to \"cheat\" on multiple-choice tests by using statistical correlations in superficial test question wording to guess the correct responses, without considering the specific question.[102]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Evaluation",
      "H3": "Benchmarks",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 503
  },
  {
    "page_content": "Some datasets are adversarial, focusing on problems that confound LLMs. One example is the TruthfulQA dataset, a question answering dataset consisting of 817 questions that stump LLMs by mimicking falsehoods to which they were exposed during training. For example, an LLM may answer \"No\" to the question \"Can you teach an old dog new tricks?\" because of its exposure to the English idiom _[you can't teach an old dog new tricks](https://en.wiktionary.org/wiki/you_can%27t_teach_an_old_dog_new_tricks \"wikt:you can't teach an old dog new tricks\")_ , even though this is not literally true.[128] Another example of an adversarial evaluation dataset is Swag and its successor, HellaSwag, collections of problems in which one of multiple options must be selected to complete a text passage. The incorrect completions were generated by sampling from a language model. The resulting problems are trivial for humans but defeated LLMs. Sample questions:",
    "metadata": {
      "H1": "Large language model",
      "H2": "Evaluation",
      "H3": "Benchmarks",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 945
  },
  {
    "page_content": "> We see a fitness center sign. We then see a man talking to the camera and sitting and laying on a exercise ball. The man... > 1. demonstrates how to increase efficient exercise work by running up and down balls. > 2. moves all his arms and legs and builds up a lot of muscle. > 3. then plays the ball and we see a graphics and hedge trimming demonstration. > 4. performs sit ups while on the ball and talking.[129] [BERT](/wiki/BERT_\\(language_model\\) \"BERT \\(language model\\)\") selects b) as the most likely completion, though the correct answer is d).[129]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Evaluation",
      "H3": "Benchmarks",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 560
  },
  {
    "page_content": "## Wider impact [[edit](/w/index.php?title=Large_language_model&action=edit&section=33 \"Edit section: Wider impact\")] In 2023, _[Nature Biomedical Engineering](/wiki/Nature_Biomedical_Engineering \"Nature Biomedical Engineering\")_ wrote that \"it is no longer possible to accurately distinguish\" human-written text from text created by large language models, and that \"It is all but certain that general-purpose large language models will rapidly proliferate... It is a rather safe bet that they will change many industries over time.\"[130] [Goldman Sachs](/wiki/Goldman_Sachs \"Goldman Sachs\") suggested in 2023 that generative language AI could increase global GDP by 7% in the next ten years, and could expose to automation 300 million jobs globally.[131][132] Brinkmann et al. (2023)[133] also argue that LLMs are transforming processes of [cultural evolution](/wiki/Cultural_evolution \"Cultural evolution\") by shaping processes of variation, transmission, and selection.",
    "metadata": {
      "H1": "Large language model",
      "H2": "Wider impact",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 972
  },
  {
    "page_content": "### Memorization and copyright [[edit](/w/index.php?title=Large_language_model&action=edit&section=34 \"Edit section: Memorization and copyright\")] Further information: [Artificial intelligence and copyright](/wiki/Artificial_intelligence_and_copyright \"Artificial intelligence and copyright\") Memorization is an emergent behavior in LLMs in which long strings of text are occasionally output verbatim from training data, contrary to typical behavior of traditional artificial neural nets. Evaluations of controlled LLM output measure the amount memorized from training data (focused on GPT-2-series models) as variously over 1% for exact duplicates[134] or up to about 7%.[135] A 2023 study showed that when ChatGPT 3.5 turbo was prompted to repeat the same word indefinitely, after a few hundreds of repetitions, it would start outputting excerpts from its training data.[136]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Wider impact",
      "H3": "Memorization and copyright",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 877
  },
  {
    "page_content": "### Security [[edit](/w/index.php?title=Large_language_model&action=edit&section=35 \"Edit section: Security\")] Some commenters expressed concern over accidental or deliberate creation of misinformation, or other forms of misuse.[137] For example, the availability of large language models could reduce the skill-level required to commit bioterrorism; biosecurity researcher Kevin Esvelt has suggested that LLM creators should exclude from their training data papers on creating or enhancing pathogens.[138] The potential presence of \"sleeper agents\" within LLMs is another emerging security concern. These are hidden functionalities built into the model that remain dormant until triggered by a specific event or condition. Upon activation, the LLM deviates from its expected behavior to make insecure actions.[139]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Wider impact",
      "H3": "Security",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 815
  },
  {
    "page_content": "LLM applications accessible to the public, like ChatGPT or Claude, typically incorporate safety measures designed to filter out harmful content. However, implementing these controls effectively has proven challenging. For instance, a 2023 study[140] proposed a method for circumventing LLM safety systems. In 2025, The American Sunlight Project, a non-profit, published a study[141] showing evidence that the so-called [Pravda network](/wiki/Portal_Kombat \"Portal Kombat\"), a pro-Russia propaganda aggregator, was strategically placing web content through mass publication and duplication with the intention of biasing LLM outputs",
    "metadata": {
      "H1": "Large language model",
      "H2": "Wider impact",
      "H3": "Security",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 630
  },
  {
    "page_content": ". The American Sunlight Project coined this technique \"LLM grooming\", and pointed to it as a new tool of weaponizing AI to spread disinformation and harmful content.[141][142] Similarly, [Yongge Wang](/wiki/Yongge_Wang \"Yongge Wang\")[143] illustrated in 2024 how a potential criminal could potentially bypass ChatGPT 4o's safety controls to obtain information on establishing a drug trafficking operation. External filters, circuit breakers and overrides have been posed as solutions.[_[citation needed](/wiki/Wikipedia:Citation_needed \"Wikipedia:Citation needed\")_]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Wider impact",
      "H3": "Security",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 566
  },
  {
    "page_content": "### Algorithmic bias [[edit](/w/index.php?title=Large_language_model&action=edit&section=36 \"Edit section: Algorithmic bias\")] Main article: [Algorithmic bias](/wiki/Algorithmic_bias \"Algorithmic bias\") While LLMs have shown remarkable capabilities in generating human-like text, they are susceptible to inheriting and amplifying biases present in their training data. This can manifest in skewed representations or unfair treatment of different demographics, such as those based on race, gender, language, and cultural groups.[144] Since English data is overrepresented in current large language models' training data, it may also downplay non-English views.[145] #### Stereotyping [[edit](/w/index.php?title=Large_language_model&action=edit&section=37 \"Edit section: Stereotyping\")]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Wider impact",
      "H3": "Algorithmic bias",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 784
  },
  {
    "page_content": "#### Stereotyping [[edit](/w/index.php?title=Large_language_model&action=edit&section=37 \"Edit section: Stereotyping\")] AI models can reinforce a wide range of stereotypes, including those based on gender, ethnicity, age, nationality, religion, or occupation. This can lead to outputs that homogenize, or unfairly generalize or caricature groups of people, sometimes in harmful or derogatory ways.[146][147] Notably, gender bias refers to the tendency of these models to produce outputs that are unfairly prejudiced towards one gender over another. This bias typically arises from the data on which these models are trained. Large language models often assign roles and characteristics based on traditional gender norms.[144] For example, it might associate nurses or secretaries predominantly with women and engineers or CEOs with men.[148] #### Selection bias [[edit](/w/index.php?title=Large_language_model&action=edit&section=38 \"Edit section: Selection bias\")]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Wider impact",
      "H3": "Algorithmic bias",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 965
  },
  {
    "page_content": "#### Selection bias [[edit](/w/index.php?title=Large_language_model&action=edit&section=38 \"Edit section: Selection bias\")] Selection bias refers the inherent tendency of large language models to favor certain option identifiers irrespective of the actual content of the options. This bias primarily stems from token bias—that is, the model assigns a higher a priori probability to specific answer tokens (such as “A”) when generating responses. As a result, when the ordering of options is altered (for example, by systematically moving the correct answer to different positions), the model’s performance can fluctuate significantly. This phenomenon undermines the reliability of large language models in multiple-choice settings.[149][150] #### Political bias [[edit](/w/index.php?title=Large_language_model&action=edit&section=39 \"Edit section: Political bias\")]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Wider impact",
      "H3": "Algorithmic bias",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 865
  },
  {
    "page_content": "#### Political bias [[edit](/w/index.php?title=Large_language_model&action=edit&section=39 \"Edit section: Political bias\")] Political bias refers to the tendency of algorithms to systematically favor certain political viewpoints, ideologies, or outcomes over others. Language models may also exhibit political biases. Since the training data includes a wide range of political opinions and coverage, the models might generate responses that lean towards particular political ideologies or viewpoints, depending on the prevalence of those views in the data.[151]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Wider impact",
      "H3": "Algorithmic bias",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 561
  },
  {
    "page_content": "### Energy demands [[edit](/w/index.php?title=Large_language_model&action=edit&section=40 \"Edit section: Energy demands\")]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Wider impact",
      "H3": "Energy demands",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 122
  },
  {
    "page_content": "The energy demands of LLMs have grown along with their size and capabilities. [Data centers](/wiki/Data_center \"Data center\") that enable LLM training require substantial amounts of electricity. Much of that electricity is generated by non-renewable resources that create greenhouse gases and contribute to [climate change](/wiki/Climate_change \"Climate change\").[152] [Nuclear power](/wiki/Nuclear_power \"Nuclear power\") and [geothermal energy](/wiki/Geothermal_energy \"Geothermal energy\") are two options tech companies are exploring to meet the sizable energy demands of LLM training.[153] The significant expense of investing in geothermal solutions has led to major shale producers like [Chevron](/wiki/Chevron_Corporation \"Chevron Corporation\") and [Exxon Mobil](/wiki/ExxonMobil \"ExxonMobil\") advocating for tech companies to use electricity produced via [natural gas](/wiki/Natural_gas \"Natural gas\") to fuel their large energy demands.[154]",
    "metadata": {
      "H1": "Large language model",
      "H2": "Wider impact",
      "H3": "Energy demands",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 949
  },
  {
    "page_content": "## See also [[edit](/w/index.php?title=Large_language_model&action=edit&section=41 \"Edit section: See also\")] * [Foundation models](/wiki/Foundation_models \"Foundation models\") * [List of large language models](/wiki/List_of_large_language_models \"List of large language models\") * [List of chatbots](/wiki/List_of_chatbots \"List of chatbots\") * [Language model benchmark](/wiki/Language_model_benchmark \"Language model benchmark\") * [Reinforcement learning](/wiki/Reinforcement_learning \"Reinforcement learning\") * [Small language model](/wiki/Small_language_model \"Small language model\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "See also",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 589
  },
  {
    "page_content": "## References [[edit](/w/index.php?title=Large_language_model&action=edit&section=42 \"Edit section: References\")]",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 113
  },
  {
    "page_content": "1. **^** Brown, Tom B.; Mann, Benjamin; Ryder, Nick; Subbiah, Melanie; Kaplan, Jared; Dhariwal, Prafulla; Neelakantan, Arvind; Shyam, Pranav; Sastry, Girish; Askell, Amanda; Agarwal, Sandhini; Herbert-Voss, Ariel; Krueger, Gretchen; Henighan, Tom; Child, Rewon; Ramesh, Aditya; Ziegler, Daniel M.; Wu, Jeffrey; Winter, Clemens; Hesse, Christopher; Chen, Mark; Sigler, Eric; Litwin, Mateusz; Gray, Scott; Chess, Benjamin; Clark, Jack; Berner, Christopher; McCandlish, Sam; Radford, Alec; Sutskever, Ilya; Amodei, Dario (Dec 2020). Larochelle, H.; Ranzato, M.; Hadsell, R.; Balcan, M.F.; Lin, H. (eds.). [\"Language Models are Few-Shot Learners\"](https://proceedings.neurips.cc/paper/2020/file/1457c0d6bfcb4967418bfb8ac142f64a-Paper.pdf) (PDF). _Advances in Neural Information Processing Systems_. **33**. Curran Associates, Inc.: 1877–1901\\",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 838
  },
  {
    "page_content": ". _Advances in Neural Information Processing Systems_. **33**. Curran Associates, Inc.: 1877–1901\\. [Archived](https://web.archive.org/web/20231117204007/https://proceedings.neurips.cc/paper/2020/file/1457c0d6bfcb4967418bfb8ac142f64a-Paper.pdf) (PDF) from the original on 2023-11-17. Retrieved 2023-03-14.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 305
  },
  {
    "page_content": "2. **^** Fathallah, Nadeen; Das, Arunav; De Giorgis, Stefano; Poltronieri, Andrea; Haase, Peter; Kovriguina, Liubov (2024-05-26). [_NeOn-GPT: A Large Language Model-Powered Pipeline for Ontology Learning_](https://2024.eswc-conferences.org/wp-content/uploads/2024/05/77770034.pdf) (PDF). Extended Semantic Web Conference 2024. Hersonissos, Greece.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 347
  },
  {
    "page_content": "3. **^** [Manning, Christopher D.](/wiki/Christopher_D._Manning \"Christopher D. Manning\") (2022). [\"Human Language Understanding & Reasoning\"](https://www.amacad.org/publication/human-language-understanding-reasoning). _Daedalus_. **151** (2): 127–138\\. [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1162/daed_a_01905](https://doi.org/10.1162%2Fdaed_a_01905). [S2CID](/wiki/S2CID_\\(identifier\\) \"S2CID \\(identifier\\)\") [248377870](https://api.semanticscholar.org/CorpusID:248377870). [Archived](https://web.archive.org/web/20231117205531/https://www.amacad.org/publication/human-language-understanding-reasoning) from the original on 2023-11-17. Retrieved 2023-03-09.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 678
  },
  {
    "page_content": "4. **^** Goodman, Joshua (2001-08-09), _A Bit of Progress in Language Modeling_ , [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[cs/0108005](https://arxiv.org/abs/cs/0108005), [Bibcode](/wiki/Bibcode_\\(identifier\\) \"Bibcode \\(identifier\\)\"):[2001cs...8005G](https://ui.adsabs.harvard.edu/abs/2001cs...8005G) 5. **^** Kilgarriff, Adam; Grefenstette, Gregory (September 2003). [\"Introduction to the Special Issue on the Web as Corpus\"](https://direct.mit.edu/coli/article/29/3/333-347/1816). _Computational Linguistics_. **29** (3): 333–347\\. [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1162/089120103322711569](https://doi.org/10.1162%2F089120103322711569). [ISSN](/wiki/ISSN_\\(identifier\\) \"ISSN \\(identifier\\)\") [0891-2017](https://search.worldcat.org/issn/0891-2017).",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 795
  },
  {
    "page_content": "6. **^** Banko, Michele; Brill, Eric (2001). [\"Scaling to very very large corpora for natural language disambiguation\"](https://dx.doi.org/10.3115/1073012.1073017). _Proceedings of the 39th Annual Meeting on Association for Computational Linguistics - ACL '01_. Morristown, NJ, USA: Association for Computational Linguistics: 26–33\\. [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.3115/1073012.1073017](https://doi.org/10.3115%2F1073012.1073017).",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 456
  },
  {
    "page_content": "7. **^** Resnik, Philip; Smith, Noah A. (September 2003). [\"The Web as a Parallel Corpus\"](https://direct.mit.edu/coli/article/29/3/349-380/1809). _Computational Linguistics_. **29** (3): 349–380\\. [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1162/089120103322711578](https://doi.org/10.1162%2F089120103322711578). [ISSN](/wiki/ISSN_\\(identifier\\) \"ISSN \\(identifier\\)\") [0891-2017](https://search.worldcat.org/issn/0891-2017). [Archived](https://web.archive.org/web/20240607172811/https://direct.mit.edu/coli/article/29/3/349-380/1809) from the original on 2024-06-07. Retrieved 2024-06-07.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 603
  },
  {
    "page_content": "8. **^** Chen, Leiyu; Li, Shaobo; Bai, Qiang; Yang, Jing; Jiang, Sanlong; Miao, Yanming (2021). [\"Review of Image Classification Algorithms Based on Convolutional Neural Networks\"](https://doi.org/10.3390%2Frs13224712). _Remote Sensing_. **13** (22): 4712. [Bibcode](/wiki/Bibcode_\\(identifier\\) \"Bibcode \\(identifier\\)\"):[2021RemS...13.4712C](https://ui.adsabs.harvard.edu/abs/2021RemS...13.4712C). [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.3390/rs13224712](https://doi.org/10.3390%2Frs13224712).",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 512
  },
  {
    "page_content": "9. **^** [Vaswani, Ashish](/wiki/Ashish_Vaswani \"Ashish Vaswani\"); Shazeer, Noam; Parmar, Niki; Uszkoreit, Jakob; Jones, Llion; [Gomez, Aidan N](/wiki/Aidan_Gomez \"Aidan Gomez\"); Kaiser, Łukasz; Polosukhin, Illia (2017). [\"Attention is All you Need\"](https://proceedings.neurips.cc/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf) (PDF). _Advances in Neural Information Processing Systems_. **30**. Curran Associates, Inc. [Archived](https://web.archive.org/web/20240221141113/https://proceedings.neurips.cc/paper/2017/file/3f5ee243547dee91fbd053c1c4a845aa-Paper.pdf) (PDF) from the original on 2024-02-21. Retrieved 2024-01-21. 10. **^** Bahdanau, Dzmitry; Cho, Kyunghyun; Bengio, Yoshua (2014). \"Neural Machine Translation by Jointly Learning to Align and Translate\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[1409.0473](https://arxiv.org/abs/1409.0473) [[cs.CL](https://arxiv.org/archive/cs.CL)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 928
  },
  {
    "page_content": "11. **^** Rogers, Anna; Kovaleva, Olga; Rumshisky, Anna (2020). [\"A Primer in BERTology: What We Know About How BERT Works\"](https://aclanthology.org/2020.tacl-1.54). _Transactions of the Association for Computational Linguistics_. **8** : 842–866\\. [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2002.12327](https://arxiv.org/abs/2002.12327). [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1162/tacl_a_00349](https://doi.org/10.1162%2Ftacl_a_00349). [S2CID](/wiki/S2CID_\\(identifier\\) \"S2CID \\(identifier\\)\") [211532403](https://api.semanticscholar.org/CorpusID:211532403). [Archived](https://web.archive.org/web/20220403103310/https://aclanthology.org/2020.tacl-1.54/) from the original on 2022-04-03. Retrieved 2024-01-21.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 748
  },
  {
    "page_content": "12. ^ Jump up to: _**a**_ _**b**_ Movva, Rajiv; Balachandar, Sidhika; Peng, Kenny; Agostini, Gabriel; Garg, Nikhil; Pierson, Emma (2024). [\"Topics, Authors, and Institutions in Large Language Model Research: Trends from 17K arXiv Papers\"](https://aclanthology.org/2024.naacl-long.67). _Proceedings of the 2024 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies (Volume 1: Long Papers)_. pp. 1223–1243\\. [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2307.10700](https://arxiv.org/abs/2307.10700). [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.18653/v1/2024.naacl-long.67](https://doi.org/10.18653%2Fv1%2F2024.naacl-long.67). Retrieved 2024-12-08.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 738
  },
  {
    "page_content": "13. **^** Hern, Alex (14 February 2019). [\"New AI fake text generator may be too dangerous to release, say creators\"](https://www.theguardian.com/technology/2019/feb/14/elon-musk-backed-ai-writes-convincing-news-fiction). _[The Guardian](/wiki/The_Guardian \"The Guardian\")_. [Archived](https://web.archive.org/web/20190214173112/https://www.theguardian.com/technology/2019/feb/14/elon-musk-backed-ai-writes-convincing-news-fiction) from the original on 14 February 2019. Retrieved 20 January 2024.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 497
  },
  {
    "page_content": "14. **^** [\"ChatGPT a year on: 3 ways the AI chatbot has completely changed the world in 12 months\"](https://www.euronews.com/next/2023/11/30/chatgpt-a-year-on-3-ways-the-ai-chatbot-has-completely-changed-the-world-in-12-months). [Euronews](/wiki/Euronews \"Euronews\"). November 30, 2023. [Archived](https://web.archive.org/web/20240114025250/https://www.euronews.com/next/2023/11/30/chatgpt-a-year-on-3-ways-the-ai-chatbot-has-completely-changed-the-world-in-12-months) from the original on January 14, 2024. Retrieved January 20, 2024.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 536
  },
  {
    "page_content": "15. **^** Heaven, Will (March 14, 2023). [\"GPT-4 is bigger and better than ChatGPT—but OpenAI won't say why\"](https://www.technologyreview.com/2023/03/14/1069823/gpt-4-is-bigger-and-better-chatgpt-openai/). [MIT Technology Review](/wiki/MIT_Technology_Review \"MIT Technology Review\"). [Archived](https://web.archive.org/web/20230317224201/https://www.technologyreview.com/2023/03/14/1069823/gpt-4-is-bigger-and-better-chatgpt-openai/) from the original on March 17, 2023. Retrieved January 20, 2024. 16. **^** Metz, Cade (September 12, 2024). [\"OpenAI Unveils New ChatGPT That Can Reason Through Math and Science\"](https://www.nytimes.com/2024/09/12/technology/openai-chatgpt-math.html). _[The New York Times](/wiki/The_New_York_Times \"The New York Times\")_. Retrieved September 12, 2024.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 788
  },
  {
    "page_content": "17. **^** [\"Parameters in notable artificial intelligence systems\"](https://ourworldindata.org/grapher/artificial-intelligence-parameter-count?time=2017-09-05..latest). _ourworldindata.org_. November 30, 2023. Retrieved January 20, 2024. 18. **^** Sharma, Shubham (2025-01-20). [\"Open-source DeepSeek-R1 uses pure reinforcement learning to match OpenAI o1 — at 95% less cost\"](https://venturebeat.com/ai/open-source-deepseek-r1-uses-pure-reinforcement-learning-to-match-openai-o1-at-95-less-cost/). _VentureBeat_. Retrieved 2025-01-26. 19. **^** Zia, Dr Tehseen (2024-01-08). [\"Unveiling of Large Multimodal Models: Shaping the Landscape of Language Models in 2024\"](https://www.unite.ai/unveiling-of-large-multimodal-models-shaping-the-landscape-of-language-models-in-2024/). _Unite.AI_. Retrieved 2024-12-28.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 810
  },
  {
    "page_content": "20. **^** Peng, Bo; et al. (2023). \"RWKV: Reinventing RNNS for the Transformer Era\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2305.13048](https://arxiv.org/abs/2305.13048) [[cs.CL](https://arxiv.org/archive/cs.CL)]. 21. **^** Merritt, Rick (2022-03-25). [\"What Is a Transformer Model?\"](https://blogs.nvidia.com/blog/2022/03/25/what-is-a-transformer-model/). _NVIDIA Blog_. [Archived](https://web.archive.org/web/20231117203924/https://blogs.nvidia.com/blog/what-is-a-transformer-model/) from the original on 2023-11-17. Retrieved 2023-07-25. 22. **^** Gu, Albert; Dao, Tri (2023-12-01), _Mamba: Linear-Time Sequence Modeling with Selective State Spaces_ , [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2312.00752](https://arxiv.org/abs/2312.00752)",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 781
  },
  {
    "page_content": "23. **^** Kaushal, Ayush; Mahowald, Kyle (2022-06-06), _What do tokens know about their characters and how do they know it?_ , [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2206.02608](https://arxiv.org/abs/2206.02608) 24. **^** Yennie Jun (2023-05-03). [\"All languages are NOT created (tokenized) equal\"](https://web.archive.org/web/20230817165705/https://blog.yenniejun.com/p/all-languages-are-not-created-tokenized). _Language models cost much more in some languages than others_. Archived from [the original](https://blog.yenniejun.com/p/all-languages-are-not-created-tokenized) on 2023-08-17. Retrieved 2023-08-17. \"In other words, to express the same sentiment, some languages require up to 10 times more tokens.\"",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 733
  },
  {
    "page_content": "25. ^ Jump up to: _**a**_ _**b**_ Petrov, Aleksandar; Malfa, Emanuele La; Torr, Philip; Bibi, Adel (June 23, 2023). [\"Language Model Tokenizers Introduce Unfairness Between Languages\"](https://openreview.net/forum?id=Pj4YYuxTq9). _NeurIPS_. [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2305.15425](https://arxiv.org/abs/2305.15425). [Archived](https://web.archive.org/web/20231215212906/https://openreview.net/forum?id=Pj4YYuxTq9) from the original on December 15, 2023. Retrieved September 16, 2023 – via openreview.net. 26. **^** [\"OpenAI API\"](https://web.archive.org/web/20230423211308/https://platform.openai.com/tokenizer). _platform.openai.com_. Archived from [the original](https://platform.openai.com/) on April 23, 2023. Retrieved 2023-04-30.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 767
  },
  {
    "page_content": "27. ^ Jump up to: _**a**_ _**b**_ Paaß, Gerhard; Giesselbach, Sven (2022). \"Pre-trained Language Models\". _Foundation Models for Natural Language Processing_. Artificial Intelligence: Foundations, Theory, and Algorithms. pp. 19–78\\. [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1007/978-3-031-23190-2_2](https://doi.org/10.1007%2F978-3-031-23190-2_2). [ISBN](/wiki/ISBN_\\(identifier\\) \"ISBN \\(identifier\\)\") [9783031231902](/wiki/Special:BookSources/9783031231902 \"Special:BookSources/9783031231902\"). 28. **^** Lundberg, Scott (2023-12-12). [\"The Art of Prompt Design: Prompt Boundaries and Token Healing\"](https://towardsdatascience.com/the-art-of-prompt-design-prompt-boundaries-and-token-healing-3b2448b0be38). _Medium_. Retrieved 2024-08-05.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 758
  },
  {
    "page_content": "29. **^** Dodge, Jesse; Sap, Maarten; Marasović, Ana; Agnew, William; Ilharco, Gabriel; Groeneveld, Dirk; Mitchell, Margaret; Gardner, Matt (2021). \"Documenting Large Webtext Corpora: A Case Study on the Colossal Clean Crawled Corpus\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2104.08758](https://arxiv.org/abs/2104.08758) [[cs.CL](https://arxiv.org/archive/cs.CL)]. 30. **^** Lee, Katherine; Ippolito, Daphne; Nystrom, Andrew; Zhang, Chiyuan; Eck, Douglas; Callison-Burch, Chris; [Carlini, Nicholas](/wiki/Nicholas_Carlini \"Nicholas Carlini\") (May 2022). [\"Deduplicating Training Data Makes Language Models Better\"](https://aclanthology.org/2022.acl-long.577.pdf) (PDF). _Proceedings of the 60th Annual Meeting of the Association for Computational Linguistics_. 1: Long Papers: 8424–8445\\. [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.18653/v1/2022.acl-long.577](https://doi.org/10.18653%2Fv1%2F2022.acl-long.577).",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 946
  },
  {
    "page_content": "31. **^** Li, Yuanzhi; Bubeck, Sébastien; Eldan, Ronen; Del Giorno, Allie; Gunasekar, Suriya; Lee, Yin Tat (2023-09-11), _Textbooks Are All You Need II: phi-1.5 technical report_ , [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2309.05463](https://arxiv.org/abs/2309.05463) 32. **^** Lin, Zhenghao; Gou, Zhibin; Gong, Yeyun; Liu, Xiao; Shen, Yelong; Xu, Ruochen; Lin, Chen; Yang, Yujiu; Jiao, Jian (2024-04-11). \"Rho-1: Not All Tokens Are What You Need\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2404.07965](https://arxiv.org/abs/2404.07965) [[cs.CL](https://arxiv.org/archive/cs.CL)]. 33. **^** Brown, Tom B.; et al. (2020). \"Language Models are Few-Shot Learners\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2005.14165](https://arxiv.org/abs/2005.14165) [[cs.CL](https://arxiv.org/archive/cs.CL)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 848
  },
  {
    "page_content": "34. **^** Abdin, Marah; Jacobs, Sam Ade; Awan, Ammar Ahmad; Aneja, Jyoti; Awadallah, Ahmed; Awadalla, Hany; Bach, Nguyen; Bahree, Amit; Bakhtiari, Arash (2024-04-23). \"Phi-3 Technical Report: A Highly Capable Language Model Locally on Your Phone\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2404.14219](https://arxiv.org/abs/2404.14219) [[cs.CL](https://arxiv.org/archive/cs.CL)]. 35. **^** [\"Foundation Models And LLMs: 19 Real-World, Practical Use Cases\"](https://www.forbes.com/councils/forbestechcouncil/2025/02/05/foundation-models-and-llms-19-real-world-practical-use-cases/). _Forbes_. 2025-02-05. Retrieved 2025-05-26. 36. **^** [\"7 Steps to Mastering Large Language Model Fine-tuning\"](https://www.kdnuggets.com/7-steps-to-mastering-large-language-model-fine-tuning). _KDnuggets_. Retrieved 2025-05-26.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 828
  },
  {
    "page_content": "36. **^** [\"7 Steps to Mastering Large Language Model Fine-tuning\"](https://www.kdnuggets.com/7-steps-to-mastering-large-language-model-fine-tuning). _KDnuggets_. Retrieved 2025-05-26. 37. **^** Ouyang, Long; Wu, Jeff; Jiang, Xu; Almeida, Diogo; Wainwright, Carroll L.; Mishkin, Pamela; Zhang, Chong; Agarwal, Sandhini; Slama, Katarina; Ray, Alex; Schulman, John; Hilton, Jacob; Kelton, Fraser; Miller, Luke; Simens, Maddie; Askell, Amanda; Welinder, Peter; Christiano, Paul; Leike, Jan; Lowe, Ryan (2022). \"Training language models to follow instructions with human feedback\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2203.02155](https://arxiv.org/abs/2203.02155) [[cs.CL](https://arxiv.org/archive/cs.CL)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 727
  },
  {
    "page_content": "38. **^** Wang, Yizhong; Kordi, Yeganeh; Mishra, Swaroop; Liu, Alisa; Smith, Noah A.; Khashabi, Daniel; Hajishirzi, Hannaneh (2022). \"Self-Instruct: Aligning Language Model with Self Generated Instructions\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2212.10560](https://arxiv.org/abs/2212.10560) [[cs.CL](https://arxiv.org/archive/cs.CL)]. 39. **^** Shazeer, Noam; Mirhoseini, Azalia; Maziarz, Krzysztof; Davis, Andy; Le, Quoc; Hinton, Geoffrey; Dean, Jeff (2017-01-01). \"Outrageously Large Neural Networks: The Sparsely-Gated Mixture-of-Experts Layer\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[1701.06538](https://arxiv.org/abs/1701.06538) [[cs.LG](https://arxiv.org/archive/cs.LG)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 721
  },
  {
    "page_content": "40. **^** Lepikhin, Dmitry; Lee, HyoukJoong; Xu, Yuanzhong; Chen, Dehao; Firat, Orhan; Huang, Yanping; Krikun, Maxim; Shazeer, Noam; Chen, Zhifeng (2021-01-12). \"GShard: Scaling Giant Models with Conditional Computation and Automatic Sharding\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2006.16668](https://arxiv.org/abs/2006.16668) [[cs.CL](https://arxiv.org/archive/cs.CL)]. 41. **^** Dai, Andrew M; Du, Nan (December 9, 2021). [\"More Efficient In-Context Learning with GLaM\"](https://ai.googleblog.com/2021/12/more-efficient-in-context-learning-with.html). _ai.googleblog.com_. [Archived](https://web.archive.org/web/20230312072042/https://ai.googleblog.com/2021/12/more-efficient-in-context-learning-with.html) from the original on 2023-03-12. Retrieved 2023-03-09.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 787
  },
  {
    "page_content": "42. ^ Jump up to: _**a**_ _**b**_ _**c**_ Wei, Jason; Tay, Yi; Bommasani, Rishi; Raffel, Colin; Zoph, Barret; Borgeaud, Sebastian; Yogatama, Dani; Bosma, Maarten; Zhou, Denny; Metzler, Donald; Chi, Ed H.; Hashimoto, Tatsunori; Vinyals, Oriol; Liang, Percy; Dean, Jeff; Fedus, William (31 August 2022). [\"Emergent Abilities of Large Language Models\"](https://openreview.net/forum?id=yzkSU5zdwD). _Transactions on Machine Learning Research_. [ISSN](/wiki/ISSN_\\(identifier\\) \"ISSN \\(identifier\\)\") [2835-8856](https://search.worldcat.org/issn/2835-8856). [Archived](https://web.archive.org/web/20230322210052/https://openreview.net/forum?id=yzkSU5zdwD) from the original on 22 March 2023. Retrieved 19 March 2023. 43. **^** Allamar, Jay. [\"Illustrated transformer\"](https://jalammar.github.io/illustrated-transformer/). [Archived](https://web.archive.org/web/20230725230033/http://jalammar.github.io/illustrated-transformer/) from the original on 2023-07-25. Retrieved 2023-07-29.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 978
  },
  {
    "page_content": "44. **^** Allamar, Jay. [\"The Illustrated GPT-2 (Visualizing Transformer Language Models)\"](https://jalammar.github.io/illustrated-gpt2/). Retrieved 2023-08-01. 45. **^** [\"Our next-generation model: Gemini 1.5\"](https://blog.google/technology/ai/google-gemini-next-generation-model-february-2024/#context-window). _Google_. 15 February 2024. [Archived](https://web.archive.org/web/20240218141522/https://blog.google/technology/ai/google-gemini-next-generation-model-february-2024/#context-window) from the original on 18 February 2024. Retrieved 18 February 2024. 46. **^** [\"Long context prompting for Claude 2.1\"](https://www.anthropic.com/news/claude-2-1-prompting). December 6, 2023. [Archived](https://web.archive.org/web/20240827053830/https://www.anthropic.com/news/claude-2-1-prompting) from the original on August 27, 2024. Retrieved January 20, 2024.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 861
  },
  {
    "page_content": "47. **^** [\"Rate limits\"](https://platform.openai.com/docs/guides/rate-limits). _openai.com_. [Archived](https://web.archive.org/web/20240202003219/https://platform.openai.com/docs/guides/rate-limits) from the original on February 2, 2024. Retrieved January 20, 2024.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 267
  },
  {
    "page_content": "48. **^** Zaib, Munazza; Sheng, Quan Z.; Emma Zhang, Wei (4 February 2020). [\"A Short Survey of Pre-trained Language Models for Conversational AI-A New Age in NLP\"](https://www.researchgate.net/publication/338931711). _Proceedings of the Australasian Computer Science Week Multiconference_. pp. 1–4\\. [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2104.10810](https://arxiv.org/abs/2104.10810). [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1145/3373017.3373028](https://doi.org/10.1145%2F3373017.3373028). [ISBN](/wiki/ISBN_\\(identifier\\) \"ISBN \\(identifier\\)\") [9781450376976](/wiki/Special:BookSources/9781450376976 \"Special:BookSources/9781450376976\"). [S2CID](/wiki/S2CID_\\(identifier\\) \"S2CID \\(identifier\\)\") [211040895](https://api.semanticscholar.org/CorpusID:211040895).",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 804
  },
  {
    "page_content": "49. ^ Jump up to: _**a**_ _**b**_ _**c**_ Jurafsky, Dan; Martin, James H. (7 January 2023). [_Speech and Language Processing_](https://web.stanford.edu/~jurafsky/slp3/ed3book_jan72023.pdf) (PDF) (3rd edition draft ed.). [Archived](https://web.archive.org/web/20230323210221/https://web.stanford.edu/~jurafsky/slp3/ed3book_jan72023.pdf) (PDF) from the original on 23 March 2023. Retrieved 24 May 2022. 50. **^** [\"From bare metal to a 70B model: infrastructure set-up and scripts\"](https://imbue.com/research/70b-infrastructure/). _imbue.com_. [Archived](https://web.archive.org/web/20240726203419/https://imbue.com/research/70b-infrastructure/) from the original on 2024-07-26. Retrieved 2024-07-24.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 699
  },
  {
    "page_content": "51. **^** [\"metaseq/projects/OPT/chronicles at main · facebookresearch/metaseq\"](https://github.com/facebookresearch/metaseq/tree/main/projects/OPT/chronicles). _GitHub_. [Archived](https://web.archive.org/web/20240124035658/https://github.com/facebookresearch/metaseq/tree/main/projects/OPT/chronicles) from the original on 2024-01-24. Retrieved 2024-07-24. 52. **^** Albrecht, Josh (2024-07-23). [\"State of the Art: Training >70B LLMs on 10,000 H100 clusters\"](https://www.latent.space/p/llm-training-2024). _www.latent.space_. Retrieved 2024-07-24. 53. **^** Maslej, Nestor; Fattorini, Loredana; Brynjolfsson, Erik; Etchemendy, John; Ligett, Katrina; Lyons, Terah; Manyika, James; Ngo, Helen; Niebles, Juan Carlos (2023-10-05), _Artificial Intelligence Index Report 2023_ , [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2310.03715](https://arxiv.org/abs/2310.03715)",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 882
  },
  {
    "page_content": "54. ^ Jump up to: _**a**_ _**b**_ Section 2.1 and Table 1, Kaplan, Jared; McCandlish, Sam; Henighan, Tom; Brown, Tom B.; Chess, Benjamin; Child, Rewon; Gray, Scott; Radford, Alec; Wu, Jeffrey; Amodei, Dario (2020). \"Scaling Laws for Neural Language Models\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2001.08361](https://arxiv.org/abs/2001.08361) [[cs.LG](https://arxiv.org/archive/cs.LG)]. 55. **^** Dickson, Ben (2025-04-02). [\"The tool integration problem that's holding back enterprise AI (and how CoTools solves it)\"](https://venturebeat.com/ai/the-tool-integration-problem-thats-holding-back-enterprise-ai-and-how-cotools-solves-it/). _VentureBeat_. Retrieved 2025-05-26.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 694
  },
  {
    "page_content": "56. **^** Liang, Yaobo; Wu, Chenfei; Song, Ting; Wu, Wenshan; Xia, Yan; Liu, Yu; Ou, Yang; Lu, Shuai; Ji, Lei; Mao, Shaoguang; Wang, Yun; Shou, Linjun; Gong, Ming; Duan, Nan (2023-03-01). \"TaskMatrix.AI: Completing Tasks by Connecting Foundation Models with Millions of APIs\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2303.16434](https://arxiv.org/abs/2303.16434) [[cs.AI](https://arxiv.org/archive/cs.AI)]. 57. **^** Patil, Shishir G.; Zhang, Tianjun; Wang, Xin; Gonzalez, Joseph E. (2023-05-01). \"Gorilla: Large Language Model Connected with Massive APIs\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2305.15334](https://arxiv.org/abs/2305.15334) [[cs.CL](https://arxiv.org/archive/cs.CL)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 727
  },
  {
    "page_content": "58. **^** Lewis, Patrick; Perez, Ethan; Piktus, Aleksandra; Petroni, Fabio; Karpukhin, Vladimir; Goyal, Naman; Küttler, Heinrich; Lewis, Mike; Yih, Wen-tau; Rocktäschel, Tim; Riedel, Sebastian; Kiela, Douwe (2020). [\"Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks\"](https://proceedings.neurips.cc/paper/2020/hash/6b493230205f780e1bc26945df7481e5-Abstract.html). _Advances in Neural Information Processing Systems_. **33**. Curran Associates, Inc.: 9459–9474\\. [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2005.11401](https://arxiv.org/abs/2005.11401). [Archived](https://web.archive.org/web/20230612171229/https://proceedings.neurips.cc/paper/2020/hash/6b493230205f780e1bc26945df7481e5-Abstract.html) from the original on 2023-06-12. Retrieved 2023-06-12. 59. **^** [\"The Growth Behind LLM-based Autonomous Agents\"](https://www.kdnuggets.com/the-growth-behind-llmbased-autonomous-agents). _KDnuggets_. October 23, 2023.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 952
  },
  {
    "page_content": "59. **^** [\"The Growth Behind LLM-based Autonomous Agents\"](https://www.kdnuggets.com/the-growth-behind-llmbased-autonomous-agents). _KDnuggets_. October 23, 2023. 60. **^** Yao, Shunyu; Zhao, Jeffrey; Yu, Dian; Du, Nan; Shafran, Izhak; Narasimhan, Karthik; Cao, Yuan (2022-10-01). \"ReAct: Synergizing Reasoning and Acting in Language Models\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2210.03629](https://arxiv.org/abs/2210.03629) [[cs.CL](https://arxiv.org/archive/cs.CL)]. 61. **^** Wu, Yue; Prabhumoye, Shrimai; Min, So Yeon (24 May 2023). \"SPRING: GPT-4 Out-performs RL Algorithms by Studying Papers and Reasoning\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2305.15486](https://arxiv.org/abs/2305.15486) [[cs.AI](https://arxiv.org/archive/cs.AI)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 788
  },
  {
    "page_content": "62. **^** Wang, Zihao; Cai, Shaofei; Liu, Anji; Ma, Xiaojian; Liang, Yitao (2023-02-03). \"Describe, Explain, Plan and Select: Interactive Planning with Large Language Models Enables Open-World Multi-Task Agents\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2302.01560](https://arxiv.org/abs/2302.01560) [[cs.AI](https://arxiv.org/archive/cs.AI)]. 63. ^ Jump up to: _**a**_ _**b**_ Shinn, Noah; Cassano, Federico; Labash, Beck; Gopinath, Ashwin; Narasimhan, Karthik; Yao, Shunyu (2023-03-01). \"Reflexion: Language Agents with Verbal Reinforcement Learning\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2303.11366](https://arxiv.org/abs/2303.11366) [[cs.AI](https://arxiv.org/archive/cs.AI)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 722
  },
  {
    "page_content": "64. **^** Hao, Shibo; Gu, Yi; Ma, Haodi; Jiahua Hong, Joshua; Wang, Zhen; Zhe Wang, Daisy; Hu, Zhiting (2023-05-01). \"Reasoning with Language Model is Planning with World Model\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2305.14992](https://arxiv.org/abs/2305.14992) [[cs.CL](https://arxiv.org/archive/cs.CL)]. 65. **^** Zhang, Jenny; Lehman, Joel; Stanley, Kenneth; Clune, Jeff (2 June 2023). \"OMNI: Open-endedness via Models of human Notions of Interestingness\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2306.01711](https://arxiv.org/abs/2306.01711) [[cs.AI](https://arxiv.org/archive/cs.AI)]. 66. ^ Jump up to: _**a**_ _**b**_ [\"Voyager | An Open-Ended Embodied Agent with Large Language Models\"](https://voyager.minedojo.org/). _voyager.minedojo.org_. [Archived](https://web.archive.org/web/20230608225054/https://voyager.minedojo.org/) from the original on 2023-06-08. Retrieved 2023-06-09.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 932
  },
  {
    "page_content": "67. **^** Park, Joon Sung; O'Brien, Joseph C.; Cai, Carrie J.; Ringel Morris, Meredith; Liang, Percy; Bernstein, Michael S. (2023-04-01). \"Generative Agents: Interactive Simulacra of Human Behavior\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2304.03442](https://arxiv.org/abs/2304.03442) [[cs.HC](https://arxiv.org/archive/cs.HC)]. 68. **^** Mann, Tobias. [\"How to run an LLM locally on your PC in less than 10 minutes\"](https://www.theregister.com/2024/03/17/ai_pc_local_llm/). _www.theregister.com_. Retrieved 2024-05-17.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 541
  },
  {
    "page_content": "68. **^** Mann, Tobias. [\"How to run an LLM locally on your PC in less than 10 minutes\"](https://www.theregister.com/2024/03/17/ai_pc_local_llm/). _www.theregister.com_. Retrieved 2024-05-17. 69. **^** Nagel, Markus; Amjad, Rana Ali; Baalen, Mart Van; Louizos, Christos; Blankevoort, Tijmen (2020-11-21). [\"Up or Down? Adaptive Rounding for Post-Training Quantization\"](https://proceedings.mlr.press/v119/nagel20a.html). _Proceedings of the 37th International Conference on Machine Learning_. PMLR: 7197–7206\\. [Archived](https://web.archive.org/web/20230614080854/https://proceedings.mlr.press/v119/nagel20a.html) from the original on 2023-06-14. Retrieved 2023-06-14. 70. **^** Polino, Antonio; Pascanu, Razvan; Alistarh, Dan (2018-02-01). \"Model compression via distillation and quantization\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[1802.05668](https://arxiv.org/abs/1802.05668) [[cs.NE](https://arxiv.org/archive/cs.NE)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 946
  },
  {
    "page_content": "71. **^** Frantar, Elias; Ashkboos, Saleh; Hoefler, Torsten; Alistarh, Dan (2022-10-01). \"GPTQ: Accurate Post-Training Quantization for Generative Pre-trained Transformers\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2210.17323](https://arxiv.org/abs/2210.17323) [[cs.LG](https://arxiv.org/archive/cs.LG)]. 72. **^** Dettmers, Tim; Svirschevski, Ruslan; Egiazarian, Vage; Kuznedelev, Denis; Frantar, Elias; Ashkboos, Saleh; Borzunov, Alexander; Hoefler, Torsten; Alistarh, Dan (2023-06-01). \"SpQR: A Sparse-Quantized Representation for Near-Lossless LLM Weight Compression\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2306.03078](https://arxiv.org/abs/2306.03078) [[cs.CL](https://arxiv.org/archive/cs.CL)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 741
  },
  {
    "page_content": "73. **^** Grootendorst, Maarten. [\"A Visual Guide to Quantization\"](https://web.archive.org/web/20240731003355/https://newsletter.maartengrootendorst.com/p/a-visual-guide-to-quantization). _newsletter.maartengrootendorst.com_. Archived from [the original](https://newsletter.maartengrootendorst.com/p/a-visual-guide-to-quantization) on 31 Jul 2024. Retrieved 2024-07-31. 74. **^** Dettmers, Tim; Pagnoni, Artidoro; [Holtzman, Ari](/wiki/Ari_Holtzman \"Ari Holtzman\"); Zettlemoyer, Luke (2023-05-01). \"QLoRA: Efficient Finetuning of Quantized LLMs\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2305.14314](https://arxiv.org/abs/2305.14314) [[cs.LG](https://arxiv.org/archive/cs.LG)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 697
  },
  {
    "page_content": "75. **^** Kiros, Ryan; Salakhutdinov, Ruslan; Zemel, Rich (2014-06-18). [\"Multimodal Neural Language Models\"](https://proceedings.mlr.press/v32/kiros14.html). _Proceedings of the 31st International Conference on Machine Learning_. PMLR: 595–603\\. [Archived](https://web.archive.org/web/20230702195952/https://proceedings.mlr.press/v32/kiros14.html) from the original on 2023-07-02. Retrieved 2023-07-02. 76. **^** Driess, Danny; Xia, Fei; Sajjadi, Mehdi S. M.; Lynch, Corey; Chowdhery, Aakanksha; Ichter, Brian; Wahid, Ayzaan; Tompson, Jonathan; Vuong, Quan; Yu, Tianhe; Huang, Wenlong; Chebotar, Yevgen; Sermanet, Pierre; Duckworth, Daniel; Levine, Sergey (2023-03-01). \"PaLM-E: An Embodied Multimodal Language Model\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2303.03378](https://arxiv.org/abs/2303.03378) [[cs.LG](https://arxiv.org/archive/cs.LG)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 869
  },
  {
    "page_content": "77. **^** Liu, Haotian; Li, Chunyuan; Wu, Qingyang; Lee, Yong Jae (2023-04-01). \"Visual Instruction Tuning\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2304.08485](https://arxiv.org/abs/2304.08485) [[cs.CV](https://arxiv.org/archive/cs.CV)]. 78. **^** Zhang, Hang; Li, Xin; Bing, Lidong (2023-06-01). \"Video-LLaMA: An Instruction-tuned Audio-Visual Language Model for Video Understanding\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2306.02858](https://arxiv.org/abs/2306.02858) [[cs.CL](https://arxiv.org/archive/cs.CL)]. 79. **^** [\"OpenAI says natively multimodal GPT-4o eats text, visuals, sound – and emits the same\"](https://www.theregister.com/2024/05/13/openai_gpt4o/). _The Register_. 2024-05-13.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 739
  },
  {
    "page_content": "79. **^** [\"OpenAI says natively multimodal GPT-4o eats text, visuals, sound – and emits the same\"](https://www.theregister.com/2024/05/13/openai_gpt4o/). _The Register_. 2024-05-13. 80. **^** Zia, Dr Tehseen (2024-01-08). [\"Unveiling of Large Multimodal Models: Shaping the Landscape of Language Models in 2024\"](https://www.unite.ai/unveiling-of-large-multimodal-models-shaping-the-landscape-of-language-models-in-2024/). _Unite.AI_. Retrieved 2025-05-30. 81. **^** Li, Junnan; Li, Dongxu; Savarese, Silvio; Hoi, Steven (2023-01-01). \"BLIP-2: Bootstrapping Language-Image Pre-training with Frozen Image Encoders and Large Language Models\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2301.12597](https://arxiv.org/abs/2301.12597) [[cs.CV](https://arxiv.org/archive/cs.CV)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 791
  },
  {
    "page_content": "82. **^** Alayrac, Jean-Baptiste; Donahue, Jeff; Luc, Pauline; Miech, Antoine; Barr, Iain; Hasson, Yana; Lenc, Karel; Mensch, Arthur; Millican, Katherine; Reynolds, Malcolm; Ring, Roman; Rutherford, Eliza; Cabi, Serkan; Han, Tengda; Gong, Zhitao (2022-12-06). [\"Flamingo: a Visual Language Model for Few-Shot Learning\"](https://proceedings.neurips.cc/paper_files/paper/2022/hash/960a172bc7fbf0177ccccbb411a7d800-Abstract-Conference.html). _Advances in Neural Information Processing Systems_. **35** : 23716–23736\\. [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2204.14198](https://arxiv.org/abs/2204.14198). [Archived](https://web.archive.org/web/20230702195951/https://proceedings.neurips.cc/paper_files/paper/2022/hash/960a172bc7fbf0177ccccbb411a7d800-Abstract-Conference.html) from the original on 2023-07-02. Retrieved 2023-07-02.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 848
  },
  {
    "page_content": "83. ^ Jump up to: _**a**_ _**b**_ [\"Introducing OpenAI o1-preview\"](https://openai.com/index/introducing-openai-o1-preview/). _OpenAI_. 2024-09-12. Retrieved 2025-02-03. 84. ^ Jump up to: _**a**_ _**b**_ Metz, Cade (2024-12-20). [\"OpenAI Unveils New A.I. That Can 'Reason' Through Math and Science Problems\"](https://www.nytimes.com/2024/12/20/technology/openai-new-ai-math-science.html). _The New York Times_. Retrieved 2025-02-03. 85. **^** Gibney, Elizabeth (2025-01-30). [\"China's cheap, open AI model DeepSeek thrills scientists\"](https://www.nature.com/articles/d41586-025-00229-6). _Nature_. Retrieved 2025-02-03.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 620
  },
  {
    "page_content": "85. **^** Gibney, Elizabeth (2025-01-30). [\"China's cheap, open AI model DeepSeek thrills scientists\"](https://www.nature.com/articles/d41586-025-00229-6). _Nature_. Retrieved 2025-02-03. 86. **^** Lin, Belle (2025-02-05). [\"Why Amazon is Betting on 'Automated Reasoning' to Reduce AI's Hallucinations: The tech giant says an obscure field that combines AI and math can mitigate—but not completely eliminate—AI's propensity to provide wrong answers\"](https://www.wsj.com/articles/why-amazon-is-betting-on-automated-reasoning-to-reduce-ais-hallucinations-b838849e). _Wall Street Journal_. [ISSN](/wiki/ISSN_\\(identifier\\) \"ISSN \\(identifier\\)\") [0099-9660](https://search.worldcat.org/issn/0099-9660).",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 700
  },
  {
    "page_content": "87. **^** Hoffmann, Jordan; Borgeaud, Sebastian; Mensch, Arthur; Buchatskaya, Elena; Cai, Trevor; Rutherford, Eliza; Casas, Diego de Las; Hendricks, Lisa Anne; Welbl, Johannes; Clark, Aidan; Hennigan, Tom; Noland, Eric; Millican, Katie; Driessche, George van den; Damoc, Bogdan (2022-03-29). \"Training Compute-Optimal Large Language Models\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2203.15556](https://arxiv.org/abs/2203.15556) [[cs.CL](https://arxiv.org/archive/cs.CL)]. 88. ^ Jump up to: _**a**_ _**b**_ Caballero, Ethan; Gupta, Kshitij; Rish, Irina; Krueger, David (2022). \"Broken Neural Scaling Laws\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2210.14891](https://arxiv.org/abs/2210.14891) [[cs.LG](https://arxiv.org/archive/cs.LG)]. 89. **^** [\"137 emergent abilities of large language models\"](https://www.jasonwei.net/blog/emergence). _Jason Wei_. Retrieved 2023-06-24.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 914
  },
  {
    "page_content": "89. **^** [\"137 emergent abilities of large language models\"](https://www.jasonwei.net/blog/emergence). _Jason Wei_. Retrieved 2023-06-24. 90. **^** Bowman, Samuel R. (2023). \"Eight Things to Know about Large Language Models\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2304.00612](https://arxiv.org/abs/2304.00612) [[cs.CL](https://arxiv.org/archive/cs.CL)]. 91. **^** Mukherjee, Anirban; Chang, Hannah (2024). \"Heuristic Reasoning in AI: Instrumental Use and Mimetic Absorption\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2403.09404](https://arxiv.org/abs/2403.09404) [[cs.AI](https://arxiv.org/archive/cs.AI)]. 92. **^** Hahn, Michael; Goyal, Navin (2023-03-14). \"A Theory of Emergent In-Context Learning as Implicit Structure Induction\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2303.07971](https://arxiv.org/abs/2303.07971) [[cs.LG](https://arxiv.org/archive/cs.LG)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 926
  },
  {
    "page_content": "93. **^** Pilehvar, Mohammad Taher; Camacho-Collados, Jose (June 2019). [\"Proceedings of the 2019 Conference of the North\"](https://aclanthology.org/N19-1128). _Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers)_. Minneapolis, Minnesota: Association for Computational Linguistics: 1267–1273\\. [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.18653/v1/N19-1128](https://doi.org/10.18653%2Fv1%2FN19-1128). [S2CID](/wiki/S2CID_\\(identifier\\) \"S2CID \\(identifier\\)\") [102353817](https://api.semanticscholar.org/CorpusID:102353817). [Archived](https://web.archive.org/web/20230627202732/https://aclanthology.org/N19-1128/) from the original on 2023-06-27. Retrieved 2023-06-27.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 806
  },
  {
    "page_content": "94. **^** [\"WiC: The Word-in-Context Dataset\"](https://pilehvar.github.io/wic/). _pilehvar.github.io_. [Archived](https://web.archive.org/web/20230627202725/https://pilehvar.github.io/wic/) from the original on 2023-06-27. Retrieved 2023-06-27. 95. **^** Patel, Roma; Pavlick, Ellie (2021-10-06). [\"Mapping Language Models to Grounded Conceptual Spaces\"](https://openreview.net/forum?id=gJcEM8sxHK). _ICLR_. [Archived](https://web.archive.org/web/20230624191940/https://openreview.net/forum?id=gJcEM8sxHK) from the original on 2023-06-24. Retrieved 2023-06-27.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 560
  },
  {
    "page_content": "96. **^** _[A Closer Look at Large Language Models Emergent Abilities](https://www.notion.so/A-Closer-Look-at-Large-Language-Models-Emergent-Abilities-493876b55df5479d80686f68a1abd72f) [Archived](https://web.archive.org/web/20230624012329/https://www.notion.so/A-Closer-Look-at-Large-Language-Models-Emergent-Abilities-493876b55df5479d80686f68a1abd72f) 2023-06-24 at the [Wayback Machine](/wiki/Wayback_Machine \"Wayback Machine\")_ (Yao Fu, Nov 20, 2022) 97. **^** Ornes, Stephen (March 16, 2023). [\"The Unpredictable Abilities Emerging From Large AI Models\"](https://www.quantamagazine.org/the-unpredictable-abilities-emerging-from-large-ai-models-20230316/). _Quanta Magazine_. [Archived](https://web.archive.org/web/20230316203438/https://www.quantamagazine.org/the-unpredictable-abilities-emerging-from-large-ai-models-20230316/) from the original on March 16, 2023. Retrieved March 16, 2023.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 895
  },
  {
    "page_content": "98. **^** Schaeffer, Rylan; Miranda, Brando; Koyejo, Sanmi (2023-04-01). \"Are Emergent Abilities of Large Language Models a Mirage?\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2304.15004](https://arxiv.org/abs/2304.15004) [[cs.AI](https://arxiv.org/archive/cs.AI)]. 99. **^** Blank, Idan A. (November 2023). [\"What are large language models supposed to model?\"](https://doi.org/10.1016%2Fj.tics.2023.08.006). _Trends in Cognitive Sciences_. **27** (11): 987–989\\. [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1016/j.tics.2023.08.006](https://doi.org/10.1016%2Fj.tics.2023.08.006). [PMID](/wiki/PMID_\\(identifier\\) \"PMID \\(identifier\\)\") [37659920](https://pubmed.ncbi.nlm.nih.gov/37659920). 100. **^** <https://transformer-circuits.pub/2025/attribution-graphs/biology.html#dives-poems%7Ctitle=On> the Biology of a Large Language Model (Chapter on Planning in Poems)",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 895
  },
  {
    "page_content": "100. **^** <https://transformer-circuits.pub/2025/attribution-graphs/biology.html#dives-poems%7Ctitle=On> the Biology of a Large Language Model (Chapter on Planning in Poems) 101. **^** Nanda, Neel; Chan, Lawrence; Lieberum, Tom; Smith, Jess; Steinhardt, Jacob (2023-01-01). \"Progress measures for grokking via mechanistic interpretability\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2301.05217](https://arxiv.org/abs/2301.05217) [[cs.LG](https://arxiv.org/archive/cs.LG)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 491
  },
  {
    "page_content": "102. ^ Jump up to: _**a**_ _**b**_ _**c**_ _**d**_ _**e**_ Mitchell, Melanie; Krakauer, David C. (28 March 2023). [\"The debate over understanding in AI's large language models\"](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10068812). _Proceedings of the National Academy of Sciences_. **120** (13): e2215907120. [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2210.13966](https://arxiv.org/abs/2210.13966). [Bibcode](/wiki/Bibcode_\\(identifier\\) \"Bibcode \\(identifier\\)\"):[2023PNAS..12015907M](https://ui.adsabs.harvard.edu/abs/2023PNAS..12015907M). [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1073/pnas.2215907120](https://doi.org/10.1073%2Fpnas.2215907120). [PMC](/wiki/PMC_\\(identifier\\) \"PMC \\(identifier\\)\") [10068812](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC10068812). [PMID](/wiki/PMID_\\(identifier\\) \"PMID \\(identifier\\)\") [36943882](https://pubmed.ncbi.nlm.nih.gov/36943882).",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 914
  },
  {
    "page_content": "103. **^** Metz, Cade (16 May 2023). [\"Microsoft Says New A.I. Shows Signs of Human Reasoning\"](https://www.nytimes.com/2023/05/16/technology/microsoft-ai-human-reasoning.html). _The New York Times_. 104. ^ Jump up to: _**a**_ _**b**_ Bubeck, Sébastien; Chandrasekaran, Varun; Eldan, Ronen; Gehrke, Johannes; Horvitz, Eric; Kamar, Ece; Lee, Peter; Lee, Yin Tat; Li, Yuanzhi; Lundberg, Scott; Nori, Harsha; Palangi, Hamid; Ribeiro, Marco Tulio; Zhang, Yi (2023). \"Sparks of Artificial General Intelligence: Early experiments with GPT-4\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2303.12712](https://arxiv.org/abs/2303.12712) [[cs.CL](https://arxiv.org/archive/cs.CL)]. 105. **^** [\"Anthropic CEO Dario Amodei pens a smart look at our AI future\"](https://www.fastcompany.com/91211163/anthropic-ceo-dario-amodei-pens-a-smart-look-at-our-ai-future). _Fast Company_. October 17, 2024.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 898
  },
  {
    "page_content": "106. **^** [\"ChatGPT is more like an 'alien intelligence' than a human brain, says futurist\"](https://www.zdnet.com/article/chatgpt-is-more-like-an-alien-intelligence-than-a-human-brain-says-futurist/). _ZDNET_. 2023. [Archived](https://web.archive.org/web/20230612065937/https://www.zdnet.com/article/chatgpt-is-more-like-an-alien-intelligence-than-a-human-brain-says-futurist/) from the original on 12 June 2023. Retrieved 12 June 2023. 107. ^ Jump up to: _**a**_ _**b**_ Newport, Cal (13 April 2023). [\"What Kind of Mind Does ChatGPT Have?\"](https://www.newyorker.com/science/annals-of-artificial-intelligence/what-kind-of-mind-does-chatgpt-have). _The New Yorker_. [Archived](https://web.archive.org/web/20230612071443/https://www.newyorker.com/science/annals-of-artificial-intelligence/what-kind-of-mind-does-chatgpt-have) from the original on 12 June 2023. Retrieved 12 June 2023.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 886
  },
  {
    "page_content": "108. **^** Roose, Kevin (30 May 2023). [\"Why an Octopus-like Creature Has Come to Symbolize the State of A.I.\"](https://www.nytimes.com/2023/05/30/technology/shoggoth-meme-ai.html) _The New York Times_. [Archived](https://web.archive.org/web/20230530193814/https://www.nytimes.com/2023/05/30/technology/shoggoth-meme-ai.html) from the original on 30 May 2023. Retrieved 12 June 2023. 109. **^** [\"The A to Z of Artificial Intelligence\"](https://time.com/6271657/a-to-z-of-artificial-intelligence/). _Time Magazine_. 13 April 2023. [Archived](https://web.archive.org/web/20230616123839/https://time.com/6271657/a-to-z-of-artificial-intelligence/) from the original on 16 June 2023. Retrieved 12 June 2023.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 704
  },
  {
    "page_content": "110. **^** Ji, Ziwei; Lee, Nayeon; Frieske, Rita; Yu, Tiezheng; Su, Dan; Xu, Yan; Ishii, Etsuko; Bang, Yejin; Dai, Wenliang; Madotto, Andrea; Fung, Pascale (November 2022). [\"Survey of Hallucination in Natural Language Generation\"](https://dl.acm.org/doi/pdf/10.1145/3571730) (pdf). _ACM Computing Surveys_. **55** (12). [Association for Computing Machinery](/wiki/Association_for_Computing_Machinery \"Association for Computing Machinery\"): 1–38\\. [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2202.03629](https://arxiv.org/abs/2202.03629). [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1145/3571730](https://doi.org/10.1145%2F3571730). [S2CID](/wiki/S2CID_\\(identifier\\) \"S2CID \\(identifier\\)\") [246652372](https://api.semanticscholar.org/CorpusID:246652372). [Archived](https://web.archive.org/web/20230326145635/https://dl.acm.org/doi/pdf/10.1145/3571730) from the original on 26 March 2023. Retrieved 15 January 2023.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 946
  },
  {
    "page_content": "111. **^** Varshney, Neeraj; Yao, Wenlin; Zhang, Hongming; Chen, Jianshu; Yu, Dong (2023). \"A Stitch in Time Saves Nine: Detecting and Mitigating Hallucinations of LLMs by Validating Low-Confidence Generation\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2307.03987](https://arxiv.org/abs/2307.03987) [[cs.CL](https://arxiv.org/archive/cs.CL)]. 112. **^** Lakoff, George (1999). _Philosophy in the Flesh: The Embodied Mind and Its Challenge to Western Philosophy; Appendix: The Neural Theory of Language Paradigm_. New York Basic Books. pp. 569–583\\. [ISBN](/wiki/ISBN_\\(identifier\\) \"ISBN \\(identifier\\)\") [978-0-465-05674-3](/wiki/Special:BookSources/978-0-465-05674-3 \"Special:BookSources/978-0-465-05674-3\"). 113. **^** Evans, Vyvyan. (2014). _The Language Myth_. Cambridge University Press. [ISBN](/wiki/ISBN_\\(identifier\\) \"ISBN \\(identifier\\)\") [978-1-107-04396-1](/wiki/Special:BookSources/978-1-107-04396-1 \"Special:BookSources/978-1-107-04396-1\").",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 973
  },
  {
    "page_content": "114. **^** Friston, Karl J. (2022). _Active Inference: The Free Energy Principle in Mind, Brain, and Behavior; Chapter 4 The Generative Models of Active Inference_. The MIT Press. [ISBN](/wiki/ISBN_\\(identifier\\) \"ISBN \\(identifier\\)\") [978-0-262-36997-8](/wiki/Special:BookSources/978-0-262-36997-8 \"Special:BookSources/978-0-262-36997-8\").",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 341
  },
  {
    "page_content": "115. ^ Jump up to: _**a**_ _**b**_ Brown, Tom B.; Mann, Benjamin; Ryder, Nick; Subbiah, Melanie; Kaplan, Jared; Dhariwal, Prafulla; Neelakantan, Arvind; Shyam, Pranav; Sastry, Girish; Askell, Amanda; Agarwal, Sandhini; Herbert-Voss, Ariel; Krueger, Gretchen; Henighan, Tom; Child, Rewon; Ramesh, Aditya; Ziegler, Daniel M.; Wu, Jeffrey; Winter, Clemens; Hesse, Christopher; Chen, Mark; Sigler, Eric; Litwin, Mateusz; Gray, Scott; Chess, Benjamin; Clark, Jack; Berner, Christopher; McCandlish, Sam; Radford, Alec; Sutskever, Ilya; Amodei, Dario (Dec 2020). Larochelle, H.; Ranzato, M.; Hadsell, R.; Balcan, M.F.; Lin, H. (eds.). [\"Language Models are Few-Shot Learners\"](https://proceedings.neurips.cc/paper/2020/file/1457c0d6bfcb4967418bfb8ac142f64a-Paper.pdf) (PDF). _Advances in Neural Information Processing Systems_. **33**. Curran Associates, Inc.: 1877–1901\\",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 864
  },
  {
    "page_content": ". _Advances in Neural Information Processing Systems_. **33**. Curran Associates, Inc.: 1877–1901\\. [Archived](https://web.archive.org/web/20231117204007/https://proceedings.neurips.cc/paper/2020/file/1457c0d6bfcb4967418bfb8ac142f64a-Paper.pdf) (PDF) from the original on 2023-11-17. Retrieved 2023-03-14.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 305
  },
  {
    "page_content": "116. ^ Jump up to: _**a**_ _**b**_ Huyen, Chip (October 18, 2019). [\"Evaluation Metrics for Language Modeling\"](https://thegradient.pub/understanding-evaluation-metrics-for-language-models/). _The Gradient_. Retrieved January 14, 2024. 117. **^** Edwards, Benj (2023-09-28). [\"AI language models can exceed PNG and FLAC in lossless compression, says study\"](https://arstechnica.com/information-technology/2023/09/ai-language-models-can-exceed-png-and-flac-in-lossless-compression-says-study/). _Ars Technica_. Retrieved 2025-05-29. 118. **^** [_openai/simple-evals_](https://github.com/openai/simple-evals), OpenAI, 2024-05-28, retrieved 2024-05-28 119. **^** [_openai/evals_](https://github.com/openai/evals), OpenAI, 2024-05-28, [archived](https://web.archive.org/web/20240508225708/https://github.com/openai/evals) from the original on 2024-05-08, retrieved 2024-05-28",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 871
  },
  {
    "page_content": "120. ^ Jump up to: _**a**_ _**b**_ Clark, Christopher; Lee, Kenton; Chang, Ming-Wei; Kwiatkowski, Tom; Collins, Michael; Toutanova, Kristina (2019). \"BoolQ: Exploring the Surprising Difficulty of Natural Yes/No Questions\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[1905.10044](https://arxiv.org/abs/1905.10044) [[cs.CL](https://arxiv.org/archive/cs.CL)]. 121. ^ Jump up to: _**a**_ _**b**_ _**c**_ Wayne Xin Zhao; Zhou, Kun; Li, Junyi; Tang, Tianyi; Wang, Xiaolei; Hou, Yupeng; Min, Yingqian; Zhang, Beichen; Zhang, Junjie; Dong, Zican; Du, Yifan; Yang, Chen; Chen, Yushuo; Chen, Zhipeng; Jiang, Jinhao; Ren, Ruiyang; Li, Yifan; Tang, Xinyu; Liu, Zikang; Liu, Peiyu; Nie, Jian-Yun; Wen, Ji-Rong (2023). \"A Survey of Large Language Models\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2303.18223](https://arxiv.org/abs/2303.18223) [[cs.CL](https://arxiv.org/archive/cs.CL)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 907
  },
  {
    "page_content": "122. **^** Nangia, Nikita and Vania, Clara and Bhalerao, Rasika and Bowman, Samuel R. (November 2020). [\"CrowS-Pairs: A Challenge Dataset for Measuring Social Biases in Masked Language Models\"](https://aclanthology.org/2020.emnlp-main.154/). In Webber, Bonnie and Cohn, Trevor and He, Yulan and Liu, Yang (ed.). _Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing (EMNLP)_. Association for Computational Linguistics. pp. 1953–1967\\. [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2010.00133](https://arxiv.org/abs/2010.00133). [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.18653/v1/2020.emnlp-main.154](https://doi.org/10.18653%2Fv1%2F2020.emnlp-main.154).`{{[cite conference](/wiki/Template:Cite_conference \"Template:Cite conference\")}}`: CS1 maint: multiple names: authors list ([link](/wiki/Category:CS1_maint:_multiple_names:_authors_list \"Category:CS1 maint: multiple names: authors list\"))",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 955
  },
  {
    "page_content": "123. **^** Nadeem, Moin and Bethke, Anna and Reddy, Siva (August 2021). [\"StereoSet: Measuring stereotypical bias in pretrained language models\"](https://aclanthology.org/2021.acl-long.416/). In Zong, Chengqing and Xia, Fei and Li, Wenjie and Navigli, Roberto (ed.). _Proceedings of the 59th Annual Meeting of the Association for Computational Linguistics and the 11th International Joint Conference on Natural Language Processing (Volume 1: Long Papers)_. Association for Computational Linguistics. pp. 5356–5371\\. [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2004.09456](https://arxiv.org/abs/2004.09456). [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.18653/v1/2021.acl-long.416](https://doi.org/10.18653%2Fv1%2F2021.acl-long.416).`{{[cite conference](/wiki/Template:Cite_conference \"Template:Cite conference\")}}`: CS1 maint: multiple names: authors list ([link](/wiki/Category:CS1_maint:_multiple_names:_authors_list \"Category:CS1 maint: multiple names: authors list\"))",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 998
  },
  {
    "page_content": "124. **^** Simpson, Shmona and Nukpezah, Jonathan and Kie Brooks and Pandya, Raaghav (17 December 2024). [\"Parity benchmark for measuring bias in LLMs\"](https://doi.org/10.1007%2Fs43681-024-00613-4). _AI and Ethics_. **5** (3). Springer: 3087–3101\\. [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1007/s43681-024-00613-4](https://doi.org/10.1007%2Fs43681-024-00613-4).`{{[cite journal](/wiki/Template:Cite_journal \"Template:Cite journal\")}}`: CS1 maint: multiple names: authors list ([link](/wiki/Category:CS1_maint:_multiple_names:_authors_list \"Category:CS1 maint: multiple names: authors list\"))",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 608
  },
  {
    "page_content": "125. **^** Caramancion, Kevin Matthe (2023-11-13). \"News Verifiers Showdown: A Comparative Performance Evaluation of ChatGPT 3.5, ChatGPT 4.0, Bing AI, and Bard in News Fact-Checking\". [_2023 IEEE Future Networks World Forum (FNWF)_](https://ieeexplore.ieee.org/document/10520446). IEEE. pp. 1–6\\. [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2306.17176](https://arxiv.org/abs/2306.17176). [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1109/FNWF58287.2023.10520446](https://doi.org/10.1109%2FFNWF58287.2023.10520446). [ISBN](/wiki/ISBN_\\(identifier\\) \"ISBN \\(identifier\\)\") [979-8-3503-2458-7](/wiki/Special:BookSources/979-8-3503-2458-7 \"Special:BookSources/979-8-3503-2458-7\").",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 705
  },
  {
    "page_content": "126. **^** [\"Sanitized open-source datasets for natural language and code understanding: how we evaluated our 70B model\"](https://imbue.com/research/70b-evals/). _imbue.com_. [Archived](https://web.archive.org/web/20240726173012/https://imbue.com/research/70b-evals/) from the original on 2024-07-26. Retrieved 2024-07-24. 127. **^** Srivastava, Aarohi; et al. (2022). \"Beyond the Imitation Game: Quantifying and extrapolating the capabilities of language models\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2206.04615](https://arxiv.org/abs/2206.04615) [[cs.CL](https://arxiv.org/archive/cs.CL)]. 128. **^** Lin, Stephanie; Hilton, Jacob; Evans, Owain (2021). \"TruthfulQA: Measuring How Models Mimic Human Falsehoods\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2109.07958](https://arxiv.org/abs/2109.07958) [[cs.CL](https://arxiv.org/archive/cs.CL)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 886
  },
  {
    "page_content": "129. ^ Jump up to: _**a**_ _**b**_ Zellers, Rowan; Holtzman, Ari; Bisk, Yonatan; Farhadi, Ali; Choi, Yejin (2019). \"HellaSwag: Can a Machine Really Finish Your Sentence?\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[1905.07830](https://arxiv.org/abs/1905.07830) [[cs.CL](https://arxiv.org/archive/cs.CL)]. 130. **^** [\"Prepare for truly useful large language models\"](https://doi.org/10.1038%2Fs41551-023-01012-6). _Nature Biomedical Engineering_. **7** (2): 85–86\\. 7 March 2023. [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1038/s41551-023-01012-6](https://doi.org/10.1038%2Fs41551-023-01012-6). [PMID](/wiki/PMID_\\(identifier\\) \"PMID \\(identifier\\)\") [36882584](https://pubmed.ncbi.nlm.nih.gov/36882584). [S2CID](/wiki/S2CID_\\(identifier\\) \"S2CID \\(identifier\\)\") [257403466](https://api.semanticscholar.org/CorpusID:257403466).",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 859
  },
  {
    "page_content": "131. **^** [\"Your job is (probably) safe from artificial intelligence\"](https://www.economist.com/finance-and-economics/2023/05/07/your-job-is-probably-safe-from-artificial-intelligence). _The Economist_. 7 May 2023. [Archived](https://web.archive.org/web/20230617225618/https://www.economist.com/finance-and-economics/2023/05/07/your-job-is-probably-safe-from-artificial-intelligence) from the original on 17 June 2023. Retrieved 18 June 2023. 132. **^** [\"Generative AI Could Raise Global GDP by 7%\"](https://www.goldmansachs.com/intelligence/pages/generative-ai-could-raise-global-gdp-by-7-percent.html). _Goldman Sachs_. [Archived](https://web.archive.org/web/20230618013836/https://www.goldmansachs.com/intelligence/pages/generative-ai-could-raise-global-gdp-by-7-percent.html) from the original on 18 June 2023. Retrieved 18 June 2023.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 841
  },
  {
    "page_content": "133. **^** Brinkmann, Levin; Baumann, Fabian; Bonnefon, Jean-François; Derex, Maxime; Müller, Thomas F.; Nussberger, Anne-Marie; Czaplicka, Agnieszka; Acerbi, Alberto; Griffiths, Thomas L.; Henrich, Joseph; Leibo, Joel Z.; McElreath, Richard; Oudeyer, Pierre-Yves; Stray, Jonathan; Rahwan, Iyad (2023-11-20). [\"Machine culture\"](https://www.nature.com/articles/s41562-023-01742-2). _Nature Human Behaviour_. **7** (11): 1855–1868\\. [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2311.11388](https://arxiv.org/abs/2311.11388). [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1038/s41562-023-01742-2](https://doi.org/10.1038%2Fs41562-023-01742-2). [ISSN](/wiki/ISSN_\\(identifier\\) \"ISSN \\(identifier\\)\") [2397-3374](https://search.worldcat.org/issn/2397-3374). [PMID](/wiki/PMID_\\(identifier\\) \"PMID \\(identifier\\)\") [37985914](https://pubmed.ncbi.nlm.nih.gov/37985914).",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 890
  },
  {
    "page_content": "134. **^** Peng, Zhencan; Wang, Zhizhi; Deng, Dong (13 June 2023). [\"Near-Duplicate Sequence Search at Scale for Large Language Model Memorization Evaluation\"](https://people.cs.rutgers.edu/~dd903/assets/papers/sigmod23.pdf) (PDF). _Proceedings of the ACM on Management of Data_. **1** (2): 1–18\\. [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1145/3589324](https://doi.org/10.1145%2F3589324). [S2CID](/wiki/S2CID_\\(identifier\\) \"S2CID \\(identifier\\)\") [259213212](https://api.semanticscholar.org/CorpusID:259213212). [Archived](https://web.archive.org/web/20240827053753/https://people.cs.rutgers.edu/~dd903/assets/papers/sigmod23.pdf) (PDF) from the original on 2024-08-27. Retrieved 2024-01-20. Citing Lee et al 2022. 135. **^** Peng, Wang & Deng 2023, p. 8.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 772
  },
  {
    "page_content": "135. **^** Peng, Wang & Deng 2023, p. 8. 136. **^** Stephen Council (1 Dec 2023). [\"How Googlers cracked an SF rival's tech model with a single word\"](https://www.sfgate.com/tech/article/google-openai-chatgpt-break-model-18525445.php). SFGATE. [Archived](https://web.archive.org/web/20231216160941/https://www.sfgate.com/tech/article/google-openai-chatgpt-break-model-18525445.php) from the original on 16 December 2023. 137. **^** Alba, Davey (1 May 2023). [\"AI chatbots have been used to create dozens of news content farms\"](https://www.japantimes.co.jp/news/2023/05/01/business/tech/ai-fake-news-content-farms/). _The Japan Times_. Retrieved 18 June 2023.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 659
  },
  {
    "page_content": "138. **^** [\"Could chatbots help devise the next pandemic virus?\"](https://www.science.org/content/article/could-chatbots-help-devise-next-pandemic-virus). _Science_. 14 June 2023. [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1126/science.adj2463](https://doi.org/10.1126%2Fscience.adj2463). [Archived](https://web.archive.org/web/20230618013834/https://www.science.org/content/article/could-chatbots-help-devise-next-pandemic-virus) from the original on 18 June 2023. Retrieved 18 June 2023. 139. **^** Hubinger, Evan (10 January 2024). \"Sleeper Agents: Training Deceptive LLMs that Persist Through Safety Training\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2401.05566](https://arxiv.org/abs/2401.05566) [[cs.CR](https://arxiv.org/archive/cs.CR)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 779
  },
  {
    "page_content": "140. **^** Kang, Daniel (2023). \"Exploiting programmatic behavior of LLMs: Dual-use through standard security attacks\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2302.05733](https://arxiv.org/abs/2302.05733) [[cs.CR](https://arxiv.org/archive/cs.CR)]. 141. ^ Jump up to: _**a**_ _**b**_ [\"Russian propaganda may be flooding AI models\"](https://www.americansunlight.org/updates/new-report-russian-propaganda-may-be-flooding-ai-models). _The American Sunlight Project_. 26 February 2025. Retrieved 2025-04-11. 142. **^** Goudarzi, Sara (2025-03-26). [\"Russian networks flood the Internet with propaganda, aiming to corrupt AI chatbots\"](https://thebulletin.org/2025/03/russian-networks-flood-the-internet-with-propaganda-aiming-to-corrupt-ai-chatbots/). _[Bulletin of the Atomic Scientists](/wiki/Bulletin_of_the_Atomic_Scientists \"Bulletin of the Atomic Scientists\")_. Retrieved 2025-04-10.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 907
  },
  {
    "page_content": "143. **^** Wang, Yongge (20 June 2024). [\"Encryption Based Covert Channel for Large Language Models\"](https://eprint.iacr.org/2024/586.pdf) (PDF). IACR ePrint 2024/586. [Archived](https://web.archive.org/web/20240624191233/https://eprint.iacr.org/2024/586.pdf) (PDF) from the original on 24 June 2024. Retrieved 24 June 2024. 144. ^ Jump up to: _**a**_ _**b**_ Stokel-Walker, Chris (November 22, 2023). [\"ChatGPT Replicates Gender Bias in Recommendation Letters\"](https://www.scientificamerican.com/article/chatgpt-replicates-gender-bias-in-recommendation-letters/). _Scientific American_. [Archived](https://web.archive.org/web/20231229043124/https://www.scientificamerican.com/article/chatgpt-replicates-gender-bias-in-recommendation-letters/) from the original on 2023-12-29. Retrieved 2023-12-29.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 800
  },
  {
    "page_content": "145. **^** Luo, Queenie; Puett, Michael J.; Smith, Michael D. (2023-03-28). \"A Perspectival Mirror of the Elephant: Investigating Language Bias on Google, ChatGPT, Wikipedia, and YouTube\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2303.16281v2](https://arxiv.org/abs/2303.16281v2) [[cs.CY](https://arxiv.org/archive/cs.CY)]. 146. **^** Wang, Angelina; Morgenstern, Jamie; Dickerson, John P. (17 February 2025). \"Large language models that replace human participants can harmfully misportray and flatten identity groups\". _Nature Machine Intelligence_. **7** (3): 400–411\\. [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2402.01908](https://arxiv.org/abs/2402.01908). [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1038/s42256-025-00986-z](https://doi.org/10.1038%2Fs42256-025-00986-z).",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 826
  },
  {
    "page_content": "147. **^** Cheng, Myra; Durmus, Esin; Jurafsky, Dan (2023-05-29), _Marked Personas: Using Natural Language Prompts to Measure Stereotypes in Language Models_ , [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2305.18189](https://arxiv.org/abs/2305.18189) 148. **^** Kotek, Hadas; Dockum, Rikker; Sun, David (2023-11-05). [\"Gender bias and stereotypes in Large Language Models\"](https://dl.acm.org/doi/10.1145/3582269.3615599). _Proceedings of the ACM Collective Intelligence Conference_. CI '23. New York, NY, USA: Association for Computing Machinery. pp. 12–24\\. [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2308.14921](https://arxiv.org/abs/2308.14921). [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1145/3582269.3615599](https://doi.org/10.1145%2F3582269.3615599). [ISBN](/wiki/ISBN_\\(identifier\\) \"ISBN \\(identifier\\)\") [979-8-4007-0113-9](/wiki/Special:BookSources/979-8-4007-0113-9 \"Special:BookSources/979-8-4007-0113-9\").",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 966
  },
  {
    "page_content": "149. **^** Choi, Hyeong Kyu; Xu, Weijie; Xue, Chi; Eckman, Stephanie; Reddy, Chandan K. (2024-09-27), _Mitigating Selection Bias with Node Pruning and Auxiliary Options_ , [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2409.18857](https://arxiv.org/abs/2409.18857) 150. **^** Zheng, Chujie; Zhou, Hao; Meng, Fandong; Zhou, Jie; Huang, Minlie (2023-09-07), _Large Language Models Are Not Robust Multiple Choice Selectors_ , [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2309.03882](https://arxiv.org/abs/2309.03882) 151. **^** Heikkilä, Melissa (August 7, 2023). [\"AI language models are rife with different political biases\"](https://www.technologyreview.com/2023/08/07/1077324/ai-language-models-are-rife-with-political-biases/). _MIT Technology Review_. Retrieved 2023-12-29.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 804
  },
  {
    "page_content": "152. **^** Mehta, Sourabh (2024-07-03). [\"How Much Energy Do LLMs Consume? Unveiling the Power Behind AI\"](https://adasci.org/how-much-energy-do-llms-consume-unveiling-the-power-behind-ai/). _Association of Data Scientists_. Retrieved 2025-01-27. 153. **^** [\"Artificial Intelligence wants to go nuclear. Will it work?\"](https://www.npr.org/2024/12/09/nx-s1-5171063/artificial-intelligence-wants-to-go-nuclear-will-it-work). _NPR_. Retrieved 2025-01-27. 154. **^** Roy, Dareen (December 19, 2024). [\"AI's energy hunger fuels geothermal startups but natgas rivalry clouds future\"](https://www.reuters.com/technology/artificial-intelligence/ais-energy-hunger-fuels-geothermal-startups-natgas-rivalry-clouds-future-2024-12-19/). _Reuters_.",
    "metadata": {
      "H1": "Large language model",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 736
  },
  {
    "page_content": "## Further reading [[edit](/w/index.php?title=Large_language_model&action=edit&section=43 \"Edit section: Further reading\")] * [Jurafsky, Dan](/wiki/Dan_Jurafsky \"Dan Jurafsky\"), Martin, James. H. [_Speech and Language Processing: An Introduction to Natural Language Processing, Computational Linguistics, and Speech Recognition_](https://web.stanford.edu/~jurafsky/slp3/ed3book_jan72023.pdf), 3rd Edition draft, 2023. * Zhao, Wayne Xin; et al. (2023). \"A Survey of Large Language Models\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2303.18223](https://arxiv.org/abs/2303.18223) [[cs.CL](https://arxiv.org/archive/cs.CL)]. * Kaddour, Jean; et al. (2023). \"Challenges and Applications of Large Language Models\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2307.10169](https://arxiv.org/abs/2307.10169) [[cs.CL](https://arxiv.org/archive/cs.CL)].",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 876
  },
  {
    "page_content": "* Yin, Shukang; Fu, Chaoyou; Zhao, Sirui; Li, Ke; Sun, Xing; Xu, Tong; Chen, Enhong (2024). [\"A Survey on Multimodal Large Language Models\"](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC11645129). _National Science Review_. **11** (12): nwae403. [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2306.13549](https://arxiv.org/abs/2306.13549). [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1093/nsr/nwae403](https://doi.org/10.1093%2Fnsr%2Fnwae403). [PMC](/wiki/PMC_\\(identifier\\) \"PMC \\(identifier\\)\") [11645129](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC11645129). [PMID](/wiki/PMID_\\(identifier\\) \"PMID \\(identifier\\)\") [39679213](https://pubmed.ncbi.nlm.nih.gov/39679213). * [\"AI Index Report 2024 – Artificial Intelligence Index\"](https://aiindex.stanford.edu/report/). _aiindex.stanford.edu_. Retrieved 2024-05-05.",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 843
  },
  {
    "page_content": "* [\"AI Index Report 2024 – Artificial Intelligence Index\"](https://aiindex.stanford.edu/report/). _aiindex.stanford.edu_. Retrieved 2024-05-05. * Frank, Michael C. (27 June 2023). [\"Baby steps in evaluating the capacities of large language models\"](https://www.nature.com/articles/s44159-023-00211-x). _Nature Reviews Psychology_. **2** (8): 451–452\\. [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1038/s44159-023-00211-x](https://doi.org/10.1038%2Fs44159-023-00211-x). [ISSN](/wiki/ISSN_\\(identifier\\) \"ISSN \\(identifier\\)\") [2731-0574](https://search.worldcat.org/issn/2731-0574). [S2CID](/wiki/S2CID_\\(identifier\\) \"S2CID \\(identifier\\)\") [259713140](https://api.semanticscholar.org/CorpusID:259713140). Retrieved 2 July 2023.",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 740
  },
  {
    "page_content": "* Anwar, U.; Saparov, A.; Rando, J.; Paleka, D.; Turpin, M.; Hase, P.; Lubana, E. S.; Jenner, E.; Casper, S.; Sourbut, O.; Edelman, B. L.; Zhang, Z.; Günther, M.; Korinek, A.; Hernandez-Orallo, J.; Hammond, L.; Bigelow, E.; Pan, A.; Langosco, L.; Krueger, D. (2024). \"Foundational Challenges in Assuring Alignment and Safety of Large Language Models\". [arXiv](/wiki/ArXiv_\\(identifier\\) \"ArXiv \\(identifier\\)\"):[2404.09932](https://arxiv.org/abs/2404.09932) [[cs.LG](https://arxiv.org/archive/cs.LG)]. show * [v](/wiki/Template:Natural_language_processing \"Template:Natural language processing\") * [t](/wiki/Template_talk:Natural_language_processing \"Template talk:Natural language processing\") * [e](/wiki/Special:EditPage/Template:Natural_language_processing \"Special:EditPage/Template:Natural language processing\") [Natural language processing](/wiki/Natural_language_processing \"Natural language processing\") General terms| * [AI-complete](/wiki/AI-complete \"AI-complete\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 976
  },
  {
    "page_content": "[Natural language processing](/wiki/Natural_language_processing \"Natural language processing\") General terms| * [AI-complete](/wiki/AI-complete \"AI-complete\") * [Bag-of-words](/wiki/Bag-of-words_model \"Bag-of-words model\") * [_n_ -gram](/wiki/N-gram \"N-gram\") * [Bigram](/wiki/Bigram \"Bigram\") * [Trigram](/wiki/Trigram \"Trigram\") * [Computational linguistics](/wiki/Computational_linguistics \"Computational linguistics\") * [Natural language understanding](/wiki/Natural_language_understanding \"Natural language understanding\") * [Stop words](/wiki/Stop_word \"Stop word\") * [Text processing](/wiki/Text_processing \"Text processing\") [Text analysis](/wiki/Text_mining \"Text mining\")| * [Argument mining](/wiki/Argument_mining \"Argument mining\") * [Collocation extraction](/wiki/Collocation_extraction \"Collocation extraction\") * [Concept mining](/wiki/Concept_mining \"Concept mining\") * [Coreference resolution](/wiki/Coreference#Coreference_resolution \"Coreference\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 966
  },
  {
    "page_content": "* [Concept mining](/wiki/Concept_mining \"Concept mining\") * [Coreference resolution](/wiki/Coreference#Coreference_resolution \"Coreference\") * [Deep linguistic processing](/wiki/Deep_linguistic_processing \"Deep linguistic processing\") * [Distant reading](/wiki/Distant_reading \"Distant reading\") * [Information extraction](/wiki/Information_extraction \"Information extraction\") * [Named-entity recognition](/wiki/Named-entity_recognition \"Named-entity recognition\") * [Ontology learning](/wiki/Ontology_learning \"Ontology learning\") * [Parsing](/wiki/Parsing \"Parsing\") * [Semantic parsing](/wiki/Semantic_parsing \"Semantic parsing\") * [Syntactic parsing](/wiki/Syntactic_parsing_\\(computational_linguistics\\) \"Syntactic parsing \\(computational linguistics\\)\") * [Part-of-speech tagging](/wiki/Part-of-speech_tagging \"Part-of-speech tagging\") * [Semantic analysis](/wiki/Semantic_analysis_\\(machine_learning\\) \"Semantic analysis \\(machine learning\\)\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 951
  },
  {
    "page_content": "* [Part-of-speech tagging](/wiki/Part-of-speech_tagging \"Part-of-speech tagging\") * [Semantic analysis](/wiki/Semantic_analysis_\\(machine_learning\\) \"Semantic analysis \\(machine learning\\)\") * [Semantic role labeling](/wiki/Semantic_role_labeling \"Semantic role labeling\") * [Semantic decomposition](/wiki/Semantic_decomposition_\\(natural_language_processing\\) \"Semantic decomposition \\(natural language processing\\)\") * [Semantic similarity](/wiki/Semantic_similarity \"Semantic similarity\") * [Sentiment analysis](/wiki/Sentiment_analysis \"Sentiment analysis\") * [Terminology extraction](/wiki/Terminology_extraction \"Terminology extraction\") * [Text mining](/wiki/Text_mining \"Text mining\") * [Textual entailment](/wiki/Textual_entailment \"Textual entailment\") * [Truecasing](/wiki/Truecasing \"Truecasing\") * [Word-sense disambiguation](/wiki/Word-sense_disambiguation \"Word-sense disambiguation\") * [Word-sense induction](/wiki/Word-sense_induction \"Word-sense induction\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 975
  },
  {
    "page_content": "* [Word-sense disambiguation](/wiki/Word-sense_disambiguation \"Word-sense disambiguation\") * [Word-sense induction](/wiki/Word-sense_induction \"Word-sense induction\") | [Text segmentation](/wiki/Text_segmentation \"Text segmentation\")| * [Compound-term processing](/wiki/Compound-term_processing \"Compound-term processing\") * [Lemmatisation](/wiki/Lemmatisation \"Lemmatisation\") * [Lexical analysis](/wiki/Lexical_analysis \"Lexical analysis\") * [Text chunking](/wiki/Shallow_parsing \"Shallow parsing\") * [Stemming](/wiki/Stemming \"Stemming\") * [Sentence segmentation](/wiki/Sentence_boundary_disambiguation \"Sentence boundary disambiguation\") * [Word segmentation](/wiki/Word#Word_boundaries \"Word\") [Automatic summarization](/wiki/Automatic_summarization \"Automatic summarization\")| * [Multi-document summarization](/wiki/Multi-document_summarization \"Multi-document summarization\") * [Sentence extraction](/wiki/Sentence_extraction \"Sentence extraction\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 955
  },
  {
    "page_content": "* [Multi-document summarization](/wiki/Multi-document_summarization \"Multi-document summarization\") * [Sentence extraction](/wiki/Sentence_extraction \"Sentence extraction\") * [Text simplification](/wiki/Text_simplification \"Text simplification\") [Machine translation](/wiki/Machine_translation \"Machine translation\")| * [Computer-assisted](/wiki/Computer-assisted_translation \"Computer-assisted translation\") * [Example-based](/wiki/Example-based_machine_translation \"Example-based machine translation\") * [Rule-based](/wiki/Rule-based_machine_translation \"Rule-based machine translation\") * [Statistical](/wiki/Statistical_machine_translation \"Statistical machine translation\") * [Transfer-based](/wiki/Transfer-based_machine_translation \"Transfer-based machine translation\") * [Neural](/wiki/Neural_machine_translation \"Neural machine translation\") [Distributional semantics](/wiki/Distributional_semantics \"Distributional semantics\") models|",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 944
  },
  {
    "page_content": "* [Neural](/wiki/Neural_machine_translation \"Neural machine translation\") [Distributional semantics](/wiki/Distributional_semantics \"Distributional semantics\") models| * [BERT](/wiki/BERT_\\(language_model\\) \"BERT \\(language model\\)\") * [Document-term matrix](/wiki/Document-term_matrix \"Document-term matrix\") * [Explicit semantic analysis](/wiki/Explicit_semantic_analysis \"Explicit semantic analysis\") * [fastText](/wiki/FastText \"FastText\") * [GloVe](/wiki/GloVe \"GloVe\") * [Language model](/wiki/Language_model \"Language model\") (large) * [Latent semantic analysis](/wiki/Latent_semantic_analysis \"Latent semantic analysis\") * [Seq2seq](/wiki/Seq2seq \"Seq2seq\") * [Word embedding](/wiki/Word_embedding \"Word embedding\") * [Word2vec](/wiki/Word2vec \"Word2vec\") [Language resources](/wiki/Language_resource \"Language resource\"), datasets and corpora| | Types and standards| * [Corpus linguistics](/wiki/Corpus_linguistics \"Corpus linguistics\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 945
  },
  {
    "page_content": "[Language resources](/wiki/Language_resource \"Language resource\"), datasets and corpora| | Types and standards| * [Corpus linguistics](/wiki/Corpus_linguistics \"Corpus linguistics\") * [Lexical resource](/wiki/Lexical_resource \"Lexical resource\") * [Linguistic Linked Open Data](/wiki/Linguistic_Linked_Open_Data \"Linguistic Linked Open Data\") * [Machine-readable dictionary](/wiki/Machine-readable_dictionary \"Machine-readable dictionary\") * [Parallel text](/wiki/Parallel_text \"Parallel text\") * [PropBank](/wiki/PropBank \"PropBank\") * [Semantic network](/wiki/Semantic_network \"Semantic network\") * [Simple Knowledge Organization System](/wiki/Simple_Knowledge_Organization_System \"Simple Knowledge Organization System\") * [Speech corpus](/wiki/Speech_corpus \"Speech corpus\") * [Text corpus](/wiki/Text_corpus \"Text corpus\") * [Thesaurus (information retrieval)](/wiki/Thesaurus_\\(information_retrieval\\) \"Thesaurus \\(information retrieval\\)\") * [Treebank](/wiki/Treebank \"Treebank\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 985
  },
  {
    "page_content": "* [Thesaurus (information retrieval)](/wiki/Thesaurus_\\(information_retrieval\\) \"Thesaurus \\(information retrieval\\)\") * [Treebank](/wiki/Treebank \"Treebank\") * [Universal Dependencies](/wiki/Universal_Dependencies \"Universal Dependencies\") Data| * [BabelNet](/wiki/BabelNet \"BabelNet\") * [Bank of English](/wiki/Bank_of_English \"Bank of English\") * [DBpedia](/wiki/DBpedia \"DBpedia\") * [FrameNet](/wiki/FrameNet \"FrameNet\") * [Google Ngram Viewer](/wiki/Google_Ngram_Viewer \"Google Ngram Viewer\") * [UBY](/wiki/UBY \"UBY\") * [WordNet](/wiki/WordNet \"WordNet\") * [Wikidata](/wiki/Wikidata \"Wikidata\") [Automatic identification and data capture](/wiki/Automatic_identification_and_data_capture \"Automatic identification and data capture\")| * [Speech recognition](/wiki/Speech_recognition \"Speech recognition\") * [Speech segmentation](/wiki/Speech_segmentation \"Speech segmentation\") * [Speech synthesis](/wiki/Speech_synthesis \"Speech synthesis\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 944
  },
  {
    "page_content": "* [Speech segmentation](/wiki/Speech_segmentation \"Speech segmentation\") * [Speech synthesis](/wiki/Speech_synthesis \"Speech synthesis\") * [Natural language generation](/wiki/Natural_language_generation \"Natural language generation\") * [Optical character recognition](/wiki/Optical_character_recognition \"Optical character recognition\") [Topic model](/wiki/Topic_model \"Topic model\")| * [Document classification](/wiki/Document_classification \"Document classification\") * [Latent Dirichlet allocation](/wiki/Latent_Dirichlet_allocation \"Latent Dirichlet allocation\") * [Pachinko allocation](/wiki/Pachinko_allocation \"Pachinko allocation\") [Computer-assisted reviewing](/wiki/Computer-assisted_reviewing \"Computer-assisted reviewing\")| * [Automated essay scoring](/wiki/Automated_essay_scoring \"Automated essay scoring\") * [Concordancer](/wiki/Concordancer \"Concordancer\") * [Grammar checker](/wiki/Grammar_checker \"Grammar checker\") * [Predictive text](/wiki/Predictive_text \"Predictive text\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 994
  },
  {
    "page_content": "* [Concordancer](/wiki/Concordancer \"Concordancer\") * [Grammar checker](/wiki/Grammar_checker \"Grammar checker\") * [Predictive text](/wiki/Predictive_text \"Predictive text\") * [Pronunciation assessment](/wiki/Pronunciation_assessment \"Pronunciation assessment\") * [Spell checker](/wiki/Spell_checker \"Spell checker\") [Natural language user interface](/wiki/Natural-language_user_interface \"Natural-language user interface\")| * [Chatbot](/wiki/Chatbot \"Chatbot\") * [Interactive fiction](/wiki/Interactive_fiction \"Interactive fiction\") * [Question answering](/wiki/Question_answering \"Question answering\") * [Virtual assistant](/wiki/Virtual_assistant \"Virtual assistant\") * [Voice user interface](/wiki/Voice_user_interface \"Voice user interface\") Related| * [Formal semantics](/wiki/Formal_semantics_\\(natural_language\\) \"Formal semantics \\(natural language\\)\") * [Hallucination](/wiki/Hallucination_\\(artificial_intelligence\\) \"Hallucination \\(artificial intelligence\\)\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 973
  },
  {
    "page_content": "* [Hallucination](/wiki/Hallucination_\\(artificial_intelligence\\) \"Hallucination \\(artificial intelligence\\)\") * [Natural Language Toolkit](/wiki/Natural_Language_Toolkit \"Natural Language Toolkit\") * [spaCy](/wiki/SpaCy \"SpaCy\") show * [v](/wiki/Template:Artificial_intelligence_navbox \"Template:Artificial intelligence navbox\") * [t](/wiki/Template_talk:Artificial_intelligence_navbox \"Template talk:Artificial intelligence navbox\") * [e](/wiki/Special:EditPage/Template:Artificial_intelligence_navbox \"Special:EditPage/Template:Artificial intelligence navbox\") [Artificial intelligence](/wiki/Artificial_intelligence \"Artificial intelligence\") (AI) [History](/wiki/History_of_artificial_intelligence \"History of artificial intelligence\") ([timeline](/wiki/Timeline_of_artificial_intelligence \"Timeline of artificial intelligence\")) Concepts| * [Parameter](/wiki/Parameter \"Parameter\") * [Hyperparameter](/wiki/Hyperparameter_\\(machine_learning\\) \"Hyperparameter \\(machine learning\\)\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 987
  },
  {
    "page_content": "Concepts| * [Parameter](/wiki/Parameter \"Parameter\") * [Hyperparameter](/wiki/Hyperparameter_\\(machine_learning\\) \"Hyperparameter \\(machine learning\\)\") * [Loss functions](/wiki/Loss_functions_for_classification \"Loss functions for classification\") * [Regression](/wiki/Regression_analysis \"Regression analysis\") * [Bias–variance tradeoff](/wiki/Bias%E2%80%93variance_tradeoff \"Bias–variance tradeoff\") * [Double descent](/wiki/Double_descent \"Double descent\") * [Overfitting](/wiki/Overfitting \"Overfitting\") * [Clustering](/wiki/Cluster_analysis \"Cluster analysis\") * [Gradient descent](/wiki/Gradient_descent \"Gradient descent\") * [SGD](/wiki/Stochastic_gradient_descent \"Stochastic gradient descent\") * [Quasi-Newton method](/wiki/Quasi-Newton_method \"Quasi-Newton method\") * [Conjugate gradient method](/wiki/Conjugate_gradient_method \"Conjugate gradient method\") * [Backpropagation](/wiki/Backpropagation \"Backpropagation\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 929
  },
  {
    "page_content": "* [Conjugate gradient method](/wiki/Conjugate_gradient_method \"Conjugate gradient method\") * [Backpropagation](/wiki/Backpropagation \"Backpropagation\") * [Attention](/wiki/Attention_\\(machine_learning\\) \"Attention \\(machine learning\\)\") * [Convolution](/wiki/Convolution \"Convolution\") * [Normalization](/wiki/Normalization_\\(machine_learning\\) \"Normalization \\(machine learning\\)\") * [Batchnorm](/wiki/Batch_normalization \"Batch normalization\") * [Activation](/wiki/Activation_function \"Activation function\") * [Softmax](/wiki/Softmax_function \"Softmax function\") * [Sigmoid](/wiki/Sigmoid_function \"Sigmoid function\") * [Rectifier](/wiki/Rectifier_\\(neural_networks\\) \"Rectifier \\(neural networks\\)\") * [Gating](/wiki/Gating_mechanism \"Gating mechanism\") * [Weight initialization](/wiki/Weight_initialization \"Weight initialization\") * [Regularization](/wiki/Regularization_\\(mathematics\\) \"Regularization \\(mathematics\\)\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 925
  },
  {
    "page_content": "* [Weight initialization](/wiki/Weight_initialization \"Weight initialization\") * [Regularization](/wiki/Regularization_\\(mathematics\\) \"Regularization \\(mathematics\\)\") * [Datasets](/wiki/Training,_validation,_and_test_data_sets \"Training, validation, and test data sets\") * [Augmentation](/wiki/Data_augmentation \"Data augmentation\") * [Prompt engineering](/wiki/Prompt_engineering \"Prompt engineering\") * [Reinforcement learning](/wiki/Reinforcement_learning \"Reinforcement learning\") * [Q-learning](/wiki/Q-learning \"Q-learning\") * [SARSA](/wiki/State%E2%80%93action%E2%80%93reward%E2%80%93state%E2%80%93action \"State–action–reward–state–action\") * [Imitation](/wiki/Imitation_learning \"Imitation learning\") * [Policy gradient](/wiki/Policy_gradient_method \"Policy gradient method\") * [Diffusion](/wiki/Diffusion_process \"Diffusion process\") * [Latent diffusion model](/wiki/Latent_diffusion_model \"Latent diffusion model\") * [Autoregression](/wiki/Autoregressive_model \"Autoregressive model\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 996
  },
  {
    "page_content": "* [Latent diffusion model](/wiki/Latent_diffusion_model \"Latent diffusion model\") * [Autoregression](/wiki/Autoregressive_model \"Autoregressive model\") * [Adversary](/wiki/Adversarial_machine_learning \"Adversarial machine learning\") * [RAG](/wiki/Retrieval-augmented_generation \"Retrieval-augmented generation\") * [Uncanny valley](/wiki/Uncanny_valley \"Uncanny valley\") * [RLHF](/wiki/Reinforcement_learning_from_human_feedback \"Reinforcement learning from human feedback\") * [Self-supervised learning](/wiki/Self-supervised_learning \"Self-supervised learning\") * [Reflection](/wiki/Reflection_\\(artificial_intelligence\\) \"Reflection \\(artificial intelligence\\)\") * [Recursive self-improvement](/wiki/Recursive_self-improvement \"Recursive self-improvement\") * [Hallucination](/wiki/Hallucination_\\(artificial_intelligence\\) \"Hallucination \\(artificial intelligence\\)\") * [Word embedding](/wiki/Word_embedding \"Word embedding\") * [Vibe coding](/wiki/Vibe_coding \"Vibe coding\") Applications|",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 989
  },
  {
    "page_content": "* [Word embedding](/wiki/Word_embedding \"Word embedding\") * [Vibe coding](/wiki/Vibe_coding \"Vibe coding\") Applications| * [Machine learning](/wiki/Machine_learning \"Machine learning\") * [In-context learning](/wiki/Prompt_engineering#In-context_learning \"Prompt engineering\") * [Artificial neural network](/wiki/Neural_network_\\(machine_learning\\) \"Neural network \\(machine learning\\)\") * [Deep learning](/wiki/Deep_learning \"Deep learning\") * [Language model](/wiki/Language_model \"Language model\") * Large language model * [NMT](/wiki/Neural_machine_translation \"Neural machine translation\") * [Reasoning language model](/wiki/Reasoning_language_model \"Reasoning language model\") * [Model Context Protocol](/wiki/Model_Context_Protocol \"Model Context Protocol\") * [Intelligent agent](/wiki/Intelligent_agent \"Intelligent agent\") * [Artificial human companion](/wiki/Artificial_human_companion \"Artificial human companion\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 924
  },
  {
    "page_content": "* [Intelligent agent](/wiki/Intelligent_agent \"Intelligent agent\") * [Artificial human companion](/wiki/Artificial_human_companion \"Artificial human companion\") * [Humanity's Last Exam](/wiki/Humanity%27s_Last_Exam \"Humanity's Last Exam\") * [Artificial general intelligence (AGI)](/wiki/Artificial_general_intelligence \"Artificial general intelligence\") Implementations| | Audio–visual| * [AlexNet](/wiki/AlexNet \"AlexNet\") * [WaveNet](/wiki/WaveNet \"WaveNet\") * [Human image synthesis](/wiki/Human_image_synthesis \"Human image synthesis\") * [HWR](/wiki/Handwriting_recognition \"Handwriting recognition\") * [OCR](/wiki/Optical_character_recognition \"Optical character recognition\") * [Speech synthesis](/wiki/Deep_learning_speech_synthesis \"Deep learning speech synthesis\") * [15.ai](/wiki/15.ai \"15.ai\") * [ElevenLabs](/wiki/ElevenLabs \"ElevenLabs\") * [Speech recognition](/wiki/Speech_recognition \"Speech recognition\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 920
  },
  {
    "page_content": "* [15.ai](/wiki/15.ai \"15.ai\") * [ElevenLabs](/wiki/ElevenLabs \"ElevenLabs\") * [Speech recognition](/wiki/Speech_recognition \"Speech recognition\") * [Whisper](/wiki/Whisper_\\(speech_recognition_system\\) \"Whisper \\(speech recognition system\\)\") * [Facial recognition](/wiki/Facial_recognition_system \"Facial recognition system\") * [AlphaFold](/wiki/AlphaFold \"AlphaFold\") * [Text-to-image models](/wiki/Text-to-image_model \"Text-to-image model\") * [Aurora](/wiki/Aurora_\\(text-to-image_model\\) \"Aurora \\(text-to-image model\\)\") * [DALL-E](/wiki/DALL-E \"DALL-E\") * [Firefly](/wiki/Adobe_Firefly \"Adobe Firefly\") * [Flux](/wiki/Flux_\\(text-to-image_model\\) \"Flux \\(text-to-image model\\)\") * [Ideogram](/wiki/Ideogram_\\(text-to-image_model\\) \"Ideogram \\(text-to-image model\\)\") * [Imagen](/wiki/Imagen_\\(text-to-image_model\\) \"Imagen \\(text-to-image model\\)\") * [Midjourney](/wiki/Midjourney \"Midjourney\") * [Stable Diffusion](/wiki/Stable_Diffusion \"Stable Diffusion\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 965
  },
  {
    "page_content": "* [Imagen](/wiki/Imagen_\\(text-to-image_model\\) \"Imagen \\(text-to-image model\\)\") * [Midjourney](/wiki/Midjourney \"Midjourney\") * [Stable Diffusion](/wiki/Stable_Diffusion \"Stable Diffusion\") * [Text-to-video models](/wiki/Text-to-video_model \"Text-to-video model\") * [Dream Machine](/wiki/Dream_Machine_\\(text-to-video_model\\) \"Dream Machine \\(text-to-video model\\)\") * [Runway Gen](/wiki/Runway_\\(company\\) \"Runway \\(company\\)\") * [Hailuo AI](/wiki/MiniMax_\\(company\\)#Hailuo_AI \"MiniMax \\(company\\)\") * [Kling](/wiki/Kling_\\(text-to-video_model\\) \"Kling \\(text-to-video model\\)\") * [Sora](/wiki/Sora_\\(text-to-video_model\\) \"Sora \\(text-to-video model\\)\") * [Veo](/wiki/Veo_\\(text-to-video_model\\) \"Veo \\(text-to-video model\\)\") * [Music generation](/wiki/Music_and_artificial_intelligence \"Music and artificial intelligence\") * [Suno AI](/wiki/Suno_AI \"Suno AI\") * [Udio](/wiki/Udio \"Udio\") Text| * [Word2vec](/wiki/Word2vec \"Word2vec\") * [Seq2seq](/wiki/Seq2seq \"Seq2seq\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 977
  },
  {
    "page_content": "* [Suno AI](/wiki/Suno_AI \"Suno AI\") * [Udio](/wiki/Udio \"Udio\") Text| * [Word2vec](/wiki/Word2vec \"Word2vec\") * [Seq2seq](/wiki/Seq2seq \"Seq2seq\") * [GloVe](/wiki/GloVe \"GloVe\") * [BERT](/wiki/BERT_\\(language_model\\) \"BERT \\(language model\\)\") * [T5](/wiki/T5_\\(language_model\\) \"T5 \\(language model\\)\") * [Llama](/wiki/Llama_\\(language_model\\) \"Llama \\(language model\\)\") * [Chinchilla AI](/wiki/Chinchilla_\\(language_model\\) \"Chinchilla \\(language model\\)\") * [PaLM](/wiki/PaLM \"PaLM\") * [GPT](/wiki/Generative_pre-trained_transformer \"Generative pre-trained transformer\") * [1](/wiki/GPT-1 \"GPT-1\") * [2](/wiki/GPT-2 \"GPT-2\") * [3](/wiki/GPT-3 \"GPT-3\") * [J](/wiki/GPT-J \"GPT-J\") * [ChatGPT](/wiki/ChatGPT \"ChatGPT\") * [4](/wiki/GPT-4 \"GPT-4\") * [4o](/wiki/GPT-4o \"GPT-4o\") * [o1](/wiki/OpenAI_o1 \"OpenAI o1\") * [o3](/wiki/OpenAI_o3 \"OpenAI o3\") * [4.5](/wiki/GPT-4.5 \"GPT-4.5\") * [4.1](/wiki/GPT-4.1 \"GPT-4.1\") * [o4-mini](/wiki/OpenAI_o4-mini \"OpenAI o4-mini\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 966
  },
  {
    "page_content": "* [o1](/wiki/OpenAI_o1 \"OpenAI o1\") * [o3](/wiki/OpenAI_o3 \"OpenAI o3\") * [4.5](/wiki/GPT-4.5 \"GPT-4.5\") * [4.1](/wiki/GPT-4.1 \"GPT-4.1\") * [o4-mini](/wiki/OpenAI_o4-mini \"OpenAI o4-mini\") * [Claude](/wiki/Claude_\\(language_model\\) \"Claude \\(language model\\)\") * [Gemini](/wiki/Gemini_\\(language_model\\) \"Gemini \\(language model\\)\") * [chatbot](/wiki/Gemini_\\(chatbot\\) \"Gemini \\(chatbot\\)\") * [Grok](/wiki/Grok_\\(chatbot\\) \"Grok \\(chatbot\\)\") * [LaMDA](/wiki/LaMDA \"LaMDA\") * [BLOOM](/wiki/BLOOM_\\(language_model\\) \"BLOOM \\(language model\\)\") * [Project Debater](/wiki/Project_Debater \"Project Debater\") * [IBM Watson](/wiki/IBM_Watson \"IBM Watson\") * [IBM Watsonx](/wiki/IBM_Watsonx \"IBM Watsonx\") * [Granite](/wiki/IBM_Granite \"IBM Granite\") * [PanGu-Σ](/wiki/Huawei_PanGu \"Huawei PanGu\") * [DeepSeek](/wiki/DeepSeek_\\(chatbot\\) \"DeepSeek \\(chatbot\\)\") * [Qwen](/wiki/Qwen \"Qwen\") Decisional| * [AlphaGo](/wiki/AlphaGo \"AlphaGo\") * [AlphaZero](/wiki/AlphaZero \"AlphaZero\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 975
  },
  {
    "page_content": "* [DeepSeek](/wiki/DeepSeek_\\(chatbot\\) \"DeepSeek \\(chatbot\\)\") * [Qwen](/wiki/Qwen \"Qwen\") Decisional| * [AlphaGo](/wiki/AlphaGo \"AlphaGo\") * [AlphaZero](/wiki/AlphaZero \"AlphaZero\") * [OpenAI Five](/wiki/OpenAI_Five \"OpenAI Five\") * [Self-driving car](/wiki/Self-driving_car \"Self-driving car\") * [MuZero](/wiki/MuZero \"MuZero\") * [Action selection](/wiki/Action_selection \"Action selection\") * [AutoGPT](/wiki/AutoGPT \"AutoGPT\") * [Robot control](/wiki/Robot_control \"Robot control\") People| * [Alan Turing](/wiki/Alan_Turing \"Alan Turing\") * [Warren Sturgis McCulloch](/wiki/Warren_Sturgis_McCulloch \"Warren Sturgis McCulloch\") * [Walter Pitts](/wiki/Walter_Pitts \"Walter Pitts\") * [John von Neumann](/wiki/John_von_Neumann \"John von Neumann\") * [Claude Shannon](/wiki/Claude_Shannon \"Claude Shannon\") * [Marvin Minsky](/wiki/Marvin_Minsky \"Marvin Minsky\") * [John McCarthy](/wiki/John_McCarthy_\\(computer_scientist\\) \"John McCarthy \\(computer scientist\\)\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 961
  },
  {
    "page_content": "* [Marvin Minsky](/wiki/Marvin_Minsky \"Marvin Minsky\") * [John McCarthy](/wiki/John_McCarthy_\\(computer_scientist\\) \"John McCarthy \\(computer scientist\\)\") * [Nathaniel Rochester](/wiki/Nathaniel_Rochester_\\(computer_scientist\\) \"Nathaniel Rochester \\(computer scientist\\)\") * [Allen Newell](/wiki/Allen_Newell \"Allen Newell\") * [Cliff Shaw](/wiki/Cliff_Shaw \"Cliff Shaw\") * [Herbert A. Simon](/wiki/Herbert_A._Simon \"Herbert A. Simon\") * [Oliver Selfridge](/wiki/Oliver_Selfridge \"Oliver Selfridge\") * [Frank Rosenblatt](/wiki/Frank_Rosenblatt \"Frank Rosenblatt\") * [Bernard Widrow](/wiki/Bernard_Widrow \"Bernard Widrow\") * [Joseph Weizenbaum](/wiki/Joseph_Weizenbaum \"Joseph Weizenbaum\") * [Seymour Papert](/wiki/Seymour_Papert \"Seymour Papert\") * [Seppo Linnainmaa](/wiki/Seppo_Linnainmaa \"Seppo Linnainmaa\") * [Paul Werbos](/wiki/Paul_Werbos \"Paul Werbos\") * [Jürgen Schmidhuber](/wiki/J%C3%BCrgen_Schmidhuber \"Jürgen Schmidhuber\") * [Yann LeCun](/wiki/Yann_LeCun \"Yann LeCun\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 981
  },
  {
    "page_content": "* [Paul Werbos](/wiki/Paul_Werbos \"Paul Werbos\") * [Jürgen Schmidhuber](/wiki/J%C3%BCrgen_Schmidhuber \"Jürgen Schmidhuber\") * [Yann LeCun](/wiki/Yann_LeCun \"Yann LeCun\") * [Geoffrey Hinton](/wiki/Geoffrey_Hinton \"Geoffrey Hinton\") * [John Hopfield](/wiki/John_Hopfield \"John Hopfield\") * [Yoshua Bengio](/wiki/Yoshua_Bengio \"Yoshua Bengio\") * [Lotfi A. Zadeh](/wiki/Lotfi_A._Zadeh \"Lotfi A. Zadeh\") * [Stephen Grossberg](/wiki/Stephen_Grossberg \"Stephen Grossberg\") * [Alex Graves](/wiki/Alex_Graves_\\(computer_scientist\\) \"Alex Graves \\(computer scientist\\)\") * [James Goodnight](/wiki/James_Goodnight \"James Goodnight\") * [Andrew Ng](/wiki/Andrew_Ng \"Andrew Ng\") * [Fei-Fei Li](/wiki/Fei-Fei_Li \"Fei-Fei Li\") * [Ilya Sutskever](/wiki/Ilya_Sutskever \"Ilya Sutskever\") * [Alex Krizhevsky](/wiki/Alex_Krizhevsky \"Alex Krizhevsky\") * [Ian Goodfellow](/wiki/Ian_Goodfellow \"Ian Goodfellow\") * [Demis Hassabis](/wiki/Demis_Hassabis \"Demis Hassabis\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 945
  },
  {
    "page_content": "* [Alex Krizhevsky](/wiki/Alex_Krizhevsky \"Alex Krizhevsky\") * [Ian Goodfellow](/wiki/Ian_Goodfellow \"Ian Goodfellow\") * [Demis Hassabis](/wiki/Demis_Hassabis \"Demis Hassabis\") * [David Silver](/wiki/David_Silver_\\(computer_scientist\\) \"David Silver \\(computer scientist\\)\") * [Andrej Karpathy](/wiki/Andrej_Karpathy \"Andrej Karpathy\") * [Ashish Vaswani](/wiki/Ashish_Vaswani \"Ashish Vaswani\") * [Noam Shazeer](/wiki/Noam_Shazeer \"Noam Shazeer\") * [Aidan Gomez](/wiki/Aidan_Gomez \"Aidan Gomez\") Architectures| * [Neural Turing machine](/wiki/Neural_Turing_machine \"Neural Turing machine\") * [Differentiable neural computer](/wiki/Differentiable_neural_computer \"Differentiable neural computer\") * [Transformer](/wiki/Transformer_\\(deep_learning_architecture\\) \"Transformer \\(deep learning architecture\\)\") * [Vision transformer (ViT)](/wiki/Vision_transformer \"Vision transformer\") * [Recurrent neural network (RNN)](/wiki/Recurrent_neural_network \"Recurrent neural network\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 975
  },
  {
    "page_content": "* [Vision transformer (ViT)](/wiki/Vision_transformer \"Vision transformer\") * [Recurrent neural network (RNN)](/wiki/Recurrent_neural_network \"Recurrent neural network\") * [Long short-term memory (LSTM)](/wiki/Long_short-term_memory \"Long short-term memory\") * [Gated recurrent unit (GRU)](/wiki/Gated_recurrent_unit \"Gated recurrent unit\") * [Echo state network](/wiki/Echo_state_network \"Echo state network\") * [Multilayer perceptron (MLP)](/wiki/Multilayer_perceptron \"Multilayer perceptron\") * [Convolutional neural network (CNN)](/wiki/Convolutional_neural_network \"Convolutional neural network\") * [Residual neural network (RNN)](/wiki/Residual_neural_network \"Residual neural network\") * [Highway network](/wiki/Highway_network \"Highway network\") * [Mamba](/wiki/Mamba_\\(deep_learning_architecture\\) \"Mamba \\(deep learning architecture\\)\") * [Autoencoder](/wiki/Autoencoder \"Autoencoder\") * [Variational autoencoder (VAE)](/wiki/Variational_autoencoder \"Variational autoencoder\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 986
  },
  {
    "page_content": "* [Autoencoder](/wiki/Autoencoder \"Autoencoder\") * [Variational autoencoder (VAE)](/wiki/Variational_autoencoder \"Variational autoencoder\") * [Generative adversarial network (GAN)](/wiki/Generative_adversarial_network \"Generative adversarial network\") * [Graph neural network (GNN)](/wiki/Graph_neural_network \"Graph neural network\") * [](/wiki/File:Symbol_portal_class.svg \"Portal\") Portals * [Technology](/wiki/Portal:Technology \"Portal:Technology\") * [Category](/wiki/Category:Artificial_intelligence \"Category:Artificial intelligence\") * [Artificial neural networks](/wiki/Category:Artificial_neural_networks \"Category:Artificial neural networks\") * [Machine learning](/wiki/Category:Machine_learning \"Category:Machine learning\") * List * [Companies](/wiki/List_of_artificial_intelligence_companies \"List of artificial intelligence companies\") * [Projects](/wiki/List_of_artificial_intelligence_projects \"List of artificial intelligence projects\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 951
  },
  {
    "page_content": "* [Projects](/wiki/List_of_artificial_intelligence_projects \"List of artificial intelligence projects\") Retrieved from \"[https://en.wikipedia.org/w/index.php?title=Large_language_model&oldid=1295827202](https://en.wikipedia.org/w/index.php?title=Large_language_model&oldid=1295827202)\" [Categories](/wiki/Help:Category \"Help:Category\"): * [Large language models](/wiki/Category:Large_language_models \"Category:Large language models\") * [Deep learning](/wiki/Category:Deep_learning \"Category:Deep learning\") * [Natural language processing](/wiki/Category:Natural_language_processing \"Category:Natural language processing\") Hidden categories: * [CS1: long volume value](/wiki/Category:CS1:_long_volume_value \"Category:CS1: long volume value\") * [Webarchive template wayback links](/wiki/Category:Webarchive_template_wayback_links \"Category:Webarchive template wayback links\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 873
  },
  {
    "page_content": "* [Webarchive template wayback links](/wiki/Category:Webarchive_template_wayback_links \"Category:Webarchive template wayback links\") * [CS1 maint: multiple names: authors list](/wiki/Category:CS1_maint:_multiple_names:_authors_list \"Category:CS1 maint: multiple names: authors list\") * [Articles with short description](/wiki/Category:Articles_with_short_description \"Category:Articles with short description\") * [Short description is different from Wikidata](/wiki/Category:Short_description_is_different_from_Wikidata \"Category:Short description is different from Wikidata\") * [Wikipedia articles that are too technical from May 2025](/wiki/Category:Wikipedia_articles_that_are_too_technical_from_May_2025 \"Category:Wikipedia articles that are too technical from May 2025\") * [All articles that are too technical](/wiki/Category:All_articles_that_are_too_technical \"Category:All articles that are too technical\")",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 914
  },
  {
    "page_content": "* [All articles that are too technical](/wiki/Category:All_articles_that_are_too_technical \"Category:All articles that are too technical\") * [Articles containing potentially dated statements from 2025](/wiki/Category:Articles_containing_potentially_dated_statements_from_2025 \"Category:Articles containing potentially dated statements from 2025\") * [All articles containing potentially dated statements](/wiki/Category:All_articles_containing_potentially_dated_statements \"Category:All articles containing potentially dated statements\") * [All articles with unsourced statements](/wiki/Category:All_articles_with_unsourced_statements \"Category:All articles with unsourced statements\") * [Articles with unsourced statements from April 2025](/wiki/Category:Articles_with_unsourced_statements_from_April_2025 \"Category:Articles with unsourced statements from April 2025\") *[v]: View this template *[t]: Discuss this template *[e]: Edit this template",
    "metadata": {
      "H1": "Large language model",
      "H2": "Further reading",
      "source": "https://en.wikipedia.org/wiki/Large_language_model",
      "title": "Large language model - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 946
  },
  {
    "page_content": "# Web scraping 22 languages * [العربية](https://ar.wikipedia.org/wiki/%D8%AA%D8%AC%D8%B1%D9%8A%D9%81_%D9%88%D9%8A%D8%A8 \"تجريف ويب – Arabic\") * [Català](https://ca.wikipedia.org/wiki/Web_scraping \"Web scraping – Catalan\") * [Čeština](https://cs.wikipedia.org/wiki/Web_scraping \"Web scraping – Czech\") * [الدارجة](https://ary.wikipedia.org/wiki/%D8%AA%D8%BA%D8%B1%D8%A7%D9%81_%D9%84%D9%88%D9%8A%D8%A8 \"تغراف لويب – Moroccan Arabic\") * [Deutsch](https://de.wikipedia.org/wiki/Screen_Scraping \"Screen Scraping – German\") * [Español](https://es.wikipedia.org/wiki/Web_scraping \"Web scraping – Spanish\") * [Euskara](https://eu.wikipedia.org/wiki/Web_scraping \"Web scraping – Basque\") * [فارسی](https://fa.wikipedia.org/wiki/%D8%AA%D8%B1%D8%A7%D8%B4%DB%8C%D8%AF%D9%86_%D9%88%D8%A8 \"تراشیدن وب – Persian\") * [Français](https://fr.wikipedia.org/wiki/Web_scraping \"Web scraping – French\") * [한국어](https://ko.wikipedia.org/wiki/%EC%9B%B9_%EC%8A%A4%ED%81%AC%EB%9E%98%ED%95%91 \"웹 스크래핑 – Korean\")",
    "metadata": {
      "H1": "Web scraping",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 983
  },
  {
    "page_content": "* [Français](https://fr.wikipedia.org/wiki/Web_scraping \"Web scraping – French\") * [한국어](https://ko.wikipedia.org/wiki/%EC%9B%B9_%EC%8A%A4%ED%81%AC%EB%9E%98%ED%95%91 \"웹 스크래핑 – Korean\") * [Bahasa Indonesia](https://id.wikipedia.org/wiki/Penggalian_web \"Penggalian web – Indonesian\") * [Íslenska](https://is.wikipedia.org/wiki/Vefs%C3%B6fnun \"Vefsöfnun – Icelandic\") * [Italiano](https://it.wikipedia.org/wiki/Web_scraping \"Web scraping – Italian\") * [Latviešu](https://lv.wikipedia.org/wiki/Rasmo%C5%A1ana \"Rasmošana – Latvian\") * [Nederlands](https://nl.wikipedia.org/wiki/Scrapen \"Scrapen – Dutch\") * [日本語](https://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B9%E3%82%AF%E3%83%AC%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0 \"ウェブスクレイピング – Japanese\") * [Português](https://pt.wikipedia.org/wiki/Web_scraping \"Web scraping – Portuguese\") * [Русский](https://ru.wikipedia.org/wiki/%D0%92%D0%B5%D0%B1-%D1%81%D0%BA%D1%80%D0%B5%D0%B9%D0%BF%D0%B8%D0%BD%D0%B3 \"Веб-скрейпинг – Russian\")",
    "metadata": {
      "H1": "Web scraping",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 982
  },
  {
    "page_content": "* [Русский](https://ru.wikipedia.org/wiki/%D0%92%D0%B5%D0%B1-%D1%81%D0%BA%D1%80%D0%B5%D0%B9%D0%BF%D0%B8%D0%BD%D0%B3 \"Веб-скрейпинг – Russian\") * [Türkçe](https://tr.wikipedia.org/wiki/Web_kaz%C4%B1ma \"Web kazıma – Turkish\") * [Українська](https://uk.wikipedia.org/wiki/Web_scraping \"Web scraping – Ukrainian\") * [粵語](https://zh-yue.wikipedia.org/wiki/%E7%B6%B2%E9%A0%81%E5%88%AE%E6%96%99 \"網頁刮料 – Cantonese\") * [中文](https://zh.wikipedia.org/wiki/%E7%BD%91%E9%A1%B5%E6%8A%93%E5%8F%96 \"网页抓取 – Chinese\") [Edit links](https://www.wikidata.org/wiki/Special:EntityPage/Q665452#sitelinks-wikipedia \"Edit interlanguage links\") * [Article](/wiki/Web_scraping \"View the content page \\[c\\]\") * [Talk](/wiki/Talk:Web_scraping \"Discuss improvements to the content page \\[t\\]\") English * [Read](/wiki/Web_scraping) * [Edit](/w/index.php?title=Web_scraping&action=edit \"Edit this page \\[e\\]\") * [View history](/w/index.php?title=Web_scraping&action=history \"Past revisions of this page \\[h\\]\") Tools Tools",
    "metadata": {
      "H1": "Web scraping",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 989
  },
  {
    "page_content": "* [Edit](/w/index.php?title=Web_scraping&action=edit \"Edit this page \\[e\\]\") * [View history](/w/index.php?title=Web_scraping&action=history \"Past revisions of this page \\[h\\]\") Tools Tools move to sidebar hide Actions * [Read](/wiki/Web_scraping) * [Edit](/w/index.php?title=Web_scraping&action=edit \"Edit this page \\[e\\]\") * [View history](/w/index.php?title=Web_scraping&action=history) General * [What links here](/wiki/Special:WhatLinksHere/Web_scraping \"List of all English Wikipedia pages containing links to this page \\[j\\]\") * [Related changes](/wiki/Special:RecentChangesLinked/Web_scraping \"Recent changes in pages linked from this page \\[k\\]\") * [Upload file](//en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard \"Upload files \\[u\\]\") * [Permanent link](/w/index.php?title=Web_scraping&oldid=1282903091 \"Permanent link to this revision of this page\") * [Page information](/w/index.php?title=Web_scraping&action=info \"More information about this page\")",
    "metadata": {
      "H1": "Web scraping",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 963
  },
  {
    "page_content": "* [Page information](/w/index.php?title=Web_scraping&action=info \"More information about this page\") * [Cite this page](/w/index.php?title=Special:CiteThisPage&page=Web_scraping&id=1282903091&wpFormIdentifier=titleform \"Information on how to cite this page\") * [Get shortened URL](/w/index.php?title=Special:UrlShortener&url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FWeb_scraping) * [Download QR code](/w/index.php?title=Special:QrCode&url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FWeb_scraping) Print/export * [Download as PDF](/w/index.php?title=Special:DownloadAsPdf&page=Web_scraping&action=show-download-screen \"Download this page as a PDF file\") * [Printable version](/w/index.php?title=Web_scraping&printable=yes \"Printable version of this page \\[p\\]\") In other projects * [Wikimedia Commons](https://commons.wikimedia.org/wiki/Category:Web_scraping) * [Wikidata item](https://www.wikidata.org/wiki/Special:EntityPage/Q665452 \"Structured data on this page hosted by Wikidata \\[g\\]\") Appearance",
    "metadata": {
      "H1": "Web scraping",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 996
  },
  {
    "page_content": "* [Wikidata item](https://www.wikidata.org/wiki/Special:EntityPage/Q665452 \"Structured data on this page hosted by Wikidata \\[g\\]\") Appearance move to sidebar hide From Wikipedia, the free encyclopedia For broader coverage of this topic, see [Data scraping](/wiki/Data_scraping \"Data scraping\"). Data scraping used for extracting data from websites \"Web scraper\" redirects here. For websites that scrape content, see [Scraper site](/wiki/Scraper_site \"Scraper site\"). [](/wiki/File:Question_book-new.svg)| This article **needs additional citations for[verification](/wiki/Wikipedia:Verifiability \"Wikipedia:Verifiability\")**. Please help [improve this article](/wiki/Special:EditPage/Web_scraping \"Special:EditPage/Web scraping\") by [adding citations to reliable sources](/wiki/Help:Referencing_for_beginners \"Help:Referencing for beginners\"). Unsourced material may be challenged and removed.",
    "metadata": {
      "H1": "Web scraping",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 893
  },
  {
    "page_content": "_Find sources:_ [\"Web scraping\"](https://www.google.com/search?as_eq=wikipedia&q=%22Web+scraping%22) – [news](https://www.google.com/search?tbm=nws&q=%22Web+scraping%22+-wikipedia&tbs=ar:1) **·** [newspapers](https://www.google.com/search?&q=%22Web+scraping%22&tbs=bkt:s&tbm=bks) **·** [books](https://www.google.com/search?tbs=bks:1&q=%22Web+scraping%22+-wikipedia) **·** [scholar](https://scholar.google.com/scholar?q=%22Web+scraping%22) **·** [JSTOR](https://www.jstor.org/action/doBasicSearch?Query=%22Web+scraping%22&acc=on&wc=on) _( April 2023)__([Learn how and when to remove this message](/wiki/Help:Maintenance_template_removal \"Help:Maintenance template removal\"))_",
    "metadata": {
      "H1": "Web scraping",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 675
  },
  {
    "page_content": "**Web scraping** , **web harvesting** , or **web data extraction** is [data scraping](/wiki/Data_scraping \"Data scraping\") used for [extracting data](/wiki/Data_extraction \"Data extraction\") from [websites](/wiki/Website \"Website\").[1] Web scraping software may directly access the [World Wide Web](/wiki/World_Wide_Web \"World Wide Web\") using the [Hypertext Transfer Protocol](/wiki/Hypertext_Transfer_Protocol \"Hypertext Transfer Protocol\") or a web browser. While web scraping can be done manually by a software user, the term typically refers to automated processes implemented using a [bot](/wiki/Internet_bot \"Internet bot\") or [web crawler](/wiki/Web_crawler \"Web crawler\"). It is a form of copying in which specific data is gathered and copied from the web, typically into a central local [database](/wiki/Database \"Database\") or [spreadsheet](/wiki/Spreadsheet \"Spreadsheet\"), for later [retrieval](/wiki/Data_retrieval \"Data retrieval\") or [analysis](/wiki/Data_analysis \"Data analysis\").",
    "metadata": {
      "H1": "Web scraping",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 998
  },
  {
    "page_content": "Scraping a web page involves fetching it and then extracting data from it. Fetching is the downloading of a page (which a browser does when a user views a page). Therefore, web crawling is a main component of web scraping, to fetch pages for later processing. Having fetched, extraction can take place. The content of a page may be [parsed](/wiki/Parsing \"Parsing\"), searched and reformatted, and its data copied into a spreadsheet or loaded into a database. Web scrapers typically take something out of a page, to make use of it for another purpose somewhere else. An example would be finding and copying names and telephone numbers, companies and their URLs, or e-mail addresses to a list (contact scraping).",
    "metadata": {
      "H1": "Web scraping",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 710
  },
  {
    "page_content": "As well as [contact scraping](/wiki/Contact_scraping \"Contact scraping\"), web scraping is used as a component of applications used for [web indexing](/wiki/Web_indexing \"Web indexing\"), [web mining](/wiki/Web_mining \"Web mining\") and [data mining](/wiki/Data_mining \"Data mining\"), online price change monitoring and [price comparison](/wiki/Comparison_shopping_website \"Comparison shopping website\"), product review scraping (to watch the competition), gathering real estate listings, weather data monitoring, [website change detection](/wiki/Change_detection_and_notification \"Change detection and notification\"), research, tracking online presence and reputation, [web mashup](/wiki/Web_mashup \"Web mashup\"), and [web data integration](/wiki/Web_data_integration \"Web data integration\").",
    "metadata": {
      "H1": "Web scraping",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 790
  },
  {
    "page_content": "[Web pages](/wiki/Web_page \"Web page\") are built using text-based mark-up languages ([HTML](/wiki/HTML \"HTML\") and [XHTML](/wiki/XHTML \"XHTML\")), and frequently contain a wealth of useful data in text form. However, most web pages are designed for human [end-users](/wiki/End-user_\\(computer_science\\) \"End-user \\(computer science\\)\") and not for ease of automated use. As a result, specialized tools and software have been developed to facilitate the scraping of web pages. Web scraping applications include [market research](/wiki/Market_research \"Market research\"), price comparison, content monitoring, and more. Businesses rely on web scraping services to efficiently gather and utilize this data. Newer forms of web scraping involve monitoring [data feeds](/wiki/Data_feed \"Data feed\") from web servers. For example, [JSON](/wiki/JSON \"JSON\") is commonly used as a transport mechanism between the client and the web server.",
    "metadata": {
      "H1": "Web scraping",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 929
  },
  {
    "page_content": "There are methods that some websites use to prevent web scraping, such as detecting and disallowing bots from crawling (viewing) their pages. In response, web scraping systems use techniques involving [DOM](/wiki/Document_Object_Model \"Document Object Model\") parsing, [computer vision](/wiki/Computer_vision \"Computer vision\") and [natural language processing](/wiki/Natural_language_processing \"Natural language processing\") to simulate human browsing to enable gathering web page content for offline parsing.",
    "metadata": {
      "H1": "Web scraping",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 511
  },
  {
    "page_content": "## History [[edit](/w/index.php?title=Web_scraping&action=edit&section=1 \"Edit section: History\")] After the [birth of the World Wide Web](/wiki/History_of_the_World_Wide_Web \"History of the World Wide Web\") in 1989, the first web robot,[2] [World Wide Web Wanderer](/wiki/World_Wide_Web_Wanderer \"World Wide Web Wanderer\"), was created in June 1993, which was intended only to measure the size of the web. In December 1993, the first crawler-based web search engine, [JumpStation](/wiki/JumpStation \"JumpStation\"), was launched. As there were fewer websites available on the web, search engines at that time used to rely on human administrators to collect and format links. In comparison, Jump Station was the first WWW search engine to rely on a web robot.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "History",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 758
  },
  {
    "page_content": "In 2000, the first Web API and API crawler were created. An [API](/wiki/Application_programming_interface \"Application programming interface\") (Application Programming Interface) is an interface that makes it much easier to develop a program by providing the building blocks. In 2000, [Salesforce](/wiki/Salesforce.com \"Salesforce.com\") and [eBay](/wiki/EBay \"EBay\") launched their own API, with which programmers could access and download some of the data available to the public. Since then, many websites offer web APIs for people to access their public database.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "History",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 566
  },
  {
    "page_content": "## Techniques [[edit](/w/index.php?title=Web_scraping&action=edit&section=2 \"Edit section: Techniques\")] Web scraping is the process of automatically mining data or collecting information from the World Wide Web. It is a field with active developments sharing a common goal with the [semantic web](/wiki/Semantic_web \"Semantic web\") vision, an ambitious initiative that still requires breakthroughs in text processing, semantic understanding, artificial intelligence and [human-computer interactions](/wiki/Human-computer_interaction \"Human-computer interaction\").",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Techniques",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 564
  },
  {
    "page_content": "### Human copy-and-paste [[edit](/w/index.php?title=Web_scraping&action=edit&section=3 \"Edit section: Human copy-and-paste\")] The simplest form of web scraping is manually copying and pasting data from a web page into a text file or spreadsheet. Sometimes even the best web-scraping technology cannot replace a human's manual examination and copy-and-paste, and sometimes this may be the only workable solution when the websites for scraping explicitly set up barriers to prevent machine automation.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Techniques",
      "H3": "Human copy-and-paste",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 499
  },
  {
    "page_content": "### Text pattern matching [[edit](/w/index.php?title=Web_scraping&action=edit&section=4 \"Edit section: Text pattern matching\")] A simple yet powerful approach to extract information from web pages can be based on the UNIX [grep](/wiki/Grep \"Grep\") command or [regular expression](/wiki/Regular_expression \"Regular expression\")-matching facilities of programming languages (for instance [Perl](/wiki/Perl \"Perl\") or [Python](/wiki/Python_\\(programming_language\\) \"Python \\(programming language\\)\")).",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Techniques",
      "H3": "Text pattern matching",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 498
  },
  {
    "page_content": "### HTTP programming [[edit](/w/index.php?title=Web_scraping&action=edit&section=5 \"Edit section: HTTP programming\")] [Static](/wiki/Static_web_page \"Static web page\") and [dynamic web pages](/wiki/Dynamic_web_page \"Dynamic web page\") can be retrieved by posting HTTP requests to the remote web server using [socket programming](/wiki/Socket_programming \"Socket programming\").",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Techniques",
      "H3": "HTTP programming",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 376
  },
  {
    "page_content": "### HTML parsing [[edit](/w/index.php?title=Web_scraping&action=edit&section=6 \"Edit section: HTML parsing\")] Many websites have large collections of pages generated dynamically from an underlying structured source like a database. Data of the same category are typically encoded into similar pages by a common script or template. In data mining, a program that detects such templates in a particular information source, extracts its content, and translates it into a relational form, is called a [wrapper](/wiki/Wrapper_\\(data_mining\\) \"Wrapper \\(data mining\\)\"). Wrapper generation algorithms assume that input pages of a wrapper induction system conform to a common template and that they can be easily identified in terms of a URL common scheme.[3] Moreover, some [semi-structured data](/wiki/Semi-structured_data \"Semi-structured data\") query languages, such as [XQuery](/wiki/XQuery \"XQuery\") and the HTQL, can be used to parse HTML pages and to retrieve and transform page content.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Techniques",
      "H3": "HTML parsing",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 988
  },
  {
    "page_content": "### DOM parsing [[edit](/w/index.php?title=Web_scraping&action=edit&section=7 \"Edit section: DOM parsing\")] Further information: [Document Object Model](/wiki/Document_Object_Model \"Document Object Model\") By using a program such as [Selenium](/wiki/Selenium_\\(software\\) \"Selenium \\(software\\)\") or [Playwright](/wiki/Playwright_\\(software\\) \"Playwright \\(software\\)\"), developers can control a web browser such as [Chrome](/wiki/ChromeOS \"ChromeOS\") or [Firefox](/wiki/Firefox \"Firefox\") wherein they can load, navigate, and retrieve data from websites. This method can be especially useful for scraping data from dynamic sites since a web browser will fully load each page. Once an entire page is loaded, you can access and parse the [DOM](/wiki/Document_Object_Model \"Document Object Model\") using an expression language such as [XPath](/wiki/XPath \"XPath\").",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Techniques",
      "H3": "DOM parsing",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 862
  },
  {
    "page_content": "### Vertical aggregation [[edit](/w/index.php?title=Web_scraping&action=edit&section=8 \"Edit section: Vertical aggregation\")] There are several companies that have developed vertical specific harvesting platforms. These platforms create and monitor a multitude of \"bots\" for specific verticals with no \"man in the loop\" (no direct human involvement), and no work related to a specific target site. The preparation involves establishing the knowledge base for the entire vertical and then the platform creates the bots automatically. The platform's robustness is measured by the quality of the information it retrieves (usually number of fields) and its scalability (how quick it can scale up to hundreds or thousands of sites). This scalability is mostly used to target the [Long Tail](/wiki/Long_Tail \"Long Tail\") of sites that common aggregators find complicated or too labor-intensive to harvest content from.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Techniques",
      "H3": "Vertical aggregation",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 912
  },
  {
    "page_content": "### Semantic annotation recognizing [[edit](/w/index.php?title=Web_scraping&action=edit&section=9 \"Edit section: Semantic annotation recognizing\")] The pages being scraped may embrace [metadata](/wiki/Metadata \"Metadata\") or semantic markups and annotations, which can be used to locate specific data snippets. If the annotations are embedded in the pages, as [Microformat](/wiki/Microformat \"Microformat\") does, this technique can be viewed as a special case of DOM parsing. In another case, the annotations, organized into a semantic layer,[4] are stored and managed separately from the web pages, so the scrapers can retrieve data schema and instructions from this layer before scraping the pages.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Techniques",
      "H3": "Semantic annotation recognizing",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 700
  },
  {
    "page_content": "### Computer vision web-page analysis [[edit](/w/index.php?title=Web_scraping&action=edit&section=10 \"Edit section: Computer vision web-page analysis\")] There are efforts using [machine learning](/wiki/Machine_learning \"Machine learning\") and [computer vision](/wiki/Computer_vision \"Computer vision\") that attempt to identify and extract information from web pages by interpreting pages visually as a human being might.[5]",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Techniques",
      "H3": "Computer vision web-page analysis",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 423
  },
  {
    "page_content": "### AI-powered document understanding [[edit](/w/index.php?title=Web_scraping&action=edit&section=11 \"Edit section: AI-powered document understanding\")] Uses advanced AI to interpret and process web page content contextually, extracting relevant information, transforming data, and customizing outputs based on the content's structure and meaning. This method enables more intelligent and flexible data extraction, accommodating complex and dynamic web content.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Techniques",
      "H3": "AI-powered document understanding",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 461
  },
  {
    "page_content": "## Legal issues [[edit](/w/index.php?title=Web_scraping&action=edit&section=12 \"Edit section: Legal issues\")] | The examples and perspective in this section **deal primarily with the United States and do not represent a[worldwide view](/wiki/Wikipedia:WikiProject_Countering_systemic_bias \"Wikipedia:WikiProject Countering systemic bias\") of the subject**. You may [improve this section](https://en.wikipedia.org/w/index.php?title=Web_scraping&action=edit), discuss the issue on the [talk page](/wiki/Talk:Web_scraping \"Talk:Web scraping\"), or create a new section, as appropriate. _( October 2015)__([Learn how and when to remove this message](/wiki/Help:Maintenance_template_removal \"Help:Maintenance template removal\"))_ The legality of web scraping varies across the world. In general, web scraping may be against the [terms of service](/wiki/Terms_of_service \"Terms of service\") of some websites, but the enforceability of these terms is unclear.[6]",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 954
  },
  {
    "page_content": "### United States [[edit](/w/index.php?title=Web_scraping&action=edit&section=13 \"Edit section: United States\")]",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "United States",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 112
  },
  {
    "page_content": "[[edit](/w/index.php?title=Web_scraping&action=edit&section=13 \"Edit section: United States\")] In the United States, website owners can use three major [legal claims](/wiki/Cause_of_action \"Cause of action\") to prevent undesired web scraping: (1) copyright infringement (compilation), (2) violation of the [Computer Fraud and Abuse Act](/wiki/Computer_Fraud_and_Abuse_Act \"Computer Fraud and Abuse Act\") (\"CFAA\"), and (3) [trespass to chattel](/wiki/Trespass_to_chattels \"Trespass to chattels\").[7] However, the effectiveness of these claims relies upon meeting various criteria, and the case law is still evolving. For example, with regard to copyright, while outright duplication of original expression will in many cases be illegal, in the United States the courts ruled in [_Feist Publications v. Rural Telephone Service_](/wiki/Feist_Publications,_Inc.,_v._Rural_Telephone_Service_Co. \"Feist Publications, Inc., v. Rural Telephone Service Co.\") that duplication of facts is allowable.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "United States",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 989
  },
  {
    "page_content": "U.S. courts have acknowledged that users of \"scrapers\" or \"robots\" may be held liable for committing [trespass to chattels](/wiki/Trespass_to_chattels \"Trespass to chattels\"),[8][9] which involves a computer system itself being considered personal property upon which the user of a scraper is trespassing. The best known of these cases, _[eBay v. Bidder's Edge](/wiki/EBay_v._Bidder%27s_Edge \"EBay v. Bidder's Edge\")_ , resulted in an injunction ordering Bidder's Edge to stop accessing, collecting, and indexing auctions from the eBay web site. This case involved automatic placing of bids, known as [auction sniping](/wiki/Auction_sniping \"Auction sniping\")",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "United States",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 659
  },
  {
    "page_content": ". This case involved automatic placing of bids, known as [auction sniping](/wiki/Auction_sniping \"Auction sniping\"). However, in order to succeed on a claim of trespass to [chattels](/wiki/Personal_property \"Personal property\"), the [plaintiff](/wiki/Plaintiff \"Plaintiff\") must demonstrate that the [defendant](/wiki/Defendant \"Defendant\") intentionally and without authorization interfered with the plaintiff's possessory interest in the computer system and that the defendant's unauthorized use caused damage to the plaintiff. Not all cases of web spidering brought before the courts have been considered trespass to chattels.[10]",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "United States",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 633
  },
  {
    "page_content": "One of the first major tests of [screen scraping](/wiki/Screen_scraping \"Screen scraping\") involved [American Airlines](/wiki/American_Airlines \"American Airlines\") (AA), and a firm called FareChase.[11] AA successfully obtained an [injunction](/wiki/Injunction \"Injunction\") from a Texas trial court, stopping FareChase from selling software that enables users to compare online fares if the software also searches AA's website. The airline argued that FareChase's websearch software trespassed on AA's servers when it collected the publicly available data. FareChase filed an appeal in March 2003. By June, FareChase and AA agreed to settle and the appeal was dropped.[12]",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "United States",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 674
  },
  {
    "page_content": "[Southwest Airlines](/wiki/Southwest_Airlines \"Southwest Airlines\") has also challenged screen-scraping practices, and has involved both FareChase and another firm, Outtask, in a legal claim. Southwest Airlines charged that the screen-scraping is Illegal since it is an example of \"Computer Fraud and Abuse\" and has led to \"Damage and Loss\" and \"Unauthorized Access\" of Southwest's site. It also constitutes \"Interference with Business Relations\", \"Trespass\", and \"Harmful Access by Computer\". They also claimed that screen-scraping constitutes what is legally known as \"Misappropriation and Unjust Enrichment\", as well as being a breach of the web site's user agreement. Outtask denied all these claims, claiming that the prevailing law, in this case, should be [US Copyright law](/wiki/US_Copyright_law \"US Copyright law\") and that under copyright, the pieces of information being scraped would not be subject to copyright protection",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "United States",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 935
  },
  {
    "page_content": ". Although the cases were never resolved in the [Supreme Court of the United States](/wiki/Supreme_Court_of_the_United_States \"Supreme Court of the United States\"), FareChase was eventually shuttered by parent company [Yahoo!](/wiki/Yahoo! \"Yahoo!\"), and Outtask was purchased by travel expense company Concur.[13] In 2012, a startup called 3Taps scraped classified housing ads from Craigslist. Craigslist sent 3Taps a cease-and-desist letter and blocked their IP addresses and later sued, in _[Craigslist v. 3Taps](/wiki/Craigslist_v._3Taps \"Craigslist v. 3Taps\")_. The court held that the cease-and-desist letter and IP blocking was sufficient for Craigslist to properly claim that 3Taps had violated the [Computer Fraud and Abuse Act](/wiki/Computer_Fraud_and_Abuse_Act \"Computer Fraud and Abuse Act\") (CFAA).",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "United States",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 812
  },
  {
    "page_content": "Although these are early scraping decisions, and the theories of liability are not uniform, it is difficult to ignore a pattern emerging that the courts are prepared to protect proprietary content on commercial sites from uses which are undesirable to the owners of such sites. However, the degree of protection for such content is not settled and will depend on the type of access made by the scraper, the amount of information accessed and copied, the degree to which the access adversely affects the site owner's system and the types and manner of prohibitions on such conduct.[14]",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "United States",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 584
  },
  {
    "page_content": "While the law in this area becomes more settled, entities contemplating using scraping programs to access a public web site should also consider whether such action is authorized by reviewing the terms of use and other terms or notices posted on or made available through the site. In _[Cvent Inc.](/wiki/Cvent \"Cvent\") v",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "United States",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 321
  },
  {
    "page_content": ". In _[Cvent Inc.](/wiki/Cvent \"Cvent\") v. [Eventbrite Inc.](/wiki/Eventbrite \"Eventbrite\")_ (2010), the United States [district court for the eastern district of Virginia](/wiki/United_States_District_Court_for_the_Eastern_District_of_Virginia \"United States District Court for the Eastern District of Virginia\"), ruled that the terms of use should be brought to the users' attention in order for a [browsewrap](/wiki/Browsewrap \"Browsewrap\") contract or license to be enforceable.[15] In a 2014 case, filed in the [United States District Court for the Eastern District of Pennsylvania](/wiki/United_States_District_Court_for_the_Eastern_District_of_Pennsylvania \"United States District Court for the Eastern District of Pennsylvania\"),[16] e-commerce site [QVC](/wiki/QVC \"QVC\") objected to the Pinterest-like shopping aggregator Resultly's 'scraping of QVC's site for real-time pricing data",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "United States",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 893
  },
  {
    "page_content": ". QVC alleges that Resultly \"excessively crawled\" QVC's retail site (allegedly sending 200-300 search requests to QVC's website per minute, sometimes to up to 36,000 requests per minute) which caused QVC's site to crash for two days, resulting in lost sales for QVC.[17] QVC's complaint alleges that the defendant disguised its web crawler to mask its source IP address and thus prevented QVC from quickly repairing the problem. This is a particularly interesting scraping case because QVC is seeking damages for the unavailability of their website, which QVC claims was caused by Resultly.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "United States",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 590
  },
  {
    "page_content": "In the plaintiff's web site during the period of this trial, the terms of use link are displayed among all the links of the site, at the bottom of the page as most sites on the internet. This ruling contradicts the Irish ruling described below. The court also rejected the plaintiff's argument that the browse-wrap restrictions were enforceable in view of Virginia's adoption of the Uniform Computer Information Transactions Act (UCITA)—a uniform law that many believed was in favor on common browse-wrap contracting practices.[18]",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "United States",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 531
  },
  {
    "page_content": "In _[Facebook, Inc. v. Power Ventures, Inc.](/wiki/Facebook,_Inc._v._Power_Ventures,_Inc. \"Facebook, Inc. v. Power Ventures, Inc.\")_ , a district court ruled in 2012 that Power Ventures could not scrape Facebook pages on behalf of a Facebook user. The case is on appeal, and the [Electronic Frontier Foundation](/wiki/Electronic_Frontier_Foundation \"Electronic Frontier Foundation\") filed a brief in 2015 asking that it be overturned.[19][20] In _[Associated Press v. Meltwater U.S. Holdings, Inc.](/wiki/Associated_Press_v._Meltwater_U.S._Holdings,_Inc. \"Associated Press v. Meltwater U.S. Holdings, Inc.\")_ , a court in the US held Meltwater liable for scraping and republishing news information from the Associated Press, but a court in the United Kingdom held in favor of Meltwater.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "United States",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 786
  },
  {
    "page_content": "The [Ninth Circuit](/wiki/Ninth_Circuit \"Ninth Circuit\") ruled in 2019 that web scraping did not violate the CFAA in _[hiQ Labs v. LinkedIn](/wiki/HiQ_Labs_v._LinkedIn \"HiQ Labs v. LinkedIn\")_. The case was appealed to the [United States Supreme Court](/wiki/United_States_Supreme_Court \"United States Supreme Court\"), which returned the case to the Ninth Circuit to reconsider the case in light of the 2021 Supreme Court decision in _[Van Buren v. United States](/wiki/Van_Buren_v._United_States \"Van Buren v. United States\")_ which narrowed the applicability of the CFAA.[21] On this review, the Ninth Circuit upheld their prior decision.[22] [Internet Archive](/wiki/Internet_Archive \"Internet Archive\") collects and distributes a significant number of publicly available web pages without being considered to be in violation of copyright laws.[_[citation needed](/wiki/Wikipedia:Citation_needed \"Wikipedia:Citation needed\")_]",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "United States",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 929
  },
  {
    "page_content": "### European Union [[edit](/w/index.php?title=Web_scraping&action=edit&section=14 \"Edit section: European Union\")] In February 2006, the [Danish Maritime and Commercial Court](/wiki/Maritime_and_Commercial_Court_\\(Denmark\\) \"Maritime and Commercial Court \\(Denmark\\)\") (Copenhagen) ruled that systematic crawling, indexing, and deep linking by portal site ofir.dk of real estate site Home.dk does not conflict with Danish law or the database directive of the European Union.[23]",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "European Union",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 478
  },
  {
    "page_content": "In a February 2010 case complicated by matters of jurisdiction, Ireland's High Court delivered a verdict that illustrates the [inchoate](/wiki/Inchoate_offense \"Inchoate offense\") state of developing case law. In the case of _Ryanair Ltd v Billigfluege.de GmbH_ , Ireland's High Court ruled [Ryanair's](/wiki/Ryanair \"Ryanair\") \"[click-wrap](/wiki/Clickwrap \"Clickwrap\")\" agreement to be legally binding. In contrast to the findings of the United States District Court Eastern District of Virginia and those of the Danish Maritime and Commercial Court, Justice [Michael Hanna](/wiki/Michael_Hanna_\\(judge\\) \"Michael Hanna \\(judge\\)\") ruled that the hyperlink to Ryanair's terms and conditions was plainly visible, and that placing the onus on the user to agree to terms and conditions in order to gain access to online services is sufficient to comprise a contractual relationship.[24] The decision is under appeal in Ireland's Supreme Court.[25]",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "European Union",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 946
  },
  {
    "page_content": "On April 30, 2020, the French Data Protection Authority (CNIL) released new guidelines on web scraping.[26] The CNIL guidelines made it clear that publicly available data is still personal data and cannot be repurposed without the knowledge of the person to whom that data belongs.[27]",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "European Union",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 285
  },
  {
    "page_content": "### Australia [[edit](/w/index.php?title=Web_scraping&action=edit&section=15 \"Edit section: Australia\")] In Australia, the [Spam Act 2003](/wiki/Spam_Act_2003 \"Spam Act 2003\") outlaws some forms of web harvesting, although this only applies to email addresses.[28][29]",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "Australia",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 268
  },
  {
    "page_content": "### India [[edit](/w/index.php?title=Web_scraping&action=edit&section=16 \"Edit section: India\")] Leaving a few cases dealing with IPR infringement, Indian courts have not expressly ruled on the legality of web scraping. However, since all common forms of electronic contracts are enforceable in India, violating the terms of use prohibiting data scraping will be a violation of the contract law. It will also violate the [Information Technology Act, 2000](/wiki/Information_Technology_Act,_2000#:~:text=From_Wikipedia,_the_free_encyclopedia_The_Information_Technology,in_India_dealing_with_cybercrime_and_electronic_commerce. \"Information Technology Act, 2000\"), which penalizes unauthorized access to a computer resource or extracting data from a computer resource.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Legal issues",
      "H3": "India",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 766
  },
  {
    "page_content": "## Methods to prevent web scraping [[edit](/w/index.php?title=Web_scraping&action=edit&section=17 \"Edit section: Methods to prevent web scraping\")] The administrator of a website can use various measures to stop or slow a bot. Some techniques include: * Blocking an [IP address](/wiki/IP_address \"IP address\") either manually or based on criteria such as [geolocation](/wiki/Geolocation \"Geolocation\") and [DNSRBL](/wiki/DNSBL \"DNSBL\"). This will also block all browsing from that address. * Disabling any [web service](/wiki/Web_service \"Web service\") [API](/wiki/Application_programming_interface \"Application programming interface\") that the website's system might expose.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Methods to prevent web scraping",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 675
  },
  {
    "page_content": "* Disabling any [web service](/wiki/Web_service \"Web service\") [API](/wiki/Application_programming_interface \"Application programming interface\") that the website's system might expose. * Bots sometimes declare who they are (using [user agent](/wiki/User_agent \"User agent\") [strings](/wiki/String_\\(computer_science\\) \"String \\(computer science\\)\")) and can be blocked on that basis using [robots.txt](/wiki/Robots_exclusion_standard \"Robots exclusion standard\"); '[googlebot](/wiki/Googlebot \"Googlebot\")' is an example. Other bots make no distinction between themselves and a human using a browser. * Bots can be blocked by monitoring excess traffic.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Methods to prevent web scraping",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 653
  },
  {
    "page_content": "* Bots can be blocked by monitoring excess traffic. * Bots can sometimes be blocked with tools to verify that it is a real person accessing the site, like a [CAPTCHA](/wiki/CAPTCHA \"CAPTCHA\"). Bots are sometimes coded to explicitly break specific CAPTCHA patterns or may employ third-party services that utilize human labor to read and respond in real-time to CAPTCHA challenges. They can be triggered because the bot is: 1) making too many requests in a short time, 2) using low-quality proxies, or 3) not covering the web scraper’s fingerprint properly.[30] * Commercial anti-bot services: Companies offer anti-bot and anti-scraping services for websites. A few web [application firewalls](/wiki/Application_firewall \"Application firewall\") have limited bot detection capabilities as well. However, many such solutions are not very effective.[31]",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Methods to prevent web scraping",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 848
  },
  {
    "page_content": "* Locating bots with a [honeypot](/wiki/Honeypot_\\(computing\\) \"Honeypot \\(computing\\)\") or other method to identify the IP addresses of automated crawlers. * [Obfuscation](/wiki/Obfuscation \"Obfuscation\") using [CSS sprites](/wiki/CSS_sprite \"CSS sprite\") to display such data as telephone numbers or email addresses, at the cost of [accessibility](/wiki/Web_accessibility \"Web accessibility\") to [screen reader](/wiki/Screen_reader \"Screen reader\") users. * Because bots rely on consistency in the front-end code of a target website, adding small variations to the HTML/CSS surrounding important data and navigation elements would require more human involvement in the initial set up of a bot and if done effectively may render the target website too difficult to scrape due to the diminished ability to automate the scraping process.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Methods to prevent web scraping",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 836
  },
  {
    "page_content": "* Websites can declare if crawling is allowed or not in the [robots.txt](/wiki/Robots_exclusion_standard \"Robots exclusion standard\") file and allow partial access, limit the crawl rate, specify the optimal time to crawl and more.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "Methods to prevent web scraping",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 230
  },
  {
    "page_content": "## See also [[edit](/w/index.php?title=Web_scraping&action=edit&section=18 \"Edit section: See also\")] * [Archive.today](/wiki/Archive.today \"Archive.today\") * [Comparison of feed aggregators](/wiki/Comparison_of_feed_aggregators \"Comparison of feed aggregators\") * [Data scraping](/wiki/Data_scraping \"Data scraping\") * [Data wrangling](/wiki/Data_wrangling \"Data wrangling\") * [Importer](/wiki/Importer_\\(computing\\) \"Importer \\(computing\\)\") * [Job wrapping](/wiki/Job_wrapping \"Job wrapping\") * [Knowledge extraction](/wiki/Knowledge_extraction \"Knowledge extraction\") * [OpenSocial](/wiki/OpenSocial \"OpenSocial\") * [Scraper site](/wiki/Scraper_site \"Scraper site\") * [Fake news website](/wiki/Fake_news_website \"Fake news website\") * [Spamdexing](/wiki/Spamdexing \"Spamdexing\") * [Domain name drop list](/wiki/Domain_name_drop_list \"Domain name drop list\") * [Text corpus](/wiki/Text_corpus \"Text corpus\") * [Web archiving](/wiki/Web_archiving \"Web archiving\")",
    "metadata": {
      "H1": "Web scraping",
      "H2": "See also",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 965
  },
  {
    "page_content": "* [Domain name drop list](/wiki/Domain_name_drop_list \"Domain name drop list\") * [Text corpus](/wiki/Text_corpus \"Text corpus\") * [Web archiving](/wiki/Web_archiving \"Web archiving\") * [Web crawler](/wiki/Web_crawler \"Web crawler\") * [Offline reader](/wiki/Offline_reader \"Offline reader\") * [Link farm](/wiki/Link_farm \"Link farm\") (blog network) * [Search engine scraping](/wiki/Search_engine_scraping \"Search engine scraping\") * [Web crawlers](/wiki/Category:Web_crawlers \"Category:Web crawlers\")",
    "metadata": {
      "H1": "Web scraping",
      "H2": "See also",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 499
  },
  {
    "page_content": "## References [[edit](/w/index.php?title=Web_scraping&action=edit&section=19 \"Edit section: References\")] 1. **^** Thapelo, Tsaone Swaabow; Namoshe, Molaletsa; Matsebe, Oduetse; Motshegwa, Tshiamo; Bopape, Mary-Jane Morongwa (2021-07-28). [\"SASSCAL WebSAPI: A Web Scraping Application Programming Interface to Support Access to SASSCAL's Weather Data\"](https://doi.org/10.5334%2Fdsj-2021-024). _Data Science Journal_. **20** : 24. [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.5334/dsj-2021-024](https://doi.org/10.5334%2Fdsj-2021-024). [ISSN](/wiki/ISSN_\\(identifier\\) \"ISSN \\(identifier\\)\") [1683-1470](https://search.worldcat.org/issn/1683-1470). [S2CID](/wiki/S2CID_\\(identifier\\) \"S2CID \\(identifier\\)\") [237719804](https://api.semanticscholar.org/CorpusID:237719804). 2. **^** [\"Search Engine History.com\"](http://www.searchenginehistory.com/). _Search Engine History_. Retrieved November 26, 2019.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 915
  },
  {
    "page_content": "3. **^** Song, Ruihua; Microsoft Research (Sep 14, 2007). [\"Joint optimization of wrapper generation and template detection\"](https://web.archive.org/web/20161011080619/https://pdfs.semanticscholar.org/4fb4/3c5a212df751e84c3b2f8d29fabfe56c3616.pdf) (PDF). _Proceedings of the 13th ACM SIGKDD international conference on Knowledge discovery and data mining_. p. 894\\. [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.1145/1281192.1281287](https://doi.org/10.1145%2F1281192.1281287). [ISBN](/wiki/ISBN_\\(identifier\\) \"ISBN \\(identifier\\)\") [9781595936097](/wiki/Special:BookSources/9781595936097 \"Special:BookSources/9781595936097\"). [S2CID](/wiki/S2CID_\\(identifier\\) \"S2CID \\(identifier\\)\") [833565](https://api.semanticscholar.org/CorpusID:833565). Archived from [the original](https://pdfs.semanticscholar.org/4fb4/3c5a212df751e84c3b2f8d29fabfe56c3616.pdf) (PDF) on October 11, 2016.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 893
  },
  {
    "page_content": "4. **^** [Semantic annotation based web scraping](http://www.gooseeker.com/en/node/knowledgebase/freeformat) 5. **^** Roush, Wade (2012-07-25). [\"Diffbot Is Using Computer Vision to Reinvent the Semantic Web\"](http://www.xconomy.com/san-francisco/2012/07/25/diffbot-is-using-computer-vision-to-reinvent-the-semantic-web/). www.xconomy.com. Retrieved 2013-03-15. 6. **^** [\"FAQ about linking – Are website terms of use binding contracts?\"](https://web.archive.org/web/20020308222536/http://www.chillingeffects.org/linking/faq.cgi#QID596). www.chillingeffects.org. 2007-08-20. Archived from [the original](http://www.chillingeffects.org/linking/faq.cgi#QID596) on 2002-03-08. Retrieved 2007-08-20.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 695
  },
  {
    "page_content": "7. **^** Kenneth, Hirschey, Jeffrey (2014-01-01). [\"Symbiotic Relationships: Pragmatic Acceptance of Data Scraping\"](http://scholarship.law.berkeley.edu/btlj/vol29/iss4/16/). _Berkeley Technology Law Journal_. **29** (4). [doi](/wiki/Doi_\\(identifier\\) \"Doi \\(identifier\\)\"):[10.15779/Z38B39B](https://doi.org/10.15779%2FZ38B39B). [ISSN](/wiki/ISSN_\\(identifier\\) \"ISSN \\(identifier\\)\") [1086-3818](https://search.worldcat.org/issn/1086-3818).`{{[cite journal](/wiki/Template:Cite_journal \"Template:Cite journal\")}}`: CS1 maint: multiple names: authors list ([link](/wiki/Category:CS1_maint:_multiple_names:_authors_list \"Category:CS1 maint: multiple names: authors list\")) 8. **^** [\"Internet Law, Ch. 06: Trespass to Chattels\"](http://www.tomwbell.com/NetLaw/Ch06.html). www.tomwbell.com. 2007-08-20. Retrieved 2007-08-20.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 824
  },
  {
    "page_content": "8. **^** [\"Internet Law, Ch. 06: Trespass to Chattels\"](http://www.tomwbell.com/NetLaw/Ch06.html). www.tomwbell.com. 2007-08-20. Retrieved 2007-08-20. 9. **^** [\"What are the \"trespass to chattels\" claims some companies or website owners have brought?\"](https://web.archive.org/web/20020308222536/http://www.chillingeffects.org/linking/faq.cgi#QID460). www.chillingeffects.org. 2007-08-20. Archived from [the original](http://www.chillingeffects.org/linking/faq.cgi#QID460) on 2002-03-08. Retrieved 2007-08-20. 10. **^** [\"Ticketmaster Corp. v. Tickets.com, Inc\"](http://www.tomwbell.com/NetLaw/Ch07/Ticketmaster.html). 2007-08-20. Retrieved 2007-08-20. 11. **^** [\"American Airlines v. FareChase\"](https://web.archive.org/web/20110723131832/http://www.fornova.net/documents/AAFareChase.pdf) (PDF). 2007-08-20. Archived from [the original](http://www.fornova.net/documents/AAFareChase.pdf) (PDF) on 2011-07-23. Retrieved 2007-08-20.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 932
  },
  {
    "page_content": "12. **^** [\"American Airlines, FareChase Settle Suit\"](https://web.archive.org/web/20160305025808/http://www.thefreelibrary.com/American+Airlines,+FareChase+Settle+Suit.-a0103213546). The Free Library. 2003-06-13. Archived from [the original](http://www.thefreelibrary.com/American+Airlines,+FareChase+Settle+Suit.-a0103213546) on 2016-03-05. Retrieved 2012-02-26. 13. **^** Imperva (2011). [Detecting and Blocking Site Scraping Attacks](http://www.imperva.com/docs/WP_Detecting_and_Blocking_Site_Scraping_Attacks.pdf). Imperva white paper. 14. **^** Adler, Kenneth A. (2003-07-29). [\"Controversy Surrounds 'Screen Scrapers': Software Helps Users Access Web Sites But Activity by Competitors Comes Under Scrutiny\"](https://web.archive.org/web/20110211123854/http://library.findlaw.com/2003/Jul/29/132944.html). Archived from [the original](http://library.findlaw.com/2003/Jul/29/132944.html) on 2011-02-11. Retrieved 2010-10-27.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 928
  },
  {
    "page_content": "15. **^** [\"CVENT, Inc. v. Eventbrite, Inc.,et al\"](https://web.archive.org/web/20130921054619/http://www.fornova.net/documents/Cvent.pdf) (PDF). 2014-11-24. Archived from [the original](http://www.fornova.net/documents/Cvent.pdf) (PDF) on 2013-09-21. Retrieved 2015-11-05. 16. **^** [\"QVC Inc. v. Resultly LLC, No. 14-06714 (E.D. Pa. filed Nov. 24, 2014)\"](https://www.scribd.com/doc/249068700/LinkedIn-v-Resultly-LLC-Complaint?secret_password=pEVKDbnvhQL52oKfdrmT). _United States District Court for the Eastern District of Pennsylvania_. Retrieved 5 November 2015. 17. **^** Neuburger, Jeffrey D (5 December 2014). [\"QVC Sues Shopping App for Web Scraping That Allegedly Triggered Site Outage\"](http://newmedialaw.proskauer.com/2014/12/05/qvc-sues-shopping-app-for-web-scraping-that-allegedly-triggered-site-outage/). _The National Law Review_. Proskauer Rose LLP. Retrieved 5 November 2015.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 894
  },
  {
    "page_content": "18. **^** [\"Did Iqbal/Twombly Raise the Bar for Browsewrap Claims?\"](https://web.archive.org/web/20110723132015/http://www.fornova.net/documents/pblog-bna-com.pdf) (PDF). 2010-09-17. Archived from [the original](http://www.fornova.net/documents/pblog-bna-com.pdf) (PDF) on 2011-07-23. Retrieved 2010-10-27. 19. **^** [\"Can Scraping Non-Infringing Content Become Copyright Infringement... Because Of How Scrapers Work? | Techdirt\"](https://www.techdirt.com/articles/20090605/2228205147.shtml). _Techdirt_. 2009-06-10. Retrieved 2016-05-24. 20. **^** [\"Facebook v. Power Ventures\"](https://www.eff.org/cases/facebook-v-power-ventures). _Electronic Frontier Foundation_. July 2011. Retrieved 2016-05-24. 21. **^** Chung, Andrew (June 14, 2021). [\"U.S. Supreme Court revives LinkedIn bid to shield personal data\"](https://www.reuters.com/technology/us-supreme-court-revives-linkedin-bid-shield-personal-data-2021-06-14/). [Reuters](/wiki/Reuters \"Reuters\"). Retrieved June 14, 2021.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 978
  },
  {
    "page_content": "22. **^** Whittaker, Zack (18 April 2022). [\"Web scraping is legal, US appeals court reaffirms\"](https://techcrunch.com/2022/04/18/web-scraping-legal-court/). _TechCrunch_. 23. **^** [\"UDSKRIFT AF SØ- & HANDELSRETTENS DOMBOG\"](https://web.archive.org/web/20071012005033/http://www.bvhd.dk/uploads/tx_mocarticles/S_-_og_Handelsrettens_afg_relse_i_Ofir-sagen.pdf) (PDF) (in Danish). bvhd.dk. 2006-02-24. Archived from [the original](http://www.bvhd.dk/uploads/tx_mocarticles/S_-_og_Handelsrettens_afg_relse_i_Ofir-sagen.pdf) (PDF) on 2007-10-12. Retrieved 2007-05-30. 24. **^** [\"High Court of Ireland Decisions >> Ryanair Ltd -v- Billigfluege.de GMBH 2010 IEHC 47 (26 February 2010)\"](http://www.bailii.org/ie/cases/IEHC/2010/H47.html). British and Irish Legal Information Institute. 2010-02-26. Retrieved 2012-04-19.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 816
  },
  {
    "page_content": "25. **^** Matthews, Áine (June 2010). [\"Intellectual Property: Website Terms of Use\"](https://web.archive.org/web/20120624103316/http://www.lkshields.ie/htmdocs/publications/newsletters/update26/update26_03.htm). _Issue 26: June 2010_. LK Shields Solicitors Update. p. 03\\. Archived from [the original](http://www.lkshields.ie/htmdocs/publications/newsletters/update26/update26_03.htm) on 2012-06-24. Retrieved 2012-04-19. 26. **^** [\"La réutilisation des données publiquement accessibles en ligne à des fins de démarchage commercial | CNIL\"](https://www.cnil.fr/fr/la-reutilisation-des-donnees-publiquement-accessibles-en-ligne-des-fins-de-demarchage-commercial). _www.cnil.fr_ (in French). Retrieved 2020-07-05. 27. **^** FindDataLab.com (2020-06-09). [\"Can You Still Perform Web Scraping With The New CNIL Guidelines?\"](https://medium.com/@finddatalab/can-you-still-perform-web-scraping-with-the-new-cnil-guidelines-bf3e20d0edc2). _Medium_. Retrieved 2020-07-05.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 965
  },
  {
    "page_content": "28. **^** National Office for the Information Economy (February 2004). [\"Spam Act 2003: An overview for business\"](https://web.archive.org/web/20191203113701/https://www.lloyds.com/~/media/5880dae185914b2487bed7bd63b96286.ashx). Australian Communications Authority. p. 6\\. Archived from [the original](https://www.lloyds.com/~/media/5880dae185914b2487bed7bd63b96286.ashx) on 2019-12-03. Retrieved 2017-12-07. 29. **^** National Office for the Information Economy (February 2004). [\"Spam Act 2003: A practical guide for business\"](http://www.webstartdesign.com.au/spam_business_practical_guide.pdf) (PDF). Australian Communications Authority. p. 20. Retrieved 2017-12-07. 30. **^** [\"Web Scraping for Beginners: A Guide 2024\"](https://proxyway.com/guides/what-is-web-scraping). _Proxyway_. 2023-08-31. Retrieved 2024-03-15.",
    "metadata": {
      "H1": "Web scraping",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 822
  },
  {
    "page_content": "30. **^** [\"Web Scraping for Beginners: A Guide 2024\"](https://proxyway.com/guides/what-is-web-scraping). _Proxyway_. 2023-08-31. Retrieved 2024-03-15. 31. **^** Mayank Dhiman [Breaking Fraud & Bot Detection Solutions](https://s3.us-west-2.amazonaws.com/research-papers-mynk/Breaking-Fraud-And-Bot-Detection-Solutions.pdf) _OWASP AppSec Cali' 2018_ Retrieved February 10, 2018. Retrieved from \"[https://en.wikipedia.org/w/index.php?title=Web_scraping&oldid=1282903091](https://en.wikipedia.org/w/index.php?title=Web_scraping&oldid=1282903091)\" [Category](/wiki/Help:Category \"Help:Category\"): * [Web scraping](/wiki/Category:Web_scraping \"Category:Web scraping\") Hidden categories: * [CS1 maint: multiple names: authors list](/wiki/Category:CS1_maint:_multiple_names:_authors_list \"Category:CS1 maint: multiple names: authors list\") * [CS1 Danish-language sources (da)](/wiki/Category:CS1_Danish-language_sources_\\(da\\) \"Category:CS1 Danish-language sources \\(da\\)\")",
    "metadata": {
      "H1": "Web scraping",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 966
  },
  {
    "page_content": "* [CS1 Danish-language sources (da)](/wiki/Category:CS1_Danish-language_sources_\\(da\\) \"Category:CS1 Danish-language sources \\(da\\)\") * [CS1 French-language sources (fr)](/wiki/Category:CS1_French-language_sources_\\(fr\\) \"Category:CS1 French-language sources \\(fr\\)\") * [Articles with short description](/wiki/Category:Articles_with_short_description \"Category:Articles with short description\") * [Short description matches Wikidata](/wiki/Category:Short_description_matches_Wikidata \"Category:Short description matches Wikidata\") * [Articles needing additional references from April 2023](/wiki/Category:Articles_needing_additional_references_from_April_2023 \"Category:Articles needing additional references from April 2023\") * [All articles needing additional references](/wiki/Category:All_articles_needing_additional_references \"Category:All articles needing additional references\")",
    "metadata": {
      "H1": "Web scraping",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 886
  },
  {
    "page_content": "* [All articles needing additional references](/wiki/Category:All_articles_needing_additional_references \"Category:All articles needing additional references\") * [Articles with limited geographic scope from October 2015](/wiki/Category:Articles_with_limited_geographic_scope_from_October_2015 \"Category:Articles with limited geographic scope from October 2015\") * [United States-centric](/wiki/Category:United_States-centric \"Category:United States-centric\") * [All articles with unsourced statements](/wiki/Category:All_articles_with_unsourced_statements \"Category:All articles with unsourced statements\") * [Articles with unsourced statements from April 2023](/wiki/Category:Articles_with_unsourced_statements_from_April_2023 \"Category:Articles with unsourced statements from April 2023\")",
    "metadata": {
      "H1": "Web scraping",
      "H2": "References",
      "source": "https://en.wikipedia.org/wiki/Web_scraping",
      "title": "Web scraping - Wikipedia",
      "description": "",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 790
  },
  {
    "page_content": "# Science [](/story/how-the-universe-differs-from-its-mirror-image/)",
    "metadata": {
      "H1": "Science",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 68
  },
  {
    "page_content": "### [How the Universe and Its Mirrored Version Are Different](/story/how-the-universe-differs-from-its-mirror-image/) From living matter to molecules to elementary particles, the world is made of “chiral” objects that differ from their reflected forms. Zack Savitsky [](/story/lilly-obesity-pill-effective-orforglipron-injected-glp-1-ozempic/) Not So Bitter Pill",
    "metadata": {
      "H1": "Science",
      "H3": "[How the Universe and Its Mirrored Version Are Different](/story/how-the-universe-differs-from-its-mirror-image/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 362
  },
  {
    "page_content": "### [Eli Lilly’s Obesity Pill Appears to Work as Well as Injected GLP-1s](/story/lilly-obesity-pill-effective-orforglipron-injected-glp-1-ozempic/) Emily Mullin [](/story/cheap-and-effective-ways-to-cut-methane-pollution-arent-being-used/) Greenhouse Gases",
    "metadata": {
      "H1": "Science",
      "H3": "[Eli Lilly’s Obesity Pill Appears to Work as Well as Injected GLP-1s](/story/lilly-obesity-pill-effective-orforglipron-injected-glp-1-ozempic/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 256
  },
  {
    "page_content": "### [Methane Pollution Has Cheap, Effective Solutions That Aren’t Being Used](/story/cheap-and-effective-ways-to-cut-methane-pollution-arent-being-used/) Umair Irfan",
    "metadata": {
      "H1": "Science",
      "H3": "[Methane Pollution Has Cheap, Effective Solutions That Aren’t Being Used](/story/cheap-and-effective-ways-to-cut-methane-pollution-arent-being-used/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 165
  },
  {
    "page_content": "## [Health](https://www.wired.com/category/science/health-medicine/) [](/story/fda-finally-approves-lenacapavir-preventive-hiv-treatment-gilead/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Health](https://www.wired.com/category/science/health-medicine/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 145
  },
  {
    "page_content": "### [The FDA Just Approved a Long-Lasting Injection to Prevent HIV](/story/fda-finally-approves-lenacapavir-preventive-hiv-treatment-gilead/) Clinical trials have shown that six-monthly injections of lenacapavir are almost 100 percent protective against becoming infected with HIV. But big questions remain over the drug’s affordability. Jorge Garay [](/story/trump-epa-reconsider-ban-cancer-causing-asbestos/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Health](https://www.wired.com/category/science/health-medicine/)",
      "H3": "[The FDA Just Approved a Long-Lasting Injection to Prevent HIV](/story/fda-finally-approves-lenacapavir-preventive-hiv-treatment-gilead/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 410
  },
  {
    "page_content": "### [The EPA Plans to ‘Reconsider’ Ban on Cancer-Causing Asbestos](/story/trump-epa-reconsider-ban-cancer-causing-asbestos/) President Donald Trump has supported use of asbestos in the past and blamed the mob for its bad reputation. Beth Mole, Ars Technica [](/story/supreme-court-ruling-gender-affirming-care-trans-rights-skrmetti-case/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Health](https://www.wired.com/category/science/health-medicine/)",
      "H3": "[The EPA Plans to ‘Reconsider’ Ban on Cancer-Causing Asbestos](/story/trump-epa-reconsider-ban-cancer-causing-asbestos/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 338
  },
  {
    "page_content": "### [US Supreme Court Upholds Tennessee’s Ban on Gender-Affirming Care for Minors](/story/supreme-court-ruling-gender-affirming-care-trans-rights-skrmetti-case/) In _United States v. Skrmetti_ , the Supreme Court ruled that Tennessee’s ban on gender-affirming care for minors was not unconstitutional—the first case of its kind on which the court has ruled. Emily Mullin [](/story/new-obesity-pill-may-burn-fat-without-suppressing-appetite/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Health](https://www.wired.com/category/science/health-medicine/)",
      "H3": "[US Supreme Court Upholds Tennessee’s Ban on Gender-Affirming Care for Minors](/story/supreme-court-ruling-gender-affirming-care-trans-rights-skrmetti-case/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 441
  },
  {
    "page_content": "### [A New Obesity Pill May Burn Fat Without Suppressing Appetite](/story/new-obesity-pill-may-burn-fat-without-suppressing-appetite/) An investigational drug developed by Eolo Pharma is showing promise in animal experiments and an early human trial. It could eventually be an alternative or add-on to popular GLP-1 medications. Emily Mullin",
    "metadata": {
      "H1": "Science",
      "H2": "[Health](https://www.wired.com/category/science/health-medicine/)",
      "H3": "[A New Obesity Pill May Burn Fat Without Suppressing Appetite](/story/new-obesity-pill-may-burn-fat-without-suppressing-appetite/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 341
  },
  {
    "page_content": "## [Environment](https://www.wired.com/tag/environment) [](/story/scientists-discover-the-key-to-axolotls-ability-to-regenerate-limbs/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Environment](https://www.wired.com/tag/environment)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 135
  },
  {
    "page_content": "### [Scientists Discover the Key to Axolotls’ Ability to Regenerate Limbs](/story/scientists-discover-the-key-to-axolotls-ability-to-regenerate-limbs/) A new study reveals the key lies not in the production of a regrowth molecule, but in that molecule's controlled destruction. The discovery could inspire future regenerative medicine. Anna Lagos [](/story/uber-just-reinvented-the-bus-again/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Environment](https://www.wired.com/tag/environment)",
      "H3": "[Scientists Discover the Key to Axolotls’ Ability to Regenerate Limbs](/story/scientists-discover-the-key-to-axolotls-ability-to-regenerate-limbs/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 393
  },
  {
    "page_content": "### [Uber Just Reinvented the Bus … Again](/story/uber-just-reinvented-the-bus-again/) Beyond the jokes about its new shuttle service are serious questions about what it will mean for struggling transit systems, air quality, and congestion. Sophie Hurwitz [](/story/how-to-survive-a-disaster-in-the-age-of-trump-emergency-fema-wild-fire-hurricane/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Environment](https://www.wired.com/tag/environment)",
      "H3": "[Uber Just Reinvented the Bus … Again](/story/uber-just-reinvented-the-bus-again/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 348
  },
  {
    "page_content": "### [How to Prepare for a Climate Disaster in Trump’s America](/story/how-to-survive-a-disaster-in-the-age-of-trump-emergency-fema-wild-fire-hurricane/) Here’s how to find reliable information and keep safe during the summer heat and hurricane season following the unprecedented cuts at federal agencies. Molly Taft [](/story/trump-cuts-are-killing-a-tiny-office-that-keeps-our-measurements-of-the-world-accurate/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Environment](https://www.wired.com/tag/environment)",
      "H3": "[How to Prepare for a Climate Disaster in Trump’s America](/story/how-to-survive-a-disaster-in-the-age-of-trump-emergency-fema-wild-fire-hurricane/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 414
  },
  {
    "page_content": "### [Trump Cuts Are Killing a Tiny Office That Keeps Measurements of the World Accurate](/story/trump-cuts-are-killing-a-tiny-office-that-keeps-our-measurements-of-the-world-accurate/) A tiny but crucial agency that maintains physical coordinates like latitude and longitude in the US is struggling as the Trump administration forces out federal employees. Molly Taft",
    "metadata": {
      "H1": "Science",
      "H2": "[Environment](https://www.wired.com/tag/environment)",
      "H3": "[Trump Cuts Are Killing a Tiny Office That Keeps Measurements of the World Accurate](/story/trump-cuts-are-killing-a-tiny-office-that-keeps-our-measurements-of-the-world-accurate/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 367
  },
  {
    "page_content": "## [Climate](https://www.wired.com/category/science/environment-climate-change/) [](/story/the-viral-storm-streamers-predicting-deadly-tornadoes-sometimes-faster-than-the-government/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Climate](https://www.wired.com/category/science/environment-climate-change/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 183
  },
  {
    "page_content": "### [The Viral Storm Streamers Predicting Deadly Tornadoes—Sometimes Faster Than the Government](/story/the-viral-storm-streamers-predicting-deadly-tornadoes-sometimes-faster-than-the-government/) Storm streamers are using radars and AI robots to track extreme weather for millions of YouTube subscribers, in some cases issuing alerts faster than the National Weather Service. Hilary Beaumont [](/story/youre-not-ready-for-phone-dead-zones/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Climate](https://www.wired.com/category/science/environment-climate-change/)",
      "H3": "[The Viral Storm Streamers Predicting Deadly Tornadoes—Sometimes Faster Than the Government](/story/the-viral-storm-streamers-predicting-deadly-tornadoes-sometimes-faster-than-the-government/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 441
  },
  {
    "page_content": "### [The Texting Network for the End of the World](/story/youre-not-ready-for-phone-dead-zones/) Everyone knows what it’s like to lose cell service. A burgeoning open source project called Meshtastic is filling the gap for when you’re in the middle of nowhere—or when disaster strikes. Andrew Couts and Dhruv Mehrotra [](/story/elon-musk-x-datacenter-fire/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Climate](https://www.wired.com/category/science/environment-climate-change/)",
      "H3": "[The Texting Network for the End of the World](/story/youre-not-ready-for-phone-dead-zones/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 357
  },
  {
    "page_content": "### [Fire Breaks Out at a Data Center Leased by Elon Musk’s X](/story/elon-musk-x-datacenter-fire/) The fire department said a room with batteries contributed to the blaze at a building leased by Elon Musk’s X near Portland, Oregon. Kylie Robison, Molly Taft, and Paresh Dave [](/story/fema-cancel-strategic-plan/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Climate](https://www.wired.com/category/science/environment-climate-change/)",
      "H3": "[Fire Breaks Out at a Data Center Leased by Elon Musk’s X](/story/elon-musk-x-datacenter-fire/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 314
  },
  {
    "page_content": "### [FEMA Has Canceled Its 4-Year Strategic Plan Ahead of Hurricane Season](/story/fema-cancel-strategic-plan/) Multiple FEMA employees tell WIRED that they did not know of another time when a strategic plan was rescinded without another in place. Molly Taft and Vittoria Elliott",
    "metadata": {
      "H1": "Science",
      "H2": "[Climate](https://www.wired.com/category/science/environment-climate-change/)",
      "H3": "[FEMA Has Canceled Its 4-Year Strategic Plan Ahead of Hurricane Season](/story/fema-cancel-strategic-plan/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 279
  },
  {
    "page_content": "## [Energy](https://www.wired.com/tag/energy/) [](/story/ai-carbon-emissions-energy-unknown-mystery-research/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Energy](https://www.wired.com/tag/energy/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 110
  },
  {
    "page_content": "### [How Much Energy Does AI Use? The People Who Know Aren’t Saying](/story/ai-carbon-emissions-energy-unknown-mystery-research/) A growing body of research attempts to put a number on energy use and AI—even as the companies behind the most popular models keep their carbon emissions a secret. Molly Taft [](/story/in-california-a-biomass-companys-expansion-raises-fears-of-more-fires/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Energy](https://www.wired.com/tag/energy/)",
      "H3": "[How Much Energy Does AI Use? The People Who Know Aren’t Saying](/story/ai-carbon-emissions-energy-unknown-mystery-research/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 386
  },
  {
    "page_content": "### [Wood Pellet Mills Are Prone to Catching Fire. Why Build Them in California?](/story/in-california-a-biomass-companys-expansion-raises-fears-of-more-fires/) Facilities that make wood pellets have a track record of catching alight. Yet there are plans to build several near Yosemite’s tinderbox forests. Tom Brown [](/story/are-those-viral-cooling-blankets-for-real/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Energy](https://www.wired.com/tag/energy/)",
      "H3": "[Wood Pellet Mills Are Prone to Catching Fire. Why Build Them in California?](/story/in-california-a-biomass-companys-expansion-raises-fears-of-more-fires/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 370
  },
  {
    "page_content": "### [Are Those Viral ‘Cooling Blankets’ for Real?](/story/are-those-viral-cooling-blankets-for-real/) According to physics, any blanket can cool you—for a few minutes. But a real cooling blanket is possible with phase-change materials. Rhett Allain [](/story/the-epa-is-trying-to-roll-back-emissions-controls-on-power-plants/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Energy](https://www.wired.com/tag/energy/)",
      "H3": "[Are Those Viral ‘Cooling Blankets’ for Real?](/story/are-those-viral-cooling-blankets-for-real/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 326
  },
  {
    "page_content": "### [The EPA Wants to Roll Back Emissions Controls on Power Plants](/story/the-epa-is-trying-to-roll-back-emissions-controls-on-power-plants/) \"The EPA is trying to get out of the climate change business,” says one expert. Molly Taft",
    "metadata": {
      "H1": "Science",
      "H2": "[Energy](https://www.wired.com/tag/energy/)",
      "H3": "[The EPA Wants to Roll Back Emissions Controls on Power Plants](/story/the-epa-is-trying-to-roll-back-emissions-controls-on-power-plants/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 233
  },
  {
    "page_content": "## [Space](https://www.wired.com/category/science/space/) [](/story/spacex-starship-explosion-major-anomaly/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Space](https://www.wired.com/category/science/space/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 109
  },
  {
    "page_content": "### [‘Major Anomaly’ Behind Latest SpaceX Starship Explosion](/story/spacex-starship-explosion-major-anomaly/) SpaceX CEO Elon Musk suggested on X that a high-pressure nitrogen tank failure was behind the explosion of the company's massive Starship rocket. Stephen Clark, Ars Technica [](/story/whats-going-on-inside-io-jupiters-volcanic-moon/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Space](https://www.wired.com/category/science/space/)",
      "H3": "[‘Major Anomaly’ Behind Latest SpaceX Starship Explosion](/story/spacex-starship-explosion-major-anomaly/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 344
  },
  {
    "page_content": "### [The Mysterious Inner Workings of Io, Jupiter’s Volcanic Moon](/story/whats-going-on-inside-io-jupiters-volcanic-moon/) Recent flybys of the fiery world refute a leading theory of its inner structure—and reveal how little is understood about geologically active moons. Robin Andrews [](/story/chinese-spacecraft-earths-quasi-moons-china-tianwen-2/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Space](https://www.wired.com/category/science/space/)",
      "H3": "[The Mysterious Inner Workings of Io, Jupiter’s Volcanic Moon](/story/whats-going-on-inside-io-jupiters-volcanic-moon/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 352
  },
  {
    "page_content": "### [This Chinese Spacecraft Is Traveling to One of Earth’s Quasi-Moons](/story/chinese-spacecraft-earths-quasi-moons-china-tianwen-2/) The Tianwen-2 probe has sent a self-portrait as it heads toward one of the most enigmatic objects in our space neighborhood: the quasi-moon Kamo‘oalewa. Javier Carbajal [](/story/artificial-intelligence-is-unlocking-the-secrets-of-black-holes/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Space](https://www.wired.com/category/science/space/)",
      "H3": "[This Chinese Spacecraft Is Traveling to One of Earth’s Quasi-Moons](/story/chinese-spacecraft-earths-quasi-moons-china-tianwen-2/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 380
  },
  {
    "page_content": "### [Astronomers Are Using Artificial Intelligence to Unlock the Secrets of Black Holes](/story/artificial-intelligence-is-unlocking-the-secrets-of-black-holes/) Using a neural network trained with simulations of supermassive black holes, astronomers have found that the one at the center of the Milky Way, Sagittarius A*, likely rotates at maximum speed. Jorge Garay",
    "metadata": {
      "H1": "Science",
      "H2": "[Space](https://www.wired.com/category/science/space/)",
      "H3": "[Astronomers Are Using Artificial Intelligence to Unlock the Secrets of Black Holes](/story/artificial-intelligence-is-unlocking-the-secrets-of-black-holes/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 367
  },
  {
    "page_content": "## [Physics and Math](https://www.wired.com/category/science/physics-math/) [](/story/improving-deep-learning-with-a-little-help-from-physics/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Physics and Math](https://www.wired.com/category/science/physics-math/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 143
  },
  {
    "page_content": "### [How to Make AI Faster and Smarter—With a Little Help From Physics](/story/improving-deep-learning-with-a-little-help-from-physics/) Rose Yu has drawn on the principles of fluid dynamics to improve deep learning systems that predict traffic, model the climate, and stabilize drones during flight. Steve Nadis [](/story/is-using-a-stair-machine-the-same-as-climbing-stairs/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Physics and Math](https://www.wired.com/category/science/physics-math/)",
      "H3": "[How to Make AI Faster and Smarter—With a Little Help From Physics](/story/improving-deep-learning-with-a-little-help-from-physics/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 377
  },
  {
    "page_content": "### [Is Using a Stair Machine the Same as Climbing Stairs?](/story/is-using-a-stair-machine-the-same-as-climbing-stairs/) According to physics, one burns more calories than the other—and the winner might surprise you. Rhett Allain [](/story/paraparticles-would-be-a-third-kingdom-of-quantum-particle/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Physics and Math](https://www.wired.com/category/science/physics-math/)",
      "H3": "[Is Using a Stair Machine the Same as Climbing Stairs?](/story/is-using-a-stair-machine-the-same-as-climbing-stairs/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 301
  },
  {
    "page_content": "### [The Quest to Prove the Existence of a New Type of Quantum Particle](/story/paraparticles-would-be-a-third-kingdom-of-quantum-particle/) A new proposal makes the case that paraparticles—a new category of quantum particle—could be created in exotic materials. Shalma Wegsman [](/story/intelligence-evolved-at-least-twice-in-vertebrate-animals/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Physics and Math](https://www.wired.com/category/science/physics-math/)",
      "H3": "[The Quest to Prove the Existence of a New Type of Quantum Particle](/story/paraparticles-would-be-a-third-kingdom-of-quantum-particle/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 347
  },
  {
    "page_content": "### [Intelligence on Earth Evolved Independently at Least Twice](/story/intelligence-evolved-at-least-twice-in-vertebrate-animals/) Complex neural circuits likely arose independently in birds and mammals, suggesting that vertebrates evolved intelligence multiple times. Yasemin Saplakoglu",
    "metadata": {
      "H1": "Science",
      "H2": "[Physics and Math](https://www.wired.com/category/science/physics-math/)",
      "H3": "[Intelligence on Earth Evolved Independently at Least Twice](/story/intelligence-evolved-at-least-twice-in-vertebrate-animals/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 288
  },
  {
    "page_content": "## [Biotech](https://www.wired.com/category/science/biotech-genetic-engineering/) [](/story/congress-demands-answers-on-data-privacy-ahead-of-23andme-sale/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Biotech](https://www.wired.com/category/science/biotech-genetic-engineering/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 156
  },
  {
    "page_content": "### [Congress Demands Answers on Data Privacy Ahead of 23andMe Sale](/story/congress-demands-answers-on-data-privacy-ahead-of-23andme-sale/) House Democrats sent letters to the potential buyers of the genetic testing company, asking how they plan to protect customer genetic data under a change of ownership. Emily Mullin [](/story/paradromics-neuralink-rival-tested-brain-implant/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Biotech](https://www.wired.com/category/science/biotech-genetic-engineering/)",
      "H3": "[Congress Demands Answers on Data Privacy Ahead of 23andMe Sale](/story/congress-demands-answers-on-data-privacy-ahead-of-23andme-sale/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 382
  },
  {
    "page_content": "### [A Neuralink Rival Just Tested a Brain Implant in a Person](/story/paradromics-neuralink-rival-tested-brain-implant/) Paradromics, a brain-computer-interface startup, inserted its brain implant in a person—briefly—in an early test of its technology. Emily Mullin [](/story/the-enhanced-games-has-a-date-a-host-city-and-a-drug-fuelled-world-record/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Biotech](https://www.wired.com/category/science/biotech-genetic-engineering/)",
      "H3": "[A Neuralink Rival Just Tested a Brain Implant in a Person](/story/paradromics-neuralink-rival-tested-brain-implant/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 352
  },
  {
    "page_content": "### [The Enhanced Games Has a Date, a Host City, and a Drug-Fueled World Record](/story/the-enhanced-games-has-a-date-a-host-city-and-a-drug-fuelled-world-record/) The Enhanced Games, where athletes are allowed to take performance-enhancing drugs, will host its first event in May. One “enhanced” former Olympic swimmer has already broken the 50-meter freestyle record. Amit Katwala [](/story/a-baby-received-a-custom-crispr-treatment-in-record-time/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Biotech](https://www.wired.com/category/science/biotech-genetic-engineering/)",
      "H3": "[The Enhanced Games Has a Date, a Host City, and a Drug-Fueled World Record](/story/the-enhanced-games-has-a-date-a-host-city-and-a-drug-fuelled-world-record/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 451
  },
  {
    "page_content": "### [A Baby Received a Custom Crispr Treatment in Record Time](/story/a-baby-received-a-custom-crispr-treatment-in-record-time/) Scientists were able to create a bespoke treatment for KJ Muldoon’s rare genetic disorder within six months. It could be a blueprint for potentially life-saving, gene-editing Crispr therapies. Emily Mullin",
    "metadata": {
      "H1": "Science",
      "H2": "[Biotech](https://www.wired.com/category/science/biotech-genetic-engineering/)",
      "H3": "[A Baby Received a Custom Crispr Treatment in Record Time](/story/a-baby-received-a-custom-crispr-treatment-in-record-time/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 334
  },
  {
    "page_content": "## [Robots](https://www.wired.com/category/science/robots/) [](/story/the-metaverse-is-here-and-its-industrial/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Robots](https://www.wired.com/category/science/robots/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 112
  },
  {
    "page_content": "### [The Dream of the Metaverse Is Dying. Manufacturing Is Keeping It Alive](/story/the-metaverse-is-here-and-its-industrial/) Forget Mark Zuckerberg’s vision of VR meetings; the industrial metaverse bridges digital and physical worlds in a way that’s actually useful. Nicole Kobie [](/story/2025-year-of-the-humanoid-robot-factory-worker/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Robots](https://www.wired.com/category/science/robots/)",
      "H3": "[The Dream of the Metaverse Is Dying. Manufacturing Is Keeping It Alive](/story/the-metaverse-is-here-and-its-industrial/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 340
  },
  {
    "page_content": "### [2025 Is the Year of the Humanoid Robot Factory Worker](/story/2025-year-of-the-humanoid-robot-factory-worker/) Long confined to the lab, humanoids finally appear ready to work in manufacturing. There are just a few hurdles to get them to market. Russell Brandom [](/story/these-robots-are-recovering-dumped-explosives-from-the-baltic-sea/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Robots](https://www.wired.com/category/science/robots/)",
      "H3": "[2025 Is the Year of the Humanoid Robot Factory Worker](/story/2025-year-of-the-humanoid-robot-factory-worker/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 344
  },
  {
    "page_content": "### [These Robots Are Recovering Dumped Explosives From the Baltic Sea](/story/these-robots-are-recovering-dumped-explosives-from-the-baltic-sea/) In the face of seabeds becoming valuable real estate and corroding bombs polluting the oceans, teams are turning to technology to clean up this dangerous and expensive problem. Bryn Stole [](/story/swim-icy-moons-extraterrestrial-life-nasa-jupiter-saturn-europa-swim/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Robots](https://www.wired.com/category/science/robots/)",
      "H3": "[These Robots Are Recovering Dumped Explosives From the Baltic Sea](/story/these-robots-are-recovering-dumped-explosives-from-the-baltic-sea/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 415
  },
  {
    "page_content": "### [NASA Wants to Explore the Icy Moons of Jupiter and Saturn With Autonomous Robots](/story/swim-icy-moons-extraterrestrial-life-nasa-jupiter-saturn-europa-swim/) Research and development is underway to create robots that can hunt for signs of life in the vast oceans that exist under the thick ice shells of bodies like Europa. Shigeyuki Hando",
    "metadata": {
      "H1": "Science",
      "H2": "[Robots](https://www.wired.com/category/science/robots/)",
      "H3": "[NASA Wants to Explore the Icy Moons of Jupiter and Saturn With Autonomous Robots](/story/swim-icy-moons-extraterrestrial-life-nasa-jupiter-saturn-europa-swim/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 346
  },
  {
    "page_content": "## [Psychology and Neuroscience](https://www.wired.com/category/science/psychology-neuroscience/) [](/story/happiness-habituation-experiment-in-living/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Psychology and Neuroscience](https://www.wired.com/category/science/psychology-neuroscience/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 152
  },
  {
    "page_content": "### [How Do You Live a Happier Life? Notice What Was There All Along](/story/happiness-habituation-experiment-in-living/) Reacquaint yourself with the good things in life by taking the time to appreciate them—and yes, it’s OK to rush through the bad stuff. Tali Sharot [](/story/artificial-intelligence-translation-animal-sounds-human-language/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Psychology and Neuroscience](https://www.wired.com/category/science/psychology-neuroscience/)",
      "H3": "[How Do You Live a Happier Life? Notice What Was There All Along](/story/happiness-habituation-experiment-in-living/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 345
  },
  {
    "page_content": "### [The Race to Translate Animal Sounds Into Human Language](/story/artificial-intelligence-translation-animal-sounds-human-language/) With big cash prizes at stake—and AI supercharging research—interspecies translation is closer than ever. But what, if anything, would animals want to tell us? Arik Kershenbaum [](/story/embrace-uncertainty-forecasting-prediction-skills/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Psychology and Neuroscience](https://www.wired.com/category/science/psychology-neuroscience/)",
      "H3": "[The Race to Translate Animal Sounds Into Human Language](/story/artificial-intelligence-translation-animal-sounds-human-language/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 374
  },
  {
    "page_content": "### [An Uncertain Future Requires Uncertain Prediction Skills](/story/embrace-uncertainty-forecasting-prediction-skills/) Forecasting is both art and science, reliant on both rigor and luck—but you can develop a mindset that anticipates and plans ahead. David Spiegelhalter [](/story/these-rats-learned-to-drive-and-they-love-it/)",
    "metadata": {
      "H1": "Science",
      "H2": "[Psychology and Neuroscience](https://www.wired.com/category/science/psychology-neuroscience/)",
      "H3": "[An Uncertain Future Requires Uncertain Prediction Skills](/story/embrace-uncertainty-forecasting-prediction-skills/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 330
  },
  {
    "page_content": "### [These Rats Learned to Drive—and They Love It](/story/these-rats-learned-to-drive-and-they-love-it/) Driving represented an interesting way for neuroscientists to study how rodents acquire new skills, and unexpectedly, rats had an intense motivation for their driving training. Kelly Lambert",
    "metadata": {
      "H1": "Science",
      "H2": "[Psychology and Neuroscience](https://www.wired.com/category/science/psychology-neuroscience/)",
      "H3": "[These Rats Learned to Drive—and They Love It](/story/these-rats-learned-to-drive-and-they-love-it/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 295
  },
  {
    "page_content": "## Latest [](/story/how-to-beat-jet-lag-sleep-travel-flying/) Travel",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 68
  },
  {
    "page_content": "### [How to Beat Jet Lag](/story/how-to-beat-jet-lag-sleep-travel-flying/) Sabrina Weiss [](/story/historian-future-trans-health-care/) True Visionary",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[How to Beat Jet Lag](/story/how-to-beat-jet-lag-sleep-travel-flying/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 150
  },
  {
    "page_content": "### [This Historian Has Seen the Future of Trans Health Care](/story/historian-future-trans-health-care/) Harron Walker [](/story/rfk-jr-announces-8-appointees-to-cdc-vaccine-panel-theyre-not-good/) Public Health",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[This Historian Has Seen the Future of Trans Health Care](/story/historian-future-trans-health-care/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 212
  },
  {
    "page_content": "### [RFK Jr.’s Appointees to CDC Vaccine Panel Are Not Good](/story/rfk-jr-announces-8-appointees-to-cdc-vaccine-panel-theyre-not-good/) Beth Mole, Ars Technica [](/story/a-political-battle-is-brewing-over-data-centers/) Artificial Intelligence",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[RFK Jr.’s Appointees to CDC Vaccine Panel Are Not Good](/story/rfk-jr-announces-8-appointees-to-cdc-vaccine-panel-theyre-not-good/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 244
  },
  {
    "page_content": "### [A Political Battle Is Brewing Over Data Centers](/story/a-political-battle-is-brewing-over-data-centers/) Molly Taft [](/story/what-tear-gas-does-to-the-human-body/) Less Not Non",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[A Political Battle Is Brewing Over Data Centers](/story/a-political-battle-is-brewing-over-data-centers/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 183
  },
  {
    "page_content": "### [What Tear Gas and Rubber Bullets Do to the Human Body](/story/what-tear-gas-does-to-the-human-body/) Emily Mullin [](/story/tapering-off-anti-depressants-outro-telehealth/) Taper Down",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[What Tear Gas and Rubber Bullets Do to the Human Body](/story/what-tear-gas-does-to-the-human-body/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 188
  },
  {
    "page_content": "### [‘Uber for Getting Off Antidepressants’ Launches in the US](/story/tapering-off-anti-depressants-outro-telehealth/) Kate Knibbs [](/story/who-monitors-new-covid-variant-nb181-spread-america-europe-nimbus/) Public Health",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[‘Uber for Getting Off Antidepressants’ Launches in the US](/story/tapering-off-anti-depressants-outro-telehealth/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 223
  },
  {
    "page_content": "### [WHO Monitors New Covid Variant Spreading in America and Europe](/story/who-monitors-new-covid-variant-nb181-spread-america-europe-nimbus/) Fernanda González [](/story/why-everything-in-the-universe-turns-more-complex/) Complexity Theory",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[WHO Monitors New Covid Variant Spreading in America and Europe](/story/who-monitors-new-covid-variant-nb181-spread-america-europe-nimbus/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 241
  },
  {
    "page_content": "### [A New Law of Nature Attempts to Explain the Complexity of the Universe](/story/why-everything-in-the-universe-turns-more-complex/) Philip Ball [](/story/how-one-trial-set-off-a-new-war-in-the-nutrition-world-keto-cholesterol-fat/) Hard to Swallow",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[A New Law of Nature Attempts to Explain the Complexity of the Universe](/story/why-everything-in-the-universe-turns-more-complex/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 251
  },
  {
    "page_content": "### [How One Keto Trial Set Off a New War in the Nutrition World](/story/how-one-trial-set-off-a-new-war-in-the-nutrition-world-keto-cholesterol-fat/) Ashwin Rodrigues [](/story/astronomers-just-broke-the-record-for-the-oldest-galaxy-ever-detected-james-webb-space-telescope/) Space",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[How One Keto Trial Set Off a New War in the Nutrition World](/story/how-one-trial-set-off-a-new-war-in-the-nutrition-world-keto-cholesterol-fat/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 282
  },
  {
    "page_content": "### [Astronomers Have Detected a Galaxy Millions of Years Older Than Any Previously Observed](/story/astronomers-just-broke-the-record-for-the-oldest-galaxy-ever-detected-james-webb-space-telescope/) Javier Carbajal [](/story/analysts-say-trump-trade-wars-would-harm-the-entire-us-energy-sector-from-oil-to-solar/) Policy",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[Astronomers Have Detected a Galaxy Millions of Years Older Than Any Previously Observed](/story/astronomers-just-broke-the-record-for-the-oldest-galaxy-ever-detected-james-webb-space-telescope/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 321
  },
  {
    "page_content": "### [Analysts Say Trump Trade Wars Would Harm the Entire US Energy Sector, From Oil to Solar](/story/analysts-say-trump-trade-wars-would-harm-the-entire-us-energy-sector-from-oil-to-solar/) Dan Gearino [](/story/the-plan-to-build-the-first-garden-in-space-thomas-heatherwick-studio-aurelia/) Ground Control",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[Analysts Say Trump Trade Wars Would Harm the Entire US Energy Sector, From Oil to Solar](/story/analysts-say-trump-trade-wars-would-harm-the-entire-us-energy-sector-from-oil-to-solar/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 306
  },
  {
    "page_content": "### [The Plan to Send Plant-Filled ‘Gardens’ Into Orbit](/story/the-plan-to-build-the-first-garden-in-space-thomas-heatherwick-studio-aurelia/) Chris Baraniuk [](/story/starships-latest-test-reveals-new-problems-for-spacex-to-solve/)",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[The Plan to Send Plant-Filled ‘Gardens’ Into Orbit](/story/the-plan-to-build-the-first-garden-in-space-thomas-heatherwick-studio-aurelia/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 233
  },
  {
    "page_content": "### [Starship’s Latest Test Reveals New Problems for SpaceX to Solve](/story/starships-latest-test-reveals-new-problems-for-spacex-to-solve/) Stephen Clark, Ars Technica [](/story/hummingbirds-are-evolving-to-adapt-to-life-with-humans/) Animals",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[Starship’s Latest Test Reveals New Problems for SpaceX to Solve](/story/starships-latest-test-reveals-new-problems-for-spacex-to-solve/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 244
  },
  {
    "page_content": "### [Hummingbirds Are Evolving to Adapt to Life With Humans](/story/hummingbirds-are-evolving-to-adapt-to-life-with-humans/) Jorge Garay [](/story/the-wired-guide-to-mushroom-supplements/) Shroom Boom",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[Hummingbirds Are Evolving to Adapt to Life With Humans](/story/hummingbirds-are-evolving-to-adapt-to-life-with-humans/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 200
  },
  {
    "page_content": "### [WIRED’s Guide to Mushroom Supplements (the Functional Kind)](/story/the-wired-guide-to-mushroom-supplements/) Boutayna Chokrane [](/story/a-new-study-reveals-the-makeup-of-uranus-atmosphere/) Space",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[WIRED’s Guide to Mushroom Supplements (the Functional Kind)](/story/the-wired-guide-to-mushroom-supplements/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 202
  },
  {
    "page_content": "### [A New Study Reveals the Makeup of Uranus’ Atmosphere](/story/a-new-study-reveals-the-makeup-of-uranus-atmosphere/) Shigeyuki Hando [](/story/why-women-with-type-2-diabetes-are-diagnosed-later-than-men/) Health",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[A New Study Reveals the Makeup of Uranus’ Atmosphere](/story/a-new-study-reveals-the-makeup-of-uranus-atmosphere/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 214
  },
  {
    "page_content": "### [Why Women With Type 2 Diabetes Are Diagnosed Later Than Men](/story/why-women-with-type-2-diabetes-are-diagnosed-later-than-men/) Lori Youmshajekian [](/story/the-milky-way-has-a-mysterious-broken-bone-nasa/) Space",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[Why Women With Type 2 Diabetes Are Diagnosed Later Than Men](/story/why-women-with-type-2-diabetes-are-diagnosed-later-than-men/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 219
  },
  {
    "page_content": "### [The Milky Way Has a Mysterious ‘Broken Bone’](/story/the-milky-way-has-a-mysterious-broken-bone-nasa/) Jorge Garay [](/story/if-you-want-to-claim-the-solar-tax-credit-install-now/) Energy Policy",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[The Milky Way Has a Mysterious ‘Broken Bone’](/story/the-milky-way-has-a-mysterious-broken-bone-nasa/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 199
  },
  {
    "page_content": "### [Want to Claim the Solar Tax Credit? Get Installing Now](/story/if-you-want-to-claim-the-solar-tax-credit-install-now/) Tik Root [](/story/new-research-energy-electricity-artificial-intelligence-ai/) Power Hungry",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[Want to Claim the Solar Tax Credit? Get Installing Now](/story/if-you-want-to-claim-the-solar-tax-credit-install-now/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 216
  },
  {
    "page_content": "### [AI Is Eating Data Center Power Demand—and It’s Only Getting Worse](/story/new-research-energy-electricity-artificial-intelligence-ai/) Molly Taft [Next Page](?page=2)",
    "metadata": {
      "H1": "Science",
      "H2": "Latest",
      "H3": "[AI Is Eating Data Center Power Demand—and It’s Only Getting Worse](/story/new-research-energy-electricity-artificial-intelligence-ai/)",
      "source": "https://www.wired.com/category/science/",
      "title": "Science News: Health, Robotics, Climate Change, Space News | WIRED",
      "description": "Get in-depth science coverage at WIRED including news, the latest research and discoveries and how technology is shaping the world of science.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 171
  },
  {
    "page_content": "# Get started * * * If you're new to Docker, this section guides you through the essential resources to get started. Follow the guides to help you get started and learn how Docker can optimize your development workflows. For more advanced concepts and scenarios in Docker, see [Guides](/guides/).",
    "metadata": {
      "H1": "Get started",
      "source": "https://docs.docker.com/get-started/",
      "title": "Get started | Docker Docs",
      "description": "Get started with Docker",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 296
  },
  {
    "page_content": "## Foundations of Docker Install Docker and jump into discovering what Docker is.",
    "metadata": {
      "H1": "Get started",
      "H2": "Foundations of Docker",
      "source": "https://docs.docker.com/get-started/",
      "title": "Get started | Docker Docs",
      "description": "Get started with Docker",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 81
  },
  {
    "page_content": "### [Get DockerChoose the best installation path for your setup.](/get-started/get-docker/)",
    "metadata": {
      "H1": "Get started",
      "H2": "Foundations of Docker",
      "H3": "[Get DockerChoose the best installation path for your setup.](/get-started/get-docker/)",
      "source": "https://docs.docker.com/get-started/",
      "title": "Get started | Docker Docs",
      "description": "Get started with Docker",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 91
  },
  {
    "page_content": "### [What is Docker?Learn about the Docker platform.](/get-started/docker-overview/) Learn the foundational concepts and workflows of Docker.",
    "metadata": {
      "H1": "Get started",
      "H2": "Foundations of Docker",
      "H3": "[What is Docker?Learn about the Docker platform.](/get-started/docker-overview/)",
      "source": "https://docs.docker.com/get-started/",
      "title": "Get started | Docker Docs",
      "description": "Get started with Docker",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 141
  },
  {
    "page_content": "### [IntroductionGet started with the basics and the benefits of containerizing your applications.](/get-started/introduction/)",
    "metadata": {
      "H1": "Get started",
      "H2": "Foundations of Docker",
      "H3": "[IntroductionGet started with the basics and the benefits of containerizing your applications.](/get-started/introduction/)",
      "source": "https://docs.docker.com/get-started/",
      "title": "Get started | Docker Docs",
      "description": "Get started with Docker",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 127
  },
  {
    "page_content": "### [Docker conceptsGain a better understanding of foundational Docker concepts.](/get-started/docker-concepts/the-basics/what-is-a-container/)",
    "metadata": {
      "H1": "Get started",
      "H2": "Foundations of Docker",
      "H3": "[Docker conceptsGain a better understanding of foundational Docker concepts.](/get-started/docker-concepts/the-basics/what-is-a-container/)",
      "source": "https://docs.docker.com/get-started/",
      "title": "Get started | Docker Docs",
      "description": "Get started with Docker",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 143
  },
  {
    "page_content": "### [Docker workshopGet guided through a 45-minute workshop to learn about Docker.](/get-started/workshop/)",
    "metadata": {
      "H1": "Get started",
      "H2": "Foundations of Docker",
      "H3": "[Docker workshopGet guided through a 45-minute workshop to learn about Docker.](/get-started/workshop/)",
      "source": "https://docs.docker.com/get-started/",
      "title": "Get started | Docker Docs",
      "description": "Get started with Docker",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 107
  },
  {
    "page_content": "[ ](/news/how-to-choose-a-web-application-firewall-for-web-security/) [ #Security ](/news/tag/security/)",
    "metadata": {
      "source": "https://www.freecodecamp.org/news/what-is-web-scraping/",
      "title": "Developer News | 404 - Page not found",
      "description": "",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 104
  },
  {
    "page_content": "## [ How to Choose a Web Application Firewall for Web Security ](/news/how-to-choose-a-web-application-firewall-for-web-security/) * [ ](/news/author/manishshivanandhan/) [ Manish Shivanandhan ](/news/author/manishshivanandhan/) 2 days ago",
    "metadata": {
      "H2": "[ How to Choose a Web Application Firewall for Web Security ](/news/how-to-choose-a-web-application-firewall-for-web-security/)",
      "source": "https://www.freecodecamp.org/news/what-is-web-scraping/",
      "title": "Developer News | 404 - Page not found",
      "description": "",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 239
  },
  {
    "page_content": "### [Thomas Dohmke](https://github.blog/author/ashtom/) [@ashtom](https://github.com/ashtom) Fascinated by software development since his childhood in Germany, Thomas Dohmke has built a career building tools to accelerate developer happiness. Currently, Thomas is the Chief Executive Officer of GitHub, where he has overseen the rise of the world’s most widely adopted AI developer tools – including the launches of GitHub Copilot, Copilot Workspace, and GitHub Models. Thomas is a celebrated TED speaker and holds a PhD in mechanical engineering from University of Glasgow, UK.",
    "metadata": {
      "H3": "[Thomas Dohmke](https://github.blog/author/ashtom/)",
      "source": "https://github.blog/2023-11-08-universe-2023-copilot-transforms-github-into-the-ai-powered-developer-platform/",
      "title": "Universe 2023: Copilot transforms GitHub into the AI-powered developer platform - The GitHub Blog",
      "description": "GitHub is announcing general availability of GitHub Copilot Chat and previews of the new GitHub Copilot Enterprise offering, new AI-powered security features, and the GitHub Copilot Partner Program.",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 578
  },
  {
    "page_content": "# Tech The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily. [Inside Microsoft’s complicated relationship with OpenAI](/notepad-microsoft-newsletter/688964/microsoft-openai-relationship-notepad) The cracks are showing in this unique tech partnership. Tom WarrenJun 19 [NFC is getting a range boost](/news/689281/nfc-15-update-tap-to-pay-range-boost) The NFC Release 15 update will help to support faster and more precise contactless connections. Jess WeatherbedJun 18",
    "metadata": {
      "H1": "Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 657
  },
  {
    "page_content": "## Latest In Tech [](/news/690815/bill-gates-linus-torvalds-meeting-photo) [](/news/690815/bill-gates-linus-torvalds-meeting-photo#comments) Tom Warren31 minutes ago Link Bill Gates and Linus Torvalds meet for the first time. Microsoft co-founder Bill Gates and Linus Torvalds, the creator of the Linux kernel, have surprisingly never met before. That all changed at a recent dinner hosted by Sysinternals creator Mark Russinovich. The world’s of Linux and Windows finally came together in real life, and Dave Cutler, Microsoft technical fellow and Windows NT lead developer, was also there to witness the moment and meet Torvalds for the first time. “No major kernel decisions were made,” jokes Russinovich in a [post on LinkedIn](https://www.linkedin.com/posts/markrussinovich_i-had-the-thrill-of-a-lifetime-hosting-dinner-activity-7341857033932914691-f5Kw/). [](https://platform.theverge.com/wp-content/uploads/sites/2/2025/06/1750435121315.jpg?quality=90&strip=all&crop=0,0,100,100)",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 986
  },
  {
    "page_content": "[](https://platform.theverge.com/wp-content/uploads/sites/2/2025/06/1750435121315.jpg?quality=90&strip=all&crop=0,0,100,100) _Bill Gates and Linus Torvalds meet for the first time._ Image: Mark Russinovich Tech Tech [Samsung’s entry-level Galaxy Watch 7 has returned to its best price to date](/tech/690614/samsung-galaxy-watch-7-anker-magsafe-charger-deal-sale) Brandon RussellJun 21[CommentsComment Icon Bubble](/tech/690614/samsung-galaxy-watch-7-anker-magsafe-charger-deal-sale#comments) Gaming Gaming [Final Fantasy fans, now is the time to get into Magic: The Gathering](/games/690509/how-to-play-final-fantasy-magic-the-gathering-set) Ash ParrishJun 21[CommentsComment Icon Bubble](/games/690509/how-to-play-final-fantasy-magic-the-gathering-set#comments) Tech Tech [The Verge’s guide to Amazon Prime Day 2025](/tech/689359/amazon-prime-day-tech-deals-guide-2025) Brandon WidderJun 21",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 891
  },
  {
    "page_content": "Tech Tech [The Verge’s guide to Amazon Prime Day 2025](/tech/689359/amazon-prime-day-tech-deals-guide-2025) Brandon WidderJun 21 [Inside the courthouse reshaping the future of the internet](/policy/690440/e-barrett-prettyman-courthouse-dc-district-meta-google-antitrust-doge) The US District Court in Washington, DC, was the home of two of the most important tech trials in decades — plus so much more. Lauren FeinerJun 21[CommentsComment Icon Bubble](/policy/690440/e-barrett-prettyman-courthouse-dc-district-meta-google-antitrust-doge#comments) Futureproof [The music industry is building the tech to hunt down AI songs](/ai-artificial-intelligence/686767/music-industry-ai-song-detection-tracking-licensing) Jack BuehrerJun 21[CommentsComment Icon Bubble](/ai-artificial-intelligence/686767/music-industry-ai-song-detection-tracking-licensing#comments) Command Line Command Line",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 881
  },
  {
    "page_content": "Jack BuehrerJun 21[CommentsComment Icon Bubble](/ai-artificial-intelligence/686767/music-industry-ai-song-detection-tracking-licensing#comments) Command Line Command Line [Meta held talks to buy Thinking Machines, Perplexity, and Safe Superintelligence](/command-line-newsletter/690720/meta-buy-thinking-machines-perplexity-safe-superintelligence) Alex HeathJun 20[CommentsComment Icon Bubble](/command-line-newsletter/690720/meta-buy-thinking-machines-perplexity-safe-superintelligence#comments) Tech Tech [Here are the best robot vacuum deals available right now](/24350561/best-robot-vacuum-mop-irobot-roomba-eufy-roborock-deals-sale) Sheena Vasani and Quentyn KennemerJun 20[CommentsComment Icon Bubble](/24350561/best-robot-vacuum-mop-irobot-roomba-eufy-roborock-deals-sale#comments) Tech The Verge’s guide to Amazon Prime Day 2025 [The best Apple deals you can shop ahead of Amazon Prime Day](/tech/689813/best-amazon-prime-day-apple-deals)",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 946
  },
  {
    "page_content": "Tech The Verge’s guide to Amazon Prime Day 2025 [The best Apple deals you can shop ahead of Amazon Prime Day](/tech/689813/best-amazon-prime-day-apple-deals) Sheena VasaniJun 20[CommentsComment Icon Bubble](/tech/689813/best-amazon-prime-day-apple-deals#comments) [](/news/690510/reddit-reportedly-explores-verifying-users-with-sam-altmans-eyeball-scanner) External Link [](/news/690510/reddit-reportedly-explores-verifying-users-with-sam-altmans-eyeball-scanner#comments) Emma RothJun 20 Link Reddit reportedly explores verifying users with Sam Altman’s eyeball scanner.",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 571
  },
  {
    "page_content": "Emma RothJun 20 Link Reddit reportedly explores verifying users with Sam Altman’s eyeball scanner. Sources tell _Semafor_ that Reddit wants to [combat AI bots](/ai-artificial-intelligence/657978/reddit-ai-experiment-banned) using World ID, the cryptocurrency and human identification project [co-founded by Altman](/tech/659987/sam-altman-worldcoin-crypto-orb-us-launch). It uses an [iris scanner known as the Orb](/2024/10/18/24273691/world-orb-sam-altman-iris-scan-crypto-token) to assign people a World ID, which _Semafor_ says Reddit could use to verify human users while keeping them anonymous. In addition to World ID, Reddit would also allow users to verify themselves with “many” other options, according to _Semafor_. [Reddit in talks to embrace Sam Altman’s iris-scanning Orb to verify users](https://www.semafor.com/article/06/20/2025/reddit-considers-iris-scanning-orb-developed-by-a-sam-altman-startup) [semafor.com]",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 929
  },
  {
    "page_content": "[semafor.com] [](/news/690273/macos-tahoe-developer-beta-firewire-support-ieee-1394) External Link [](/news/690273/macos-tahoe-developer-beta-firewire-support-ieee-1394#comments) Andrew LiszewskiJun 20 Link macOS Tahoe could finally say goodbye to FireWire. According to [@NekoMichiUBC on X](https://x.com/NekoMichiUBC/status/1932876748661608561), and a [Reddit thread](https://www.reddit.com/r/MacOS/comments/1l7gb1r/macos_tahoe_dp1_seems_remove_firewire_800_support/), the first [developer beta of macOS Tahoe](/news/682871/apple-developer-beta-ios-26-watchos-26-macos-availability) does not include support for the IEEE 1394 standard, which Apple calls FireWire. Older external drives, capturing footage from MiniDV cameras, and even the first generation iPod aren’t compatible. However, it’s still several months before macOS Tahoe is officially released. FireWire support could still return, but the last computer Apple released with the port was the 13-inch 2012 MacBook Pro.",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 981
  },
  {
    "page_content": "However, it’s still several months before macOS Tahoe is officially released. FireWire support could still return, but the last computer Apple released with the port was the 13-inch 2012 MacBook Pro. [macOS Tahoe Beta Drops FireWire Support](https://www.macrumors.com/2025/06/19/macos-tahoe-beta-drops-firewire-support/) [macrumors.com] Tech Tech [Apple’s tiny M4 Mac Mini has dropped to its lowest price yet](/tech/690172/apple-mac-mini-m4-powerbeats-pro-earbuds-deal-sale) Brandt RanjJun 20[CommentsComment Icon Bubble](/tech/690172/apple-mac-mini-m4-powerbeats-pro-earbuds-deal-sale#comments) News News [Applebee’s and IHOP have plans for AI](/news/690458/applebees-ihop-ai-restaraunt-recommendations) Emma RothJun 20[CommentsComment Icon Bubble](/news/690458/applebees-ihop-ai-restaraunt-recommendations#comments) [](/news/690361/apple-mac-back-to-school-ad-parent-presentation) [](/news/690361/apple-mac-back-to-school-ad-parent-presentation#comments) Richard LawlerJun 20 Link Cringe or canny?",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 999
  },
  {
    "page_content": "[](/news/690361/apple-mac-back-to-school-ad-parent-presentation) [](/news/690361/apple-mac-back-to-school-ad-parent-presentation#comments) Richard LawlerJun 20 Link Cringe or canny? Apple has released [The Parent Presentation](https://www.apple.com/education/college-students/#:~:text=Convince%20your%20parents%0Ato%20get%20you%20a%C2%A0Mac.), an 81-page slide deck available in [Google Slides](https://docs.google.com/presentation/d/1fnB7HrN6fRFM9hNtnhbXdVepRxuJxZ84_aTTu4VECwg/template/preview), PowerPoint, or Keynote format, and a ([now set to private](https://www.youtube.com/watch?v=5O5U7hE65W0)) promo video hosted by [“nepo baby”](https://www.youtube.com/watch?v=XX_Rxvg8vdo) / Please Don’t Destroy comedian Martin Herlihy, aimed at getting students a Mac for school next year.",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 785
  },
  {
    "page_content": "I can’t decide if it’s a solid pitch (who hasn’t held a family meeting to get approval for a high-priced tech purchase?) or if it will miss its target audience because it’s 8 minutes long and not in a vertical video format. Either way, we also [have some advice on which laptop is the best option](/21250695/best-laptops). _(**Update:** \\-- The YouTube video is no longer available, but the presentation slides are still there.)_ [](https://platform.theverge.com/wp-content/uploads/sites/2/2025/06/Clipboard_06-20-2025_02.jpg?quality=90&strip=all&crop=0,0,100,100) Image: Apple Deals The Verge’s guide to Amazon Prime Day 2025 [How to find the best deals during Amazon’s four-day Prime Day sale](/21502865/amazon-prime-day-best-deals-how-to-find) Quentyn Kennemer, Sheena Vasani and 1 moreJun 20[CommentsComment Icon Bubble](/21502865/amazon-prime-day-best-deals-how-to-find#comments) News News",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 894
  },
  {
    "page_content": "Quentyn Kennemer, Sheena Vasani and 1 moreJun 20[CommentsComment Icon Bubble](/21502865/amazon-prime-day-best-deals-how-to-find#comments) News News [Amazon improves Kindle accessibility with new text spacing adjustments](/news/690259/amazon-kindle-software-update-accessibility-text-spacing-settings) Andrew LiszewskiJun 20[CommentsComment Icon Bubble](/news/690259/amazon-kindle-software-update-accessibility-text-spacing-settings#comments) News News [Microsoft is blocking Google Chrome through its family safety feature](/news/690179/microsoft-block-google-chrome-family-safety-feature) Tom WarrenJun 20[CommentsComment Icon Bubble](/news/690179/microsoft-block-google-chrome-family-safety-feature#comments) News News [Tesla’s first robotaxi rides will have a ‘safety monitor’ in the passenger seat](/news/690245/tesla-robotaxi-rides-launch-safety-monitor-passenger-seat)",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 874
  },
  {
    "page_content": "News News [Tesla’s first robotaxi rides will have a ‘safety monitor’ in the passenger seat](/news/690245/tesla-robotaxi-rides-launch-safety-monitor-passenger-seat) Emma RothJun 20[CommentsComment Icon Bubble](/news/690245/tesla-robotaxi-rides-launch-safety-monitor-passenger-seat#comments) Vergecast Vergecast [Truth, lies, and the Trump Phone](/the-vergecast/690202/trump-mobile-t1-phone-vergecast) David PierceJun 20[CommentsComment Icon Bubble](/the-vergecast/690202/trump-mobile-t1-phone-vergecast#comments) News News [Meta announces Oakley smart glasses](/news/690133/meta-oakley-hstn-ai-glasses-price-date) Alex HeathJun 20[CommentsComment Icon Bubble](/news/690133/meta-oakley-hstn-ai-glasses-price-date#comments) OpenAI Futureproof [You sound like ChatGPT](/openai/686748/chatgpt-linguistic-impact-common-word-usage) Sara ParkerJun 20[CommentsComment Icon Bubble](/openai/686748/chatgpt-linguistic-impact-common-word-usage#comments) [](/news/690166/the-bbc-cracks-down-on-ai-scraping)",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 992
  },
  {
    "page_content": "Sara ParkerJun 20[CommentsComment Icon Bubble](/openai/686748/chatgpt-linguistic-impact-common-word-usage#comments) [](/news/690166/the-bbc-cracks-down-on-ai-scraping) External Link [](/news/690166/the-bbc-cracks-down-on-ai-scraping#comments) Jess WeatherbedJun 20 Link The BBC cracks down on AI scraping. The British broadcaster has threatened legal action against Perplexity for allegedly using BBC content to train AI, saying that the Perplexity chatbot was regurgitating its content verbatim. This is the first time that the BBC has taken action against an AI company, demanding that Perplexity cease scraping BBC content, delete copies of infringing material, and provide the broadcaster with “financial compensation.” [BBC threatens legal action against AI start-up Perplexity over content scraping](https://www.ft.com/content/b743d401-dc5d-44b8-9987-825a4ffcf4ca) [ft.com] Verge Score",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 891
  },
  {
    "page_content": "[BBC threatens legal action against AI start-up Perplexity over content scraping](https://www.ft.com/content/b743d401-dc5d-44b8-9987-825a4ffcf4ca) [ft.com] Verge Score [Acer Swift 14 AI review: give it up for the ports](/reviews/687771/acer-swift-14-ai-intel-lunar-lake-amd-strix-point-review) Phenomenal battery life, plenty of ports, an okay screen, and the worst laptop speakers I’ve heard in my life. Antonio G. Di BenedettoJun 20[CommentsComment Icon Bubble](/reviews/687771/acer-swift-14-ai-intel-lunar-lake-amd-strix-point-review#comments) [](/news/690161/australia-says-its-technically-feasible-to-age-gate-social-media) External Link [](/news/690161/australia-says-its-technically-feasible-to-age-gate-social-media#comments) Jess WeatherbedJun 20 Link Australia says its ‘technically feasible’ to age-gate social media.",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 828
  },
  {
    "page_content": "External Link [](/news/690161/australia-says-its-technically-feasible-to-age-gate-social-media#comments) Jess WeatherbedJun 20 Link Australia says its ‘technically feasible’ to age-gate social media. The preliminary findings of [Australia’s Age Assurance Technology Trial](https://ageassurance.com.au/publications/) “didn’t find a single ubiquitous solution” for the country’s [incoming social media ban for under-16s](/2024/11/28/24308245/australia-bans-social-media-children-under-16), but trial director Tony Allen said there’s little stopping services like Facebook, Instagram, and X from implementing existing age-verification methods like facial scans, behavior assessments, and parental controls.",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 703
  },
  {
    "page_content": "[With so many](/news/666729/kids-online-safety-act-reintroduced) other [countries also trying](/2023/10/26/23922397/uk-online-safety-bill-law-passed-royal-assent-moderation-regulation) to [enforce online age restrictions](/news/676929/the-eu-age-verification-app-will-launch-in-july), you’d think Australia could have just asked? [Social Media Ban Moves Closer in Australia After Tech Trial](https://www.bloomberg.com/news/articles/2025-06-19/teen-social-media-ban-moves-closer-in-australia-after-tech-trial) [bloomberg.com] [](/news/690157/europeans-can-enjoy-ad-free-whatsapp-for-a-while) External Link [](/news/690157/europeans-can-enjoy-ad-free-whatsapp-for-a-while#comments) Jess WeatherbedJun 20 Link Europeans can enjoy ad-free WhatsApp for a while.",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 756
  },
  {
    "page_content": "External Link [](/news/690157/europeans-can-enjoy-ad-free-whatsapp-for-a-while#comments) Jess WeatherbedJun 20 Link Europeans can enjoy ad-free WhatsApp for a while. While Meta said [ads will be globally introduced to WhatsApp’s updates tab](/news/687519/whatsapp-launch-advertising-status-updates) “slowly over the next several months,” the company has now clarified to Ireland’s Data Protection Commission (DCP) that they won’t arrive in the European Union market until 2026. That gives EU privacy regulators time to discuss [data-sharing concerns about the ad model](https://noyb.eu/en/whatsapp-getting-ads-using-personal-data-instagram-and-facebook). [WhatsApp won’t roll out ads in EU until 2026](https://www.politico.eu/article/whatsapp-meta-ads-eu-facebook-instagram-2026/) [politico.eu] News News [Adobe launches a new ‘computational photography’ camera app for iPhones](/news/690115/adobe-project-indigo-camera-app-marc-levoy)",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 935
  },
  {
    "page_content": "[politico.eu] News News [Adobe launches a new ‘computational photography’ camera app for iPhones](/news/690115/adobe-project-indigo-camera-app-marc-levoy) Jay PetersJun 19[CommentsComment Icon Bubble](/news/690115/adobe-project-indigo-camera-app-marc-levoy#comments) [](/meta/690112/the-zuck-of-this-profile-will-feel-familiar) External Link [](/meta/690112/the-zuck-of-this-profile-will-feel-familiar#comments) Elizabeth LopattoJun 19 Link The Zuck of this profile will feel familiar...",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 487
  },
  {
    "page_content": "External Link [](/meta/690112/the-zuck-of-this-profile-will-feel-familiar#comments) Elizabeth LopattoJun 19 Link The Zuck of this profile will feel familiar... to readers of [Katherine Losse’s _The Boy Kings_](https://www.amazon.com/Boy-Kings-Journey-Social-Network/dp/1451668260?tag=theverge02-20) _._ The _Financial Times_ makes a compelling case that [loser-bro Zuck](/2025/1/10/24341117/mark-zuckerberg-facebook-joe-rogan-lies) is who he has always been. Also, his feelings were _very_ hurt when [we all had a good laugh about Meta’s avatars](/2022/8/19/23313469/mark-zuckerberg-horizon-worlds-screenshot-memes-response-upgrades) (“Legs coming soon!”). No wonder [he wants AI friends](https://www.cnbc.com/2025/05/09/mark-zuckerberg-says-ai-can-replace-human-relationshipsexpert-disagrees.html), who’ll never mock him like that. [How Mark Zuckerberg unleashed his inner brawler](https://www.ft.com/content/a86f5ca3-f841-4cdc-9376-304e085c4cfd) [ft.com] Tech Tech",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 966
  },
  {
    "page_content": "[How Mark Zuckerberg unleashed his inner brawler](https://www.ft.com/content/a86f5ca3-f841-4cdc-9376-304e085c4cfd) [ft.com] Tech Tech [Eufy’s X10 Pro Omni mopping robovac has returned to its best price to date](/tech/689275/eufy-x10-pro-omni-mopping-robot-vacuum-deal-sale) Brandon RussellJun 19[CommentsComment Icon Bubble](/tech/689275/eufy-x10-pro-omni-mopping-robot-vacuum-deal-sale#comments) [](/news/690072/latest-fairphone-6-leak-shows-off-the-two-part-back) [](/news/690072/latest-fairphone-6-leak-shows-off-the-two-part-back#comments) Emma RothJun 19 Link Latest Fairphone 6 leak shows off the two-part back cover. We already got a glimpse at what [seems to be the repair-friendly Fairphone 6](/news/682627/fairphone-6-leak-modular-design-accessories-repairable) earlier this month, but now [_Winfuture_ is back](https://winfuture.de/news,151633.html) with another leak that shows how you can remove the lower half of the two-part back cover to reveal the phone’s battery.",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 981
  },
  {
    "page_content": "As reported by _Winfuture_ , you still have to unscrew the battery, but it’s not glued in, making it far easier to replace. Fairphone is expected to launch the new device on June 25th. [](https://platform.theverge.com/wp-content/uploads/sites/2/2025/06/fairphoneleak-1.png?quality=90&strip=all) [](https://platform.theverge.com/wp-content/uploads/sites/2/2025/06/fairphoneleak-2.png?quality=90&strip=all) [](https://platform.theverge.com/wp-content/uploads/sites/2/2025/06/fairphoneleak-3.png?quality=90&strip=all) PreviousNext * * * **1 /3**Image: Winfuture [](/news/690074/enter-the-glyph-matrix) Twitter [](/news/690074/enter-the-glyph-matrix#comments) Jay PetersJun 19 Link Enter the (Glyph) Matrix.",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 703
  },
  {
    "page_content": "PreviousNext * * * **1 /3**Image: Winfuture [](/news/690074/enter-the-glyph-matrix) Twitter [](/news/690074/enter-the-glyph-matrix#comments) Jay PetersJun 19 Link Enter the (Glyph) Matrix. Nothing is teasing a [“Glyph Matrix”](https://x.com/nothing/status/1935669481906266282) for the upcoming Nothing Phone 3. A recent leak seemed to show that the phone [wouldn’t have Glyph lights](/news/684824/nothing-phone-3-leak-glyph-lights-gone), but it appears it will have this Matrix instead. The company plans to share more details about the phone on July 1st. News News [Midjourney launches an AI video generator](/news/690055/midjourney-ai-video-generator-launch) Emma RothJun 19[CommentsComment Icon Bubble](/news/690055/midjourney-ai-video-generator-launch#comments) [](/tiktok/690044/the-tiktok-ban-is-banned-again) The Verge [](/tiktok/690044/the-tiktok-ban-is-banned-again#comments) Adi RobertsonJun 19 Link The TikTok ban is banned, again.",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 942
  },
  {
    "page_content": "[](/tiktok/690044/the-tiktok-ban-is-banned-again) The Verge [](/tiktok/690044/the-tiktok-ban-is-banned-again#comments) Adi RobertsonJun 19 Link The TikTok ban is banned, again. The incredibly weird saga of the [ordered](/2020/9/18/21445060/trump-tiktok-wechat-ban-us-apple-app-store-google-play-commerce-department), then [reversed](/2021/6/9/22525953/biden-tiktok-wechat-trump-bans-revoked-alipay), then [passed](/2024/4/23/24137638/senate-passes-tiktok-ban-bill-divest-bytedance-foreign-aid), then [upheld](/2025/1/17/24340235/supreme-court-tiktok-divest-ban-first-amendment), then [ignored](/2025/1/16/24345461/biden-punts-tiktok-ban-trump), then [ignored even harder](/2025/1/20/24348213/trump-tiktok-ban-executive-order-sale-delay-china) attempt to ban one of America’s most popular social networks continues — as it will continue until US-China tensions cool down, everyone forgets it ever happened, or the heat death of the universe. [](/news/688252/tiktok-ban-trump-extension-deal)",
    "metadata": {
      "H1": "Tech",
      "H2": "Latest In Tech",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 989
  },
  {
    "page_content": "## [Trump gives TikTok another ban extension](/news/688252/tiktok-ban-trump-extension-deal) Lauren Feiner Jun 19 News News [Trump gives TikTok another ban extension](/news/688252/tiktok-ban-trump-extension-deal) Lauren FeinerJun 19[CommentsComment Icon Bubble](/news/688252/tiktok-ban-trump-extension-deal#comments) News News [DOJ files to seize $225 million in crypto from scammers](/news/689956/doj-tether-cryptocurrency-investment-pig-butchering-scam-seizure) Adi RobertsonJun 19[CommentsComment Icon Bubble](/news/689956/doj-tether-cryptocurrency-investment-pig-butchering-scam-seizure#comments) Tech Tech [Eero’s speedy Pro 6E mesh system is on sale with a gift card for $200 off](/tech/689687/eero-6e-router-system-anker-six-port-desktop-charger-deal-sale) Brandt RanjJun 19[CommentsComment Icon Bubble](/tech/689687/eero-6e-router-system-anker-six-port-desktop-charger-deal-sale#comments) Tech The Verge’s guide to Amazon Prime Day 2025",
    "metadata": {
      "H1": "Tech",
      "H2": "[Trump gives TikTok another ban extension](/news/688252/tiktok-ban-trump-extension-deal)",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 943
  },
  {
    "page_content": "Brandt RanjJun 19[CommentsComment Icon Bubble](/tech/689687/eero-6e-router-system-anker-six-port-desktop-charger-deal-sale#comments) Tech The Verge’s guide to Amazon Prime Day 2025 [Here are the price-matching policies for Best Buy, GameStop, and others](/21570383/price-matching-policy-apple-google-microsoft) Sheena VasaniJun 19[CommentsComment Icon Bubble](/21570383/price-matching-policy-apple-google-microsoft#comments) Futureproof [AI residencies are trying to change the conversation around artificial art](/ai-artificial-intelligence/689693/ai-art-residencies-get-artists-using-generative-tech) Deena MousaJun 19[CommentsComment Icon Bubble](/ai-artificial-intelligence/689693/ai-art-residencies-get-artists-using-generative-tech#comments) [](/news/689587/duckduckgos-scam-blocker-now-covers-fake-ecommerce-sites-and-more) [](/news/689587/duckduckgos-scam-blocker-now-covers-fake-ecommerce-sites-and-more#comments) Emma RothJun 19 Link",
    "metadata": {
      "H1": "Tech",
      "H2": "[Trump gives TikTok another ban extension](/news/688252/tiktok-ban-trump-extension-deal)",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 943
  },
  {
    "page_content": "[](/news/689587/duckduckgos-scam-blocker-now-covers-fake-ecommerce-sites-and-more) [](/news/689587/duckduckgos-scam-blocker-now-covers-fake-ecommerce-sites-and-more#comments) Emma RothJun 19 Link DuckDuckGo’s scam blocker now covers fake ecommerce sites and more. The tool, which is built into DuckDuckGo’s browser, displays a warning message when you click on potentially dangerous sites. In addition to blocking phishing sites, malware, and common online scams, DuckDuckGo has expanded the tool to protect against fake online stores, phony crypto exchanges, and those obnoxious sites that falsely claim your device has a virus. [](https://platform.theverge.com/wp-content/uploads/sites/2/2025/06/scam-blocker-ddg.jpg?quality=90&strip=all&crop=0,0,100,100) Image: DuckDuckGo [](/news/689269/now-its-honors-turn-to-do-the-worlds-thinnest-foldable) [](/news/689269/now-its-honors-turn-to-do-the-worlds-thinnest-foldable#comments) Dominic PrestonJun 19 Link",
    "metadata": {
      "H1": "Tech",
      "H2": "[Trump gives TikTok another ban extension](/news/688252/tiktok-ban-trump-extension-deal)",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 955
  },
  {
    "page_content": "Image: DuckDuckGo [](/news/689269/now-its-honors-turn-to-do-the-worlds-thinnest-foldable) [](/news/689269/now-its-honors-turn-to-do-the-worlds-thinnest-foldable#comments) Dominic PrestonJun 19 Link Now it’s Honor’s turn to do the world’s thinnest foldable. The Magic V5 will launch in China on July 2nd, and we know almost nothing about it except that Honor says it will be the slimmest around, allowing the company to reclaim the super-thin title it held with [last year’s Magic V3](/2024/9/5/24235231/honor-magic-v3-thin-foldable-europe-launch). That means it must be thinner than the [Oppo Find N5](http://8.93mm)’s 8.93mm when shut, but will it beat Samsung’s Galaxy Z Fold 7, also launching in July and [tipped to be slim](http://allowing Honor to reclaim the super-crown it previously held with last year’s Magic V3)? [](https://platform.theverge.com/wp-content/uploads/sites/2/2025/06/JPG.016.jpeg?quality=90&strip=all&crop=0,0,100,100) Tech Tech",
    "metadata": {
      "H1": "Tech",
      "H2": "[Trump gives TikTok another ban extension](/news/688252/tiktok-ban-trump-extension-deal)",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 953
  },
  {
    "page_content": "[](https://platform.theverge.com/wp-content/uploads/sites/2/2025/06/JPG.016.jpeg?quality=90&strip=all&crop=0,0,100,100) Tech Tech [The best iPad deals you can get right now](/21280354/best-ipad-deals-apple) Brandon Widder and Quentyn KennemerJun 19[CommentsComment Icon Bubble](/21280354/best-ipad-deals-apple#comments)",
    "metadata": {
      "H1": "Tech",
      "H2": "[Trump gives TikTok another ban extension](/news/688252/tiktok-ban-trump-extension-deal)",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 319
  },
  {
    "page_content": "## Most Popular Most Popular 1. [You sound like ChatGPT](/openai/686748/chatgpt-linguistic-impact-common-word-usage) 2. [The Nintendo Switch 2 is an awesome upgrade for parents like me](/nintendo/690224/nintendo-switch-2-parenting-gameshare) 3. [The Verge’s guide to Amazon Prime Day 2025](/tech/689359/amazon-prime-day-tech-deals-guide-2025) 4. [Apple’s tiny M4 Mac Mini has dropped to its lowest price yet](/tech/690172/apple-mac-mini-m4-powerbeats-pro-earbuds-deal-sale) 5. [Meta announces Oakley smart glasses](/news/690133/meta-oakley-hstn-ai-glasses-price-date)",
    "metadata": {
      "H1": "Tech",
      "H2": "Most Popular",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 567
  },
  {
    "page_content": "## Installer A weekly newsletter by David Pierce designed to tell you everything you need to download, watch, read, listen to, and explore that fits in The Verge’s universe. Email (required) Sign Up By submitting your email, you agree to our [Terms](https://www.voxmedia.com/legal/terms-of-use) and [Privacy Notice](https://www.voxmedia.com/legal/privacy-notice). This site is protected by reCAPTCHA and the Google [Privacy Policy](https://policies.google.com/privacy) and [Terms of Service](https://policies.google.com/terms) apply. [Advertiser Content FromThis is the title for the native ad](/)",
    "metadata": {
      "H1": "Tech",
      "H2": "Installer",
      "source": "https://www.theverge.com/tech",
      "title": "Tech | The Verge",
      "description": "The latest tech news about the world’s best (and sometimes worst) hardware, apps, and much more. From top companies like Google and Apple to tiny startups vying for your attention, Verge Tech has the latest in what matters in technology daily.",
      "selector_used": "main",
      "content_type": "markdown"
    },
    "content_length": 597
  },
  {
    "page_content": "[August 9, 2000December 5, 2016](https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/) by [Joel Spolsky](https://www.joelonsoftware.com/author/joelonsoftware/)",
    "metadata": {
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 187
  },
  {
    "page_content": "# The Joel Test: 12 Steps to Better Code * [Top 10](https://www.joelonsoftware.com/category/reading-lists/top-10/), [Rock star developer](https://www.joelonsoftware.com/category/reading-lists/rock-star-developer/), [News](https://www.joelonsoftware.com/category/news/) Have you ever heard of [SEMA](http://www.sei.cmu.edu/sema/welcome.html)? It’s a fairly esoteric system for measuring how good a software team is. No, _wait! Don’t follow that link!_ It will take you about six years just to _understand_ that stuff. So I’ve come up with my own, highly irresponsible, sloppy test to rate the quality of a software team. The great part about it is that it takes about 3 minutes. With all the time you save, you can go to medical school. The Joel Test 1. Do you use source control? 2. Can you make a build in one step? 3. Do you make daily builds? 4. Do you have a bug database? 5. Do you fix bugs before writing new code? 6. Do you have an up-to-date schedule? 7. Do you have a spec?",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 982
  },
  {
    "page_content": "3. Do you make daily builds? 4. Do you have a bug database? 5. Do you fix bugs before writing new code? 6. Do you have an up-to-date schedule? 7. Do you have a spec? 8. Do programmers have quiet working conditions? 9. Do you use the best tools money can buy? 10. Do you have testers? 11. Do new candidates write code during their interview? 12. Do you do hallway usability testing? The neat thing about The Joel Test is that it’s easy to get a quick **yes** or **no** to each question. You don’t have to figure out lines-of-code-per-day or average-bugs-per-inflection-point. Give your team 1 point for each “yes” answer. The bummer about The Joel Test is that you _really shouldn’t_ use it to make sure that your nuclear power plant software is safe.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 750
  },
  {
    "page_content": "A score of 12 is perfect, 11 is tolerable, but 10 or lower and you’ve got serious problems. The truth is that most software organizations are running with a score of 2 or 3, and they need _serious_ help, because companies like Microsoft run at 12 full-time. Of course, these are not the only factors that determine success or failure: in particular, if you have a great software team working on a product that nobody wants, well, people aren’t going to want it. And it’s possible to imagine a team of “gunslingers” that doesn’t do any of this stuff that still manages to produce incredible software that changes the world. But, all else being equal, if you get these 12 things right, you’ll have a disciplined team that can consistently deliver. **1\\. Do you use source control?**",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 780
  },
  {
    "page_content": "**1\\. Do you use source control?** I’ve used commercial source control packages, and I’ve used [CVS](http://www.cvshome.org/), which is free, and let me tell you, CVS is _fine_. But if you don’t have source control, you’re going to stress out trying to get programmers to work together. Programmers have no way to know what other people did. Mistakes can’t be rolled back easily. The other neat thing about source control systems is that the source code itself is checked out on every programmer’s hard drive — I’ve never heard of a project using source control that lost a lot of code. **2\\. Can you make a build in one step?**",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 628
  },
  {
    "page_content": "**2\\. Can you make a build in one step?** By this I mean: how many steps does it take to make a shipping build from the latest source snapshot? On good teams, there’s a single script you can run that does a full checkout from scratch, rebuilds every line of code, makes the EXEs, in all their various versions, languages, and #ifdef combinations, creates the installation package, and creates the final media — CDROM layout, download website, whatever. If the process takes any more than one step, it is prone to errors. And when you get closer to shipping, you want to have a very fast cycle of fixing the “last” bug, making the final EXEs, etc. If it takes 20 steps to compile the code, run the installation builder, etc., you’re going to go crazy and you’re going to make silly mistakes.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 790
  },
  {
    "page_content": "For this very reason, the last company I worked at switched from WISE to InstallShield: we _required_ that the installation process be able to run, from a script, automatically, overnight, using the NT scheduler, and WISE couldn’t run from the scheduler overnight, so we threw it out. (The kind folks at WISE assure me that their latest version does support nightly builds.) **3\\. Do you make daily builds?** When you’re using source control, sometimes one programmer accidentally checks in something that breaks the build. For example, they’ve added a new source file, and everything compiles fine on their machine, but they forgot to add the source file to the code repository. So they lock their machine and go home, oblivious and happy. But nobody else can work, so they have to go home too, unhappy.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 804
  },
  {
    "page_content": "Breaking the build is so bad (and so common) that it helps to make daily builds, to insure that no breakage goes unnoticed. On large teams, one good way to insure that breakages are fixed right away is to do the daily build every afternoon at, say, lunchtime. Everyone does as many checkins as possible before lunch. When they come back, the build is done. If it worked, great! Everybody checks out the latest version of the source and goes on working. If the build failed, you fix it, but everybody can keep on working with the pre-build, unbroken version of the source. On the Excel team we had a rule that whoever broke the build, as their “punishment”, was responsible for babysitting the builds until someone else broke it. This was a good incentive not to break the build, and a good way to rotate everyone through the build process so that everyone learned how it worked.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 878
  },
  {
    "page_content": "Read more about daily builds in my article [Daily Builds are Your Friend](https://www.joelonsoftware.com/articles/fog0000000023.html). **4\\. Do you have a bug database?** I don’t care what you say. If you are developing code, even on a team of one, without an organized database listing all known bugs in the code, you are going to ship low quality code. Lots of programmers think they can hold the bug list in their heads. Nonsense. I can’t remember more than two or three bugs at a time, and the next morning, or in the rush of shipping, they are forgotten. You absolutely have to keep track of bugs formally. Bug databases can be complicated or simple. A minimal useful bug database must include the following data for every bug: * complete steps to reproduce the bug * expected behavior * observed (buggy) behavior * who it’s assigned to * whether it has been fixed or not",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 876
  },
  {
    "page_content": "* complete steps to reproduce the bug * expected behavior * observed (buggy) behavior * who it’s assigned to * whether it has been fixed or not If the complexity of bug tracking software is the only thing stopping you from tracking your bugs, just make a simple 5 column table with these crucial fields and _start using it_. For more on bug tracking, read [Painless Bug Tracking](https://www.joelonsoftware.com/articles/fog0000000029.html). **5\\. Do you fix bugs before writing new code?** The very first version of Microsoft Word for Windows was considered a “death march” project. It took forever. It kept slipping. The whole team was working ridiculous hours, the project was delayed again, and again, and again, and the stress was incredible. When the dang thing finally shipped, years late, Microsoft sent the whole team off to Cancun for a vacation, then sat down for some serious soul-searching.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 902
  },
  {
    "page_content": "What they realized was that the project managers had been so insistent on keeping to the “schedule” that programmers simply rushed through the coding process, writing extremely bad code, because the bug fixing phase was not a part of the formal schedule. There was no attempt to keep the bug-count down. Quite the opposite. The story goes that one programmer, who had to write the code to calculate the height of a line of text, simply wrote “return 12;” and waited for the bug report to come in about how his function is not always correct. The schedule was merely a checklist of features waiting to be turned into bugs. In the post-mortem, this was referred to as “infinite defects methodology”.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 697
  },
  {
    "page_content": "To correct the problem, Microsoft universally adopted something called a “zero defects methodology”. Many of the programmers in the company giggled, since it sounded like management thought they could reduce the bug count by executive fiat. Actually, “zero defects” meant that at any given time, the highest priority is to eliminate bugs _before_ writing any new code. Here’s why. In general, the longer you wait before fixing a bug, the costlier (in time and money) it is to fix. For example, when you make a typo or syntax error that the compiler catches, fixing it is basically trivial. When you have a bug in your code that you see the first time you try to run it, you will be able to fix it in no time at all, because all the code is still fresh in your mind.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 765
  },
  {
    "page_content": "When you have a bug in your code that you see the first time you try to run it, you will be able to fix it in no time at all, because all the code is still fresh in your mind. If you find a bug in some code that you wrote a few days ago, it will take you a while to hunt it down, but when you reread the code you wrote, you’ll remember everything and you’ll be able to fix the bug in a reasonable amount of time. But if you find a bug in code that you wrote a few _months_ ago, you’ll probably have forgotten a lot of things about that code, and it’s much harder to fix. By that time you may be fixing somebody _else’s_ code, and they may be in Aruba on vacation, in which case, fixing the bug is like science: you have to be slow, methodical, and meticulous, and you can’t be sure how long it will take to discover the cure. And if you find a bug in code that has _already shipped_ , you’re going to incur incredible expense getting it fixed.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 943
  },
  {
    "page_content": "And if you find a bug in code that has _already shipped_ , you’re going to incur incredible expense getting it fixed. That’s one reason to fix bugs right away: because it takes less time. There’s another reason, which relates to the fact that it’s easier to _predict_ how long it will take to write new code than to fix an existing bug. For example, if I asked you to predict how long it would take to write the code to sort a list, you could give me a pretty good estimate. But if I asked you how to predict how long it would take to fix that bug where your code doesn’t work if Internet Explorer 5.5 is installed, you can’t even _guess_ , because you don’t know (by definition) what’s _causing_ the bug. It could take 3 days to track it down, or it could take 2 minutes.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 772
  },
  {
    "page_content": "What this means is that if you have a schedule with a lot of bugs remaining to be fixed, the schedule is unreliable. But if you’ve fixed all the _known_ bugs, and all that’s left is new code, then your schedule will be stunningly more accurate. Another great thing about keeping the bug count at zero is that you can respond much faster to competition. Some programmers think of this as keeping the product _ready to ship_ at all times. Then if your competitor introduces a killer new feature that is stealing your customers, you can implement just that feature and ship on the spot, without having to fix a large number of accumulated bugs. **6\\. Do you have an up-to-date schedule?** Which brings us to schedules. If your code is at all important to the business, there are lots of reasons why it’s important to the business to know when the code is going to be done. Programmers are notoriously crabby about making schedules. “It will be done when it’s done!” they scream at the business people.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 998
  },
  {
    "page_content": "Unfortunately, that just doesn’t cut it. There are too many planning decisions that the business needs to make well in advance of shipping the code: demos, trade shows, advertising, etc. And the only way to do this is to have a schedule, and to keep it up to date. The other crucial thing about having a schedule is that it forces you to decide what features you are going to do, and then it forces you to pick the least important features and _cut them_ rather than slipping into [featuritis](http://www.netmeg.net/jargon/terms/c/creeping_featuritis.html) (a.k.a. scope creep). Keeping schedules does not have to be hard. Read my article [Painless Software Schedules](https://www.joelonsoftware.com/articles/fog0000000245.html), which describes a simple way to make great schedules. **7\\. Do you have a spec?** Writing specs is like flossing: everybody agrees that it’s a good thing, but nobody does it.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 904
  },
  {
    "page_content": "**7\\. Do you have a spec?** Writing specs is like flossing: everybody agrees that it’s a good thing, but nobody does it. I’m not sure why this is, but it’s probably because most programmers hate writing documents. As a result, when teams consisting solely of programmers attack a problem, they prefer to express their solution in code, rather than in documents. They would much rather dive in and write code than produce a spec first.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 434
  },
  {
    "page_content": "At the design stage, when you discover problems, you can fix them easily by editing a few lines of text. Once the code is written, the cost of fixing problems is dramatically higher, both emotionally (people hate to throw away code) and in terms of time, so there’s resistance to actually fixing the problems. Software that wasn’t built from a spec usually winds up badly designed and the schedule gets out of control. This seems to have been the problem at Netscape, where the first four versions grew into such a mess that management [stupidly decided](https://www.joelonsoftware.com/articles/fog0000000069.html) to throw out the code and start over. And then they made this mistake all over again with Mozilla, creating a monster that spun out of control and took _several years_ to get to alpha stage.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 805
  },
  {
    "page_content": "My pet theory is that this problem can be fixed by teaching programmers to be less reluctant writers by sending them off to take [an intensive course in writing](http://www.yale.edu/engl450b/). Another solution is to hire smart program managers who produce the written spec. In either case, you should enforce the simple rule “no code without spec”. Learn all about writing specs by reading my [4-part series](https://www.joelonsoftware.com/articles/fog0000000036.html). **8\\. Do programmers have quiet working conditions?** There are extensively documented productivity gains provided by giving knowledge workers space, quiet, and privacy. The classic software management book [Peopleware](http://www.amazon.com/exec/obidos/ASIN/0932633439/ref=nosim/joelonsoftware/) documents these productivity benefits extensively.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 818
  },
  {
    "page_content": "Here’s the trouble. We all know that knowledge workers work best by getting into “flow”, also known as being “in the zone”, where they are fully concentrated on their work and fully tuned out of their environment. They lose track of time and produce great stuff through absolute concentration. This is when they get all of their productive work done. Writers, programmers, scientists, and even basketball players will tell you about being in the zone. The trouble is, getting into “the zone” is not easy. When you try to measure it, it looks like it takes an average of 15 minutes to start working at maximum productivity. Sometimes, if you’re tired or have already done a lot of creative work that day, you just can’t get into the zone and you spend the rest of your work day fiddling around, reading the web, playing Tetris.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 826
  },
  {
    "page_content": "The other trouble is that it’s so easy to get knocked _out_ of the zone. Noise, phone calls, going out for lunch, having to drive 5 minutes to Starbucks for coffee, and interruptions by coworkers — _especially_ interruptions by coworkers — all knock you out of the zone. If a coworker asks you a question, causing a 1 minute interruption, but this knocks you out of the zone badly enough that it takes you half an hour to get productive again, your overall productivity is in serious trouble. If you’re in a noisy bullpen environment like the type that caffeinated dotcoms love to create, with marketing guys screaming on the phone next to programmers, your productivity will plunge as knowledge workers get interrupted time after time and never get into the zone.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 764
  },
  {
    "page_content": "With programmers, it’s especially hard. Productivity depends on being able to juggle a lot of little details in short term memory all at once. Any kind of interruption can cause these details to come crashing down. When you resume work, you can’t remember any of the details (like local variable names you were using, or where you were up to in implementing that search algorithm) and you have to keep looking these things up, which slows you down a lot until you get back up to speed.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 485
  },
  {
    "page_content": "Here’s the simple algebra. Let’s say (as the evidence seems to suggest) that if we interrupt a programmer, even for a minute, we’re really blowing away 15 minutes of productivity. For this example, lets put two programmers, Jeff and Mutt, in open cubicles next to each other in a standard Dilbert veal-fattening farm. Mutt can’t remember the name of the Unicode version of the strcpy function. He could look it up, which takes 30 seconds, or he could ask Jeff, which takes 15 seconds. Since he’s sitting right next to Jeff, he asks Jeff. Jeff gets distracted and loses 15 minutes of productivity (to save Mutt 15 seconds).",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 622
  },
  {
    "page_content": "Now let’s move them into separate offices with walls and doors. Now when Mutt can’t remember the name of that function, he could look it up, which still takes 30 seconds, or he could ask Jeff, which now takes 45 seconds and involves standing up (not an easy task given the average physical fitness of programmers!). So he looks it up. So now Mutt loses 30 seconds of productivity, but we save 15 minutes for Jeff. Ahhh! **9\\. Do you use the best tools money can buy?** Writing code in a compiled language is one of the last things that still can’t be done instantly on a garden variety home computer. If your compilation process takes more than a few seconds, getting the latest and greatest computer is going to save you time. If compiling takes even 15 seconds, programmers will get bored while the compiler runs and switch over to reading [The Onion](http://www.theonion.com/), which will suck them in and kill hours of productivity.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 936
  },
  {
    "page_content": "Debugging GUI code with a single monitor system is painful if not impossible. If you’re writing GUI code, two monitors will make things much easier. Most programmers eventually have to manipulate bitmaps for icons or toolbars, and most programmers don’t have a good bitmap editor available. Trying to use Microsoft Paint to manipulate bitmaps is a joke, but that’s what most programmers have to do. At [my last job](https://www.joelonsoftware.com/articles/TwoStories.html), the system administrator kept sending me automated spam complaining that I was using more than … get this … 220 megabytes of hard drive space on the server. I pointed out that given the price of hard drives these days, the cost of this space was significantly less than the cost of the _toilet paper_ I used. Spending even 10 minutes cleaning up my directory would be a fabulous waste of productivity.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 875
  },
  {
    "page_content": "**Top notch development teams don’t torture their programmers.** Even minor frustrations caused by using underpowered tools add up, making programmers grumpy and unhappy. And a grumpy programmer is an unproductive programmer. To add to all this… programmers are easily bribed by giving them the coolest, latest stuff. This is a far cheaper way to get them to work for you than actually paying competitive salaries! **10\\. Do you have testers?** If your team doesn’t have dedicated testers, at least one for every two or three programmers, you are either shipping buggy products, or you’re wasting money by having $100/hour programmers do work that can be done by $30/hour testers. Skimping on testers is such an outrageous false economy that I’m simply blown away that more people don’t recognize it. Read [Top Five (Wrong) Reasons You Don’t Have Testers](https://www.joelonsoftware.com/articles/fog0000000067.html), an article I wrote about this subject.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 955
  },
  {
    "page_content": "Read [Top Five (Wrong) Reasons You Don’t Have Testers](https://www.joelonsoftware.com/articles/fog0000000067.html), an article I wrote about this subject. **11\\. Do new candidates write code during their interview?** Would you hire a magician without asking them to show you some magic tricks? Of course not. Would you hire a caterer for your wedding without tasting their food? I doubt it. (Unless it’s Aunt Marge, and she would hate you for _ever_ if you didn’t let her make her “famous” chopped liver cake).",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 510
  },
  {
    "page_content": "Yet, every day, programmers are hired on the basis of an impressive resumé or because the interviewer enjoyed chatting with them. Or they are asked trivia questions (“what’s the difference between CreateDialog() and DialogBox()?”) which could be answered by looking at the documentation. You don’t care if they have memorized thousands of trivia about programming, you care if they are able to produce code. Or, even worse, they are asked “AHA!” questions: the kind of questions that seem easy when you know the answer, but if you don’t know the answer, they are impossible. Please, just _stop doing this_. Do whatever you want during interviews, but make the candidate _write some code_. (For more advice, read my [Guerrilla Guide to Interviewing](https://www.joelonsoftware.com/articles/fog0000000073.html).) **12\\. Do you do hallway usability testing?",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 854
  },
  {
    "page_content": "**12\\. Do you do hallway usability testing? **A _hallway usability test_ is where you grab the next person that passes by in the hallway and force them to try to use the code you just wrote. If you do this to five people, you will learn 95% of what there is to learn about usability problems in your code. Good user interface design is not as hard as you would think, and it’s crucial if you want customers to love and buy your product. You can read my [free online book on UI design](https://www.joelonsoftware.com/uibook/chapters/fog0000000057.html), a short primer for programmers.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 584
  },
  {
    "page_content": "But the most important thing about user interfaces is that if you show your program to a handful of people, (in fact, five or six is enough) you will quickly discover the biggest problems people are having. Read [Jakob Nielsen’s article](http://www.useit.com/alertbox/20000319.html) explaining why. Even if your UI design skills are lacking, as long as you force yourself to do hallway usability tests, which cost nothing, your UI will be much, much better.",
    "metadata": {
      "H1": "The Joel Test: 12 Steps to Better Code",
      "source": "https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/",
      "title": "The Joel Test: 12 Steps to Better Code – Joel on Software",
      "description": "Have you ever heard of SEMA? It's a fairly esoteric system for measuring how good a software team is. No, wait! Don't follow that link! It will take you about six years just to understand that stuff. So I've come up with my own, highly irresponsible, sloppy test to rate the quality of a software…",
      "selector_used": "article",
      "content_type": "markdown"
    },
    "content_length": 457
  }
]